
Lab5_Embsys_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00802000  00003646  000036da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000287  00802058  00802058  00003732  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003732  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001254d  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000576e  00000000  00000000  00016341  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a362  00000000  00000000  0001baaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013fc  00000000  00000000  00025e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003af83  00000000  00000000  00027210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009f16  00000000  00000000  00062193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  0006c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c98f  00000000  00000000  0006c8b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c2       	rjmp	.+1202   	; 0x4e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_14>
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c2       	rjmp	.+1146   	; 0x4e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c2       	rjmp	.+1106   	; 0x4e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c2       	rjmp	.+1102   	; 0x4e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	23 c2       	rjmp	.+1094   	; 0x4e4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c2       	rjmp	.+1046   	; 0x4e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c2       	rjmp	.+1042   	; 0x4e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c2       	rjmp	.+1034   	; 0x4e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c2       	rjmp	.+1030   	; 0x4e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff c1       	rjmp	.+1022   	; 0x4e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fd c1       	rjmp	.+1018   	; 0x4e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fb c1       	rjmp	.+1014   	; 0x4e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f9 c1       	rjmp	.+1010   	; 0x4e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f7 c1       	rjmp	.+1006   	; 0x4e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f5 c1       	rjmp	.+1002   	; 0x4e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f3 c1       	rjmp	.+998    	; 0x4e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f1 c1       	rjmp	.+994    	; 0x4e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	ef c1       	rjmp	.+990    	; 0x4e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	ed c1       	rjmp	.+986    	; 0x4e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	eb c1       	rjmp	.+982    	; 0x4e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e9 c1       	rjmp	.+978    	; 0x4e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	e7 c1       	rjmp	.+974    	; 0x4e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	e5 c1       	rjmp	.+970    	; 0x4e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e3 c1       	rjmp	.+966    	; 0x4e4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e1 c1       	rjmp	.+962    	; 0x4e4 <__bad_interrupt>
     122:	00 00       	nop
     124:	df c1       	rjmp	.+958    	; 0x4e4 <__bad_interrupt>
     126:	00 00       	nop
     128:	dd c1       	rjmp	.+954    	; 0x4e4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	db c1       	rjmp	.+950    	; 0x4e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d9 c1       	rjmp	.+946    	; 0x4e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d7 c1       	rjmp	.+942    	; 0x4e4 <__bad_interrupt>
     136:	00 00       	nop
     138:	d5 c1       	rjmp	.+938    	; 0x4e4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d3 c1       	rjmp	.+934    	; 0x4e4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d1 c1       	rjmp	.+930    	; 0x4e4 <__bad_interrupt>
     142:	00 00       	nop
     144:	cf c1       	rjmp	.+926    	; 0x4e4 <__bad_interrupt>
     146:	00 00       	nop
     148:	cd c1       	rjmp	.+922    	; 0x4e4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	cb c1       	rjmp	.+918    	; 0x4e4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c9 c1       	rjmp	.+914    	; 0x4e4 <__bad_interrupt>
     152:	00 00       	nop
     154:	c7 c1       	rjmp	.+910    	; 0x4e4 <__bad_interrupt>
     156:	00 00       	nop
     158:	c5 c1       	rjmp	.+906    	; 0x4e4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c3 c1       	rjmp	.+902    	; 0x4e4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c1 c1       	rjmp	.+898    	; 0x4e4 <__bad_interrupt>
     162:	00 00       	nop
     164:	bf c1       	rjmp	.+894    	; 0x4e4 <__bad_interrupt>
     166:	00 00       	nop
     168:	bd c1       	rjmp	.+890    	; 0x4e4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	bb c1       	rjmp	.+886    	; 0x4e4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b9 c1       	rjmp	.+882    	; 0x4e4 <__bad_interrupt>
     172:	00 00       	nop
     174:	b7 c1       	rjmp	.+878    	; 0x4e4 <__bad_interrupt>
     176:	00 00       	nop
     178:	b5 c1       	rjmp	.+874    	; 0x4e4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b3 c1       	rjmp	.+870    	; 0x4e4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b1 c1       	rjmp	.+866    	; 0x4e4 <__bad_interrupt>
     182:	00 00       	nop
     184:	af c1       	rjmp	.+862    	; 0x4e4 <__bad_interrupt>
     186:	00 00       	nop
     188:	ad c1       	rjmp	.+858    	; 0x4e4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ab c1       	rjmp	.+854    	; 0x4e4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a9 c1       	rjmp	.+850    	; 0x4e4 <__bad_interrupt>
     192:	00 00       	nop
     194:	a7 c1       	rjmp	.+846    	; 0x4e4 <__bad_interrupt>
     196:	00 00       	nop
     198:	a5 c1       	rjmp	.+842    	; 0x4e4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a3 c1       	rjmp	.+838    	; 0x4e4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9f c1       	rjmp	.+830    	; 0x4e4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9d c1       	rjmp	.+826    	; 0x4e4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9b c1       	rjmp	.+822    	; 0x4e4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c1       	rjmp	.+818    	; 0x4e4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	97 c1       	rjmp	.+814    	; 0x4e4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	95 c1       	rjmp	.+810    	; 0x4e4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	93 c1       	rjmp	.+806    	; 0x4e4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	91 c1       	rjmp	.+802    	; 0x4e4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8f c1       	rjmp	.+798    	; 0x4e4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8d c1       	rjmp	.+794    	; 0x4e4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8b c1       	rjmp	.+790    	; 0x4e4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	89 c1       	rjmp	.+786    	; 0x4e4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	87 c1       	rjmp	.+782    	; 0x4e4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	85 c1       	rjmp	.+778    	; 0x4e4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	83 c1       	rjmp	.+774    	; 0x4e4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	81 c1       	rjmp	.+770    	; 0x4e4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7f c1       	rjmp	.+766    	; 0x4e4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7d c1       	rjmp	.+762    	; 0x4e4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7b c1       	rjmp	.+758    	; 0x4e4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	79 c1       	rjmp	.+754    	; 0x4e4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	77 c1       	rjmp	.+750    	; 0x4e4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	75 c1       	rjmp	.+746    	; 0x4e4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	eb 13       	cpse	r30, r27
     1fe:	eb 13       	cpse	r30, r27
     200:	eb 13       	cpse	r30, r27
     202:	18 14       	cp	r1, r8
     204:	20 14       	cp	r2, r0
     206:	2e 14       	cp	r2, r14
     208:	eb 13       	cpse	r30, r27
     20a:	eb 13       	cpse	r30, r27
     20c:	18 14       	cp	r1, r8
     20e:	20 14       	cp	r2, r0

00000210 <__trampolines_end>:
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 00       	nop
     216:	00 20       	and	r0, r0
     218:	20 20       	and	r2, r0
     21a:	20 20       	and	r2, r0
     21c:	00 20       	and	r0, r0
     21e:	50 50       	subi	r21, 0x00	; 0
     220:	50 00       	.word	0x0050	; ????
     222:	00 00       	nop
     224:	00 50       	subi	r16, 0x00	; 0
     226:	50 f8       	bld	r5, 0
     228:	50 f8       	bld	r5, 0
     22a:	50 50       	subi	r21, 0x00	; 0
     22c:	20 78       	andi	r18, 0x80	; 128
     22e:	a0 70       	andi	r26, 0x00	; 0
     230:	28 f0       	brcs	.+10     	; 0x23c <__trampolines_end+0x2c>
     232:	20 c0       	rjmp	.+64     	; 0x274 <__trampolines_end+0x64>
     234:	c8 10       	cpse	r12, r8
     236:	20 40       	sbci	r18, 0x00	; 0
     238:	98 18       	sub	r9, r8
     23a:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dc1>
     23e:	a8 90       	.word	0x90a8	; ????
     240:	68 60       	ori	r22, 0x08	; 8
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	00 00       	nop
     246:	00 00       	nop
     248:	10 20       	and	r1, r0
     24a:	40 40       	sbci	r20, 0x00	; 0
     24c:	40 20       	and	r4, r0
     24e:	10 40       	sbci	r17, 0x00	; 0
     250:	20 10       	cpse	r2, r0
     252:	10 10       	cpse	r1, r0
     254:	20 40       	sbci	r18, 0x00	; 0
     256:	00 50       	subi	r16, 0x00	; 0
     258:	20 f8       	bld	r2, 0
     25a:	20 50       	subi	r18, 0x00	; 0
     25c:	00 00       	nop
     25e:	20 20       	and	r2, r0
     260:	f8 20       	and	r15, r8
     262:	20 00       	.word	0x0020	; ????
     264:	00 00       	nop
     266:	00 00       	nop
     268:	60 20       	and	r6, r0
     26a:	40 00       	.word	0x0040	; ????
     26c:	00 00       	nop
     26e:	f8 00       	.word	0x00f8	; ????
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 60       	ori	r16, 0x00	; 0
     278:	60 00       	.word	0x0060	; ????
     27a:	08 10       	cpse	r0, r8
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 00       	.word	0x0080	; ????
     280:	70 88       	ldd	r7, Z+16	; 0x10
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	c8 88       	ldd	r12, Y+16	; 0x10
     286:	70 20       	and	r7, r0
     288:	60 20       	and	r6, r0
     28a:	20 20       	and	r2, r0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	70 88       	ldd	r7, Z+16	; 0x10
     290:	08 10       	cpse	r0, r8
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	f8 f8       	.word	0xf8f8	; ????
     296:	10 20       	and	r1, r0
     298:	10 08       	sbc	r1, r0
     29a:	88 70       	andi	r24, 0x08	; 8
     29c:	10 30       	cpi	r17, 0x00	; 0
     29e:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     2a2:	10 f8       	bld	r1, 0
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <__trampolines_end+0xb6>
     2a6:	08 08       	sbc	r0, r8
     2a8:	88 70       	andi	r24, 0x08	; 8
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	80 f0       	brcs	.+32     	; 0x2ce <__trampolines_end+0xbe>
     2ae:	88 88       	ldd	r8, Y+16	; 0x10
     2b0:	70 f8       	bld	r7, 0
     2b2:	08 10       	cpse	r0, r8
     2b4:	20 40       	sbci	r18, 0x00	; 0
     2b6:	40 40       	sbci	r20, 0x00	; 0
     2b8:	70 88       	ldd	r7, Z+16	; 0x10
     2ba:	88 70       	andi	r24, 0x08	; 8
     2bc:	88 88       	ldd	r8, Y+16	; 0x10
     2be:	70 70       	andi	r23, 0x00	; 0
     2c0:	88 88       	ldd	r8, Y+16	; 0x10
     2c2:	78 08       	sbc	r7, r8
     2c4:	10 60       	ori	r17, 0x00	; 0
     2c6:	00 60       	ori	r16, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	00 00       	nop
     2ce:	60 60       	ori	r22, 0x00	; 0
     2d0:	00 60       	ori	r16, 0x00	; 0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	08 10       	cpse	r0, r8
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	20 10       	cpse	r2, r0
     2da:	08 00       	.word	0x0008	; ????
     2dc:	00 f8       	bld	r0, 0
     2de:	00 f8       	bld	r0, 0
     2e0:	00 00       	nop
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	20 10       	cpse	r2, r0
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 70       	andi	r24, 0x00	; 0
     2ea:	88 08       	sbc	r8, r8
     2ec:	10 20       	and	r1, r0
     2ee:	00 20       	and	r0, r0
     2f0:	70 88       	ldd	r7, Z+16	; 0x10
     2f2:	08 68       	ori	r16, 0x88	; 136
     2f4:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f6:	70 70       	andi	r23, 0x00	; 0
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	88 f8       	.word	0xf888	; ????
     2fc:	88 88       	ldd	r8, Y+16	; 0x10
     2fe:	f0 88       	ldd	r15, Z+16	; 0x10
     300:	88 f0       	brcs	.+34     	; 0x324 <__trampolines_end+0x114>
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	f0 70       	andi	r31, 0x00	; 0
     306:	88 80       	ld	r8, Y
     308:	80 80       	ld	r8, Z
     30a:	88 70       	andi	r24, 0x08	; 8
     30c:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65a9>
     310:	88 90       	.word	0x9088	; ????
     312:	e0 f8       	bld	r14, 0
     314:	80 80       	ld	r8, Z
     316:	f0 80       	ld	r15, Z
     318:	80 f8       	bld	r8, 0
     31a:	f8 80       	ld	r15, Y
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	80 80       	ld	r8, Z
     320:	80 70       	andi	r24, 0x00	; 0
     322:	88 80       	ld	r8, Y
     324:	80 98       	cbi	0x10, 0	; 16
     326:	88 70       	andi	r24, 0x08	; 8
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 f8       	.word	0xf888	; ????
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	88 70       	andi	r24, 0x08	; 8
     330:	20 20       	and	r2, r0
     332:	20 20       	and	r2, r0
     334:	20 70       	andi	r18, 0x00	; 0
     336:	38 10       	cpse	r3, r8
     338:	10 10       	cpse	r1, r0
     33a:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6581>
     33e:	90 a0       	ldd	r9, Z+32	; 0x20
     340:	c0 a0       	ldd	r12, Z+32	; 0x20
     342:	90 88       	ldd	r9, Z+16	; 0x10
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	80 80       	ld	r8, Z
     34a:	f8 88       	ldd	r15, Y+16	; 0x10
     34c:	d8 a8       	ldd	r13, Y+48	; 0x30
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	88 88       	ldd	r8, Y+16	; 0x10
     354:	c8 a8       	ldd	r12, Y+48	; 0x30
     356:	98 88       	ldd	r9, Y+16	; 0x10
     358:	88 70       	andi	r24, 0x08	; 8
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 88       	ldd	r8, Y+16	; 0x10
     35e:	88 70       	andi	r24, 0x08	; 8
     360:	f0 88       	ldd	r15, Z+16	; 0x10
     362:	88 f0       	brcs	.+34     	; 0x386 <__trampolines_end+0x176>
     364:	80 80       	ld	r8, Z
     366:	80 70       	andi	r24, 0x00	; 0
     368:	88 88       	ldd	r8, Y+16	; 0x10
     36a:	88 a8       	ldd	r8, Y+48	; 0x30
     36c:	90 68       	ori	r25, 0x80	; 128
     36e:	f0 88       	ldd	r15, Z+16	; 0x10
     370:	88 f0       	brcs	.+34     	; 0x394 <__trampolines_end+0x184>
     372:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55a9>
     376:	80 80       	ld	r8, Z
     378:	70 08       	sbc	r7, r0
     37a:	08 f0       	brcs	.+2      	; 0x37e <__trampolines_end+0x16e>
     37c:	f8 20       	and	r15, r8
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 88       	ldd	r2, Z+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 88       	ldd	r8, Y+16	; 0x10
     388:	88 70       	andi	r24, 0x08	; 8
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 88       	ldd	r8, Y+16	; 0x10
     38e:	88 50       	subi	r24, 0x08	; 8
     390:	20 88       	ldd	r2, Z+16	; 0x10
     392:	88 88       	ldd	r8, Y+16	; 0x10
     394:	a8 a8       	ldd	r10, Y+48	; 0x30
     396:	d8 88       	ldd	r13, Y+16	; 0x10
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	50 20       	and	r5, r0
     39c:	50 88       	ldd	r5, Z+16	; 0x10
     39e:	88 88       	ldd	r8, Y+16	; 0x10
     3a0:	88 50       	subi	r24, 0x08	; 8
     3a2:	20 20       	and	r2, r0
     3a4:	20 20       	and	r2, r0
     3a6:	f8 08       	sbc	r15, r8
     3a8:	10 20       	and	r1, r0
     3aa:	40 80       	ld	r4, Z
     3ac:	f8 38       	cpi	r31, 0x88	; 136
     3ae:	20 20       	and	r2, r0
     3b0:	20 20       	and	r2, r0
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	00 80       	ld	r0, Z
     3b6:	40 20       	and	r4, r0
     3b8:	10 08       	sbc	r1, r0
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	20 20       	and	r2, r0
     3be:	20 20       	and	r2, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	20 50       	subi	r18, 0x00	; 0
     3c4:	88 00       	.word	0x0088	; ????
	...
     3ce:	00 f8       	bld	r0, 0
     3d0:	40 20       	and	r4, r0
     3d2:	10 00       	.word	0x0010	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	00 70       	andi	r16, 0x00	; 0
     3da:	08 78       	andi	r16, 0x88	; 136
     3dc:	88 78       	andi	r24, 0x88	; 136
     3de:	80 80       	ld	r8, Z
     3e0:	b0 c8       	rjmp	.-3744   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	f0 00       	.word	0x00f0	; ????
     3e6:	00 70       	andi	r16, 0x00	; 0
     3e8:	80 80       	ld	r8, Z
     3ea:	88 70       	andi	r24, 0x08	; 8
     3ec:	08 08       	sbc	r0, r8
     3ee:	68 98       	cbi	0x0d, 0	; 13
     3f0:	88 88       	ldd	r8, Y+16	; 0x10
     3f2:	78 00       	.word	0x0078	; ????
     3f4:	00 70       	andi	r16, 0x00	; 0
     3f6:	88 f8       	.word	0xf888	; ????
     3f8:	80 70       	andi	r24, 0x00	; 0
     3fa:	30 48       	sbci	r19, 0x80	; 128
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	40 00       	.word	0x0040	; ????
     402:	00 78       	andi	r16, 0x80	; 128
     404:	88 78       	andi	r24, 0x88	; 136
     406:	08 30       	cpi	r16, 0x08	; 8
     408:	80 80       	ld	r8, Z
     40a:	b0 c8       	rjmp	.-3744   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     40c:	88 88       	ldd	r8, Y+16	; 0x10
     40e:	88 20       	and	r8, r8
     410:	00 60       	ori	r16, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 70       	andi	r18, 0x00	; 0
     416:	10 00       	.word	0x0010	; ????
     418:	30 10       	cpse	r3, r0
     41a:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d81>
     41e:	40 48       	sbci	r20, 0x80	; 128
     420:	50 60       	ori	r21, 0x00	; 0
     422:	50 48       	sbci	r21, 0x80	; 128
     424:	60 20       	and	r6, r0
     426:	20 20       	and	r2, r0
     428:	20 20       	and	r2, r0
     42a:	70 00       	.word	0x0070	; ????
     42c:	00 d0       	rcall	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	a8 a8       	ldd	r10, Y+48	; 0x30
     430:	88 88       	ldd	r8, Y+16	; 0x10
     432:	00 00       	nop
     434:	b0 c8       	rjmp	.-3744   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     436:	88 88       	ldd	r8, Y+16	; 0x10
     438:	88 00       	.word	0x0088	; ????
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	88 88       	ldd	r8, Y+16	; 0x10
     43e:	88 70       	andi	r24, 0x08	; 8
     440:	00 00       	nop
     442:	f0 88       	ldd	r15, Z+16	; 0x10
     444:	f0 80       	ld	r15, Z
     446:	80 00       	.word	0x0080	; ????
     448:	00 68       	ori	r16, 0x80	; 128
     44a:	98 78       	andi	r25, 0x88	; 136
     44c:	08 08       	sbc	r0, r8
     44e:	00 00       	nop
     450:	b0 c8       	rjmp	.-3744   	; 0xfffff5b2 <__eeprom_end+0xff7ef5b2>
     452:	80 80       	ld	r8, Z
     454:	80 00       	.word	0x0080	; ????
     456:	00 70       	andi	r16, 0x00	; 0
     458:	80 70       	andi	r24, 0x00	; 0
     45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e0 40       	sbci	r30, 0x00	; 0
     460:	40 48       	sbci	r20, 0x80	; 128
     462:	30 00       	.word	0x0030	; ????
     464:	00 88       	ldd	r0, Z+16	; 0x10
     466:	88 88       	ldd	r8, Y+16	; 0x10
     468:	98 68       	ori	r25, 0x88	; 136
     46a:	00 00       	nop
     46c:	88 88       	ldd	r8, Y+16	; 0x10
     46e:	88 50       	subi	r24, 0x08	; 8
     470:	20 00       	.word	0x0020	; ????
     472:	00 88       	ldd	r0, Z+16	; 0x10
     474:	88 a8       	ldd	r8, Y+48	; 0x30
     476:	a8 50       	subi	r26, 0x08	; 8
     478:	00 00       	nop
     47a:	88 50       	subi	r24, 0x08	; 8
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	88 00       	.word	0x0088	; ????
     480:	00 88       	ldd	r0, Z+16	; 0x10
     482:	88 78       	andi	r24, 0x88	; 136
     484:	08 70       	andi	r16, 0x08	; 8
     486:	00 00       	nop
     488:	f8 10       	cpse	r15, r8
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	f8 10       	cpse	r15, r8
     48e:	20 20       	and	r2, r0
     490:	40 20       	and	r4, r0
     492:	20 10       	cpse	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 20       	and	r2, r0
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	10 20       	and	r1, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df e5       	ldi	r29, 0x5F	; 95
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	10 e2       	ldi	r17, 0x20	; 32
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
     4b8:	e6 e4       	ldi	r30, 0x46	; 70
     4ba:	f6 e3       	ldi	r31, 0x36	; 54
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a8 35       	cpi	r26, 0x58	; 88
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	22 e2       	ldi	r18, 0x22	; 34
     4ce:	a8 e5       	ldi	r26, 0x58	; 88
     4d0:	b0 e2       	ldi	r27, 0x20	; 32
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	af 3d       	cpi	r26, 0xDF	; 223
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <main>
     4e0:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e8:	61 50       	subi	r22, 0x01	; 1
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 09       	sbc	r24, r1
     4ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	81 05       	cpc	r24, r1
     4f6:	91 05       	cpc	r25, r1
     4f8:	b9 f7       	brne	.-18     	; 0x4e8 <__portable_avr_delay_cycles+0x2>
     4fa:	08 95       	ret

000004fc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	16 e0       	ldi	r17, 0x06	; 6
     518:	68 94       	set
     51a:	ff 24       	eor	r15, r15
     51c:	f3 f8       	bld	r15, 3
     51e:	f8 01       	movw	r30, r16
     520:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	dd df       	rcall	.-70     	; 0x4e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52c:	f8 01       	movw	r30, r16
     52e:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	d6 df       	rcall	.-84     	; 0x4e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     53a:	0f 2e       	mov	r0, r31
     53c:	fb e2       	ldi	r31, 0x2B	; 43
     53e:	bf 2e       	mov	r11, r31
     540:	f0 2d       	mov	r31, r0
     542:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	d4 d4       	rcall	.+2472   	; 0xef2 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
     550:	00 e4       	ldi	r16, 0x40	; 64
     552:	12 e4       	ldi	r17, 0x42	; 66
     554:	2f e0       	ldi	r18, 0x0F	; 15
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	43 e0       	ldi	r20, 0x03	; 3
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	80 ea       	ldi	r24, 0xA0	; 160
     562:	99 e0       	ldi	r25, 0x09	; 9
     564:	f5 d4       	rcall	.+2538   	; 0xf50 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     566:	00 e6       	ldi	r16, 0x60	; 96
     568:	16 e0       	ldi	r17, 0x06	; 6
     56a:	ff 24       	eor	r15, r15
     56c:	f3 94       	inc	r15
     56e:	f8 01       	movw	r30, r16
     570:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     572:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	99 e0       	ldi	r25, 0x09	; 9
     57e:	02 d5       	rcall	.+2564   	; 0xf84 <usart_spi_select_device>
     580:	f8 01       	movw	r30, r16
     582:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     584:	e0 ea       	ldi	r30, 0xA0	; 160
     586:	f9 e0       	ldi	r31, 0x09	; 9
     588:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     58a:	85 ff       	sbrs	r24, 5
     58c:	fd cf       	rjmp	.-6      	; 0x588 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     594:	e0 ea       	ldi	r30, 0xA0	; 160
     596:	f9 e0       	ldi	r31, 0x09	; 9
     598:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     59a:	86 ff       	sbrs	r24, 6
     59c:	fd cf       	rjmp	.-6      	; 0x598 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     59e:	e0 ea       	ldi	r30, 0xA0	; 160
     5a0:	f9 e0       	ldi	r31, 0x09	; 9
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5a6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	80 ea       	ldi	r24, 0xA0	; 160
     5b0:	99 e0       	ldi	r25, 0x09	; 9
     5b2:	fe d4       	rcall	.+2556   	; 0xfb0 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5b4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	80 ea       	ldi	r24, 0xA0	; 160
     5c0:	99 e0       	ldi	r25, 0x09	; 9
     5c2:	e0 d4       	rcall	.+2496   	; 0xf84 <usart_spi_select_device>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5ca:	e0 ea       	ldi	r30, 0xA0	; 160
     5cc:	f9 e0       	ldi	r31, 0x09	; 9
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5d0:	85 ff       	sbrs	r24, 5
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5d4:	86 ea       	ldi	r24, 0xA6	; 166
     5d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5e0:	86 ff       	sbrs	r24, 6
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ea:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ec:	80 81       	ld	r24, Z
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f8:	db d4       	rcall	.+2486   	; 0xfb0 <usart_spi_deselect_device>
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 ea       	ldi	r24, 0xA0	; 160
     606:	99 e0       	ldi	r25, 0x09	; 9
     608:	bd d4       	rcall	.+2426   	; 0xf84 <usart_spi_select_device>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     610:	e0 ea       	ldi	r30, 0xA0	; 160
     612:	f9 e0       	ldi	r31, 0x09	; 9
     614:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     616:	85 ff       	sbrs	r24, 5
     618:	fd cf       	rjmp	.-6      	; 0x614 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     61a:	88 ec       	ldi	r24, 0xC8	; 200
     61c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     620:	e0 ea       	ldi	r30, 0xA0	; 160
     622:	f9 e0       	ldi	r31, 0x09	; 9
     624:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     626:	86 ff       	sbrs	r24, 6
     628:	fd cf       	rjmp	.-6      	; 0x624 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     62a:	e0 ea       	ldi	r30, 0xA0	; 160
     62c:	f9 e0       	ldi	r31, 0x09	; 9
     62e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     630:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     632:	80 81       	ld	r24, Z
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	80 ea       	ldi	r24, 0xA0	; 160
     63c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63e:	b8 d4       	rcall	.+2416   	; 0xfb0 <usart_spi_deselect_device>
     640:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	be 01       	movw	r22, r28
     646:	6f 5f       	subi	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	80 ea       	ldi	r24, 0xA0	; 160
     64c:	99 e0       	ldi	r25, 0x09	; 9
     64e:	9a d4       	rcall	.+2356   	; 0xf84 <usart_spi_select_device>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     656:	e0 ea       	ldi	r30, 0xA0	; 160
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65c:	85 ff       	sbrs	r24, 5
     65e:	fd cf       	rjmp	.-6      	; 0x65a <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     660:	82 ea       	ldi	r24, 0xA2	; 162
     662:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     666:	e0 ea       	ldi	r30, 0xA0	; 160
     668:	f9 e0       	ldi	r31, 0x09	; 9
     66a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	fd cf       	rjmp	.-6      	; 0x66a <st7565r_init+0x16e>
     670:	e0 ea       	ldi	r30, 0xA0	; 160
     672:	f9 e0       	ldi	r31, 0x09	; 9
     674:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	80 81       	ld	r24, Z
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	80 ea       	ldi	r24, 0xA0	; 160
     682:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     684:	95 d4       	rcall	.+2346   	; 0xfb0 <usart_spi_deselect_device>
     686:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	77 d4       	rcall	.+2286   	; 0xf84 <usart_spi_select_device>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a2:	85 ff       	sbrs	r24, 5
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a6:	8f e2       	ldi	r24, 0x2F	; 47
     6a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ac:	e0 ea       	ldi	r30, 0xA0	; 160
     6ae:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <st7565r_init+0x1b4>
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f9 e0       	ldi	r31, 0x09	; 9
     6ba:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6bc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6be:	80 81       	ld	r24, Z
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	80 ea       	ldi	r24, 0xA0	; 160
     6c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ca:	72 d4       	rcall	.+2276   	; 0xfb0 <usart_spi_deselect_device>
     6cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	99 e0       	ldi	r25, 0x09	; 9
     6da:	54 d4       	rcall	.+2216   	; 0xf84 <usart_spi_select_device>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e2:	e0 ea       	ldi	r30, 0xA0	; 160
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e8:	85 ff       	sbrs	r24, 5
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ec:	88 ef       	ldi	r24, 0xF8	; 248
     6ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f2:	e0 ea       	ldi	r30, 0xA0	; 160
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <st7565r_init+0x1fa>
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     700:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     702:	81 83       	std	Z+1, r24	; 0x01
     704:	80 81       	ld	r24, Z
     706:	be 01       	movw	r22, r28
     708:	6f 5f       	subi	r22, 0xFF	; 255
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	80 ea       	ldi	r24, 0xA0	; 160
     70e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     710:	4f d4       	rcall	.+2206   	; 0xfb0 <usart_spi_deselect_device>
     712:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	80 ea       	ldi	r24, 0xA0	; 160
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	31 d4       	rcall	.+2146   	; 0xf84 <usart_spi_select_device>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     728:	e0 ea       	ldi	r30, 0xA0	; 160
     72a:	f9 e0       	ldi	r31, 0x09	; 9
     72c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     72e:	85 ff       	sbrs	r24, 5
     730:	fd cf       	rjmp	.-6      	; 0x72c <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     732:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     736:	e0 ea       	ldi	r30, 0xA0	; 160
     738:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     73a:	81 81       	ldd	r24, Z+1	; 0x01
     73c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     73e:	fd cf       	rjmp	.-6      	; 0x73a <st7565r_init+0x23e>
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     744:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     746:	81 83       	std	Z+1, r24	; 0x01
     748:	80 81       	ld	r24, Z
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     754:	2d d4       	rcall	.+2138   	; 0xfb0 <usart_spi_deselect_device>
     756:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	80 ea       	ldi	r24, 0xA0	; 160
     762:	99 e0       	ldi	r25, 0x09	; 9
     764:	0f d4       	rcall	.+2078   	; 0xf84 <usart_spi_select_device>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     76c:	e0 ea       	ldi	r30, 0xA0	; 160
     76e:	f9 e0       	ldi	r31, 0x09	; 9
     770:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     772:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     774:	fd cf       	rjmp	.-6      	; 0x770 <st7565r_init+0x274>
     776:	81 e2       	ldi	r24, 0x21	; 33
     778:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     780:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     782:	86 ff       	sbrs	r24, 6
     784:	fd cf       	rjmp	.-6      	; 0x780 <st7565r_init+0x284>
     786:	e0 ea       	ldi	r30, 0xA0	; 160
     788:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     78a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	80 81       	ld	r24, Z
     790:	be 01       	movw	r22, r28
     792:	6f 5f       	subi	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     79a:	0a d4       	rcall	.+2068   	; 0xfb0 <usart_spi_deselect_device>
     79c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	80 ea       	ldi	r24, 0xA0	; 160
     7a8:	99 e0       	ldi	r25, 0x09	; 9
     7aa:	ec d3       	rcall	.+2008   	; 0xf84 <usart_spi_select_device>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7b2:	e0 ea       	ldi	r30, 0xA0	; 160
     7b4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <st7565r_init+0x2ba>
     7bc:	81 e8       	ldi	r24, 0x81	; 129
     7be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c8:	86 ff       	sbrs	r24, 6
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <st7565r_init+0x2ca>
     7cc:	e0 ea       	ldi	r30, 0xA0	; 160
     7ce:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7d0:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7d2:	81 83       	std	Z+1, r24	; 0x01
     7d4:	80 81       	ld	r24, Z
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7e0:	e7 d3       	rcall	.+1998   	; 0xfb0 <usart_spi_deselect_device>
     7e2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	be 01       	movw	r22, r28
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	99 e0       	ldi	r25, 0x09	; 9
     7f0:	c9 d3       	rcall	.+1938   	; 0xf84 <usart_spi_select_device>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f8:	e0 ea       	ldi	r30, 0xA0	; 160
     7fa:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7fc:	81 81       	ldd	r24, Z+1	; 0x01
     7fe:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     800:	fd cf       	rjmp	.-6      	; 0x7fc <st7565r_init+0x300>
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     808:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     80e:	86 ff       	sbrs	r24, 6
     810:	fd cf       	rjmp	.-6      	; 0x80c <st7565r_init+0x310>
     812:	e0 ea       	ldi	r30, 0xA0	; 160
     814:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     816:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     818:	81 83       	std	Z+1, r24	; 0x01
     81a:	80 81       	ld	r24, Z
     81c:	be 01       	movw	r22, r28
     81e:	6f 5f       	subi	r22, 0xFF	; 255
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	80 ea       	ldi	r24, 0xA0	; 160
     824:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     826:	c4 d3       	rcall	.+1928   	; 0xfb0 <usart_spi_deselect_device>
     828:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	99 e0       	ldi	r25, 0x09	; 9
     836:	a6 d3       	rcall	.+1868   	; 0xf84 <usart_spi_select_device>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     83e:	e0 ea       	ldi	r30, 0xA0	; 160
     840:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     842:	81 81       	ldd	r24, Z+1	; 0x01
     844:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     846:	fd cf       	rjmp	.-6      	; 0x842 <st7565r_init+0x346>
     848:	8f ea       	ldi	r24, 0xAF	; 175
     84a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     852:	81 81       	ldd	r24, Z+1	; 0x01
     854:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     856:	fd cf       	rjmp	.-6      	; 0x852 <st7565r_init+0x356>
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     85e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     860:	80 81       	ld	r24, Z
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	80 ea       	ldi	r24, 0xA0	; 160
     86a:	99 e0       	ldi	r25, 0x09	; 9
     86c:	a1 d3       	rcall	.+1858   	; 0xfb0 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	08 95       	ret

00000884 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	1f 92       	push	r1
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	08 2f       	mov	r16, r24
     896:	f6 2e       	mov	r15, r22
     898:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     89a:	a5 d3       	rcall	.+1866   	; 0xfe6 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     89c:	0f 70       	andi	r16, 0x0F	; 15
     89e:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8a0:	8b e2       	ldi	r24, 0x2B	; 43
     8a2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8a4:	be 01       	movw	r22, r28
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	80 ea       	ldi	r24, 0xA0	; 160
     8ac:	99 e0       	ldi	r25, 0x09	; 9
     8ae:	6a d3       	rcall	.+1748   	; 0xf84 <usart_spi_select_device>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8b6:	e0 ea       	ldi	r30, 0xA0	; 160
     8b8:	f9 e0       	ldi	r31, 0x09	; 9
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8bc:	95 ff       	sbrs	r25, 5
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8c0:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8c4:	e0 ea       	ldi	r30, 0xA0	; 160
     8c6:	f9 e0       	ldi	r31, 0x09	; 9
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8ca:	86 ff       	sbrs	r24, 6
     8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ce:	e0 ea       	ldi	r30, 0xA0	; 160
     8d0:	f9 e0       	ldi	r31, 0x09	; 9
     8d2:	80 e4       	ldi	r24, 0x40	; 64
     8d4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8d6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8d8:	be 01       	movw	r22, r28
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	80 ea       	ldi	r24, 0xA0	; 160
     8e0:	99 e0       	ldi	r25, 0x09	; 9
     8e2:	66 d3       	rcall	.+1740   	; 0xfb0 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8e4:	0f 2d       	mov	r16, r15
     8e6:	0f 77       	andi	r16, 0x7F	; 127
     8e8:	02 95       	swap	r16
     8ea:	0f 70       	andi	r16, 0x0F	; 15
     8ec:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ee:	8b e2       	ldi	r24, 0x2B	; 43
     8f0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	80 ea       	ldi	r24, 0xA0	; 160
     8fa:	99 e0       	ldi	r25, 0x09	; 9
     8fc:	43 d3       	rcall	.+1670   	; 0xf84 <usart_spi_select_device>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     904:	e0 ea       	ldi	r30, 0xA0	; 160
     906:	f9 e0       	ldi	r31, 0x09	; 9
     908:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     90a:	85 ff       	sbrs	r24, 5
     90c:	fd cf       	rjmp	.-6      	; 0x908 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     90e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     912:	e0 ea       	ldi	r30, 0xA0	; 160
     914:	f9 e0       	ldi	r31, 0x09	; 9
     916:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     918:	86 ff       	sbrs	r24, 6
     91a:	fd cf       	rjmp	.-6      	; 0x916 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     91c:	e0 ea       	ldi	r30, 0xA0	; 160
     91e:	f9 e0       	ldi	r31, 0x09	; 9
     920:	80 e4       	ldi	r24, 0x40	; 64
     922:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     924:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	80 ea       	ldi	r24, 0xA0	; 160
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	3f d3       	rcall	.+1662   	; 0xfb0 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     932:	0f 2d       	mov	r16, r15
     934:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     936:	8b e2       	ldi	r24, 0x2B	; 43
     938:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     93a:	be 01       	movw	r22, r28
     93c:	6f 5f       	subi	r22, 0xFF	; 255
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	80 ea       	ldi	r24, 0xA0	; 160
     942:	99 e0       	ldi	r25, 0x09	; 9
     944:	1f d3       	rcall	.+1598   	; 0xf84 <usart_spi_select_device>
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     94c:	e0 ea       	ldi	r30, 0xA0	; 160
     94e:	f9 e0       	ldi	r31, 0x09	; 9
     950:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     952:	85 ff       	sbrs	r24, 5
     954:	fd cf       	rjmp	.-6      	; 0x950 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     956:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     95a:	e0 ea       	ldi	r30, 0xA0	; 160
     95c:	f9 e0       	ldi	r31, 0x09	; 9
     95e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     960:	86 ff       	sbrs	r24, 6
     962:	fd cf       	rjmp	.-6      	; 0x95e <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     964:	e0 ea       	ldi	r30, 0xA0	; 160
     966:	f9 e0       	ldi	r31, 0x09	; 9
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     96c:	80 81       	ld	r24, Z
     96e:	be 01       	movw	r22, r28
     970:	6f 5f       	subi	r22, 0xFF	; 255
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	80 ea       	ldi	r24, 0xA0	; 160
     976:	99 e0       	ldi	r25, 0x09	; 9
     978:	1b d3       	rcall	.+1590   	; 0xfb0 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     97a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	be 01       	movw	r22, r28
     980:	6f 5f       	subi	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	80 ea       	ldi	r24, 0xA0	; 160
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	fd d2       	rcall	.+1530   	; 0xf84 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     990:	e0 ea       	ldi	r30, 0xA0	; 160
     992:	f9 e0       	ldi	r31, 0x09	; 9
     994:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     996:	85 ff       	sbrs	r24, 5
     998:	fd cf       	rjmp	.-6      	; 0x994 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     99a:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     99e:	e0 ea       	ldi	r30, 0xA0	; 160
     9a0:	f9 e0       	ldi	r31, 0x09	; 9
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9a4:	86 ff       	sbrs	r24, 6
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
     9aa:	f9 e0       	ldi	r31, 0x09	; 9
     9ac:	80 e4       	ldi	r24, 0x40	; 64
     9ae:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9b0:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9b8:	be 01       	movw	r22, r28
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	80 ea       	ldi	r24, 0xA0	; 160
     9c0:	99 e0       	ldi	r25, 0x09	; 9
     9c2:	f6 d2       	rcall	.+1516   	; 0xfb0 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	08 95       	ret

000009d2 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	1f 92       	push	r1
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9e0:	88 e5       	ldi	r24, 0x58	; 88
     9e2:	90 e2       	ldi	r25, 0x20	; 32
     9e4:	fb d2       	rcall	.+1526   	; 0xfdc <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9e6:	8a dd       	rcall	.-1260   	; 0x4fc <st7565r_init>
     9e8:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9ea:	89 83       	std	Y+1, r24	; 0x01
     9ec:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	80 ea       	ldi	r24, 0xA0	; 160
     9f4:	99 e0       	ldi	r25, 0x09	; 9
     9f6:	c6 d2       	rcall	.+1420   	; 0xf84 <usart_spi_select_device>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     9fe:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a00:	f9 e0       	ldi	r31, 0x09	; 9
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <gfx_mono_st7565r_init+0x30>
     a08:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a0a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     a0e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a10:	f9 e0       	ldi	r31, 0x09	; 9
     a12:	81 81       	ldd	r24, Z+1	; 0x01
     a14:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <gfx_mono_st7565r_init+0x40>
     a18:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a1a:	f9 e0       	ldi	r31, 0x09	; 9
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	81 83       	std	Z+1, r24	; 0x01
     a20:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a22:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a24:	6f 5f       	subi	r22, 0xFF	; 255
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	80 ea       	ldi	r24, 0xA0	; 160
     a2a:	99 e0       	ldi	r25, 0x09	; 9
     a2c:	c1 d2       	rcall	.+1410   	; 0xfb0 <usart_spi_deselect_device>
     a2e:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a30:	0a c0       	rjmp	.+20     	; 0xa46 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	61 2f       	mov	r22, r17
     a36:	80 2f       	mov	r24, r16
     a38:	25 df       	rcall	.-438    	; 0x884 <gfx_mono_st7565r_put_byte>
     a3a:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a3c:	10 38       	cpi	r17, 0x80	; 128
     a3e:	c9 f7       	brne	.-14     	; 0xa32 <gfx_mono_st7565r_init+0x60>
     a40:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a42:	04 30       	cpi	r16, 0x04	; 4
     a44:	11 f0       	breq	.+4      	; 0xa4a <gfx_mono_st7565r_init+0x78>
     a46:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a48:	f4 cf       	rjmp	.-24     	; 0xa32 <gfx_mono_st7565r_init+0x60>
     a4a:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <gfx_mono_st7565r_draw_pixel>:
     a56:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a60:	88 23       	and	r24, r24
     a62:	4c f1       	brlt	.+82     	; 0xab6 <gfx_mono_st7565r_draw_pixel+0x60>
     a64:	60 32       	cpi	r22, 0x20	; 32
     a66:	38 f5       	brcc	.+78     	; 0xab6 <gfx_mono_st7565r_draw_pixel+0x60>
     a68:	d4 2f       	mov	r29, r20
     a6a:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a6c:	f6 2e       	mov	r15, r22
     a6e:	f6 94       	lsr	r15
     a70:	f6 94       	lsr	r15
     a72:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	f8 9e       	mul	r15, r24
     a7a:	60 19       	sub	r22, r0
     a7c:	71 09       	sbc	r23, r1
     a7e:	11 24       	eor	r1, r1
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	8c 01       	movw	r16, r24
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <gfx_mono_st7565r_draw_pixel+0x36>
     a88:	00 0f       	add	r16, r16
     a8a:	11 1f       	adc	r17, r17
     a8c:	6a 95       	dec	r22
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a90:	6c 2f       	mov	r22, r28
     a92:	8f 2d       	mov	r24, r15
     a94:	b6 d2       	rcall	.+1388   	; 0x1002 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a96:	d1 30       	cpi	r29, 0x01	; 1
     a98:	21 f0       	breq	.+8      	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x4c>
     a9a:	28 f0       	brcs	.+10     	; 0xaa6 <gfx_mono_st7565r_draw_pixel+0x50>
     a9c:	d2 30       	cpi	r29, 0x02	; 2
     a9e:	31 f0       	breq	.+12     	; 0xaac <gfx_mono_st7565r_draw_pixel+0x56>
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aa2:	80 2b       	or	r24, r16
		break;
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     aa6:	00 95       	com	r16
     aa8:	80 23       	and	r24, r16
		break;
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     aac:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     aae:	48 2f       	mov	r20, r24
     ab0:	6c 2f       	mov	r22, r28
     ab2:	8f 2d       	mov	r24, r15
     ab4:	e7 de       	rcall	.-562    	; 0x884 <gfx_mono_st7565r_put_byte>
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	08 95       	ret

00000ac2 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac2:	9f c2       	rjmp	.+1342   	; 0x1002 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ac4:	08 95       	ret

00000ac6 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     ad8:	d9 01       	movw	r26, r18
     ada:	c8 01       	movw	r24, r16
     adc:	b6 95       	lsr	r27
     ade:	a7 95       	ror	r26
     ae0:	97 95       	ror	r25
     ae2:	87 95       	ror	r24
     ae4:	48 17       	cp	r20, r24
     ae6:	59 07       	cpc	r21, r25
     ae8:	6a 07       	cpc	r22, r26
     aea:	7b 07       	cpc	r23, r27
     aec:	78 f4       	brcc	.+30     	; 0xb0c <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     aee:	6a 01       	movw	r12, r20
     af0:	7b 01       	movw	r14, r22
     af2:	cc 0c       	add	r12, r12
     af4:	dd 1c       	adc	r13, r13
     af6:	ee 1c       	adc	r14, r14
     af8:	ff 1c       	adc	r15, r15
     afa:	c9 01       	movw	r24, r18
     afc:	b8 01       	movw	r22, r16
     afe:	a7 01       	movw	r20, r14
     b00:	96 01       	movw	r18, r12
     b02:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__udivmodsi4>
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	31 09       	sbc	r19, r1
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     b10:	83 2f       	mov	r24, r19
     b12:	8f 70       	andi	r24, 0x0F	; 15
     b14:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     b16:	2e 83       	std	Y+6, r18	; 0x06
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	08 95       	ret

00000b2a <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	1f 92       	push	r1
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	7c 01       	movw	r14, r24
     b40:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	09 f4       	brne	.+2      	; 0xb48 <usart_init_spi+0x1e>
     b46:	b2 c1       	rjmp	.+868    	; 0xeac <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b48:	80 3c       	cpi	r24, 0xC0	; 192
     b4a:	91 05       	cpc	r25, r1
     b4c:	21 f4       	brne	.+8      	; 0xb56 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	e1 d2       	rcall	.+1474   	; 0x1116 <sysclk_enable_module>
     b54:	ab c1       	rjmp	.+854    	; 0xeac <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b56:	80 e8       	ldi	r24, 0x80	; 128
     b58:	e8 16       	cp	r14, r24
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	f8 06       	cpc	r15, r24
     b5e:	21 f4       	brne	.+8      	; 0xb68 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	d8 d2       	rcall	.+1456   	; 0x1116 <sysclk_enable_module>
     b66:	a2 c1       	rjmp	.+836    	; 0xeac <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b68:	e1 14       	cp	r14, r1
     b6a:	e1 e0       	ldi	r30, 0x01	; 1
     b6c:	fe 06       	cpc	r15, r30
     b6e:	21 f4       	brne	.+8      	; 0xb78 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	d0 d2       	rcall	.+1440   	; 0x1116 <sysclk_enable_module>
     b76:	9a c1       	rjmp	.+820    	; 0xeac <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b78:	f0 e8       	ldi	r31, 0x80	; 128
     b7a:	ef 16       	cp	r14, r31
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b80:	21 f4       	brne	.+8      	; 0xb8a <usart_init_spi+0x60>
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	c7 d2       	rcall	.+1422   	; 0x1116 <sysclk_enable_module>
     b88:	91 c1       	rjmp	.+802    	; 0xeac <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b8a:	30 e9       	ldi	r19, 0x90	; 144
     b8c:	e3 16       	cp	r14, r19
     b8e:	33 e0       	ldi	r19, 0x03	; 3
     b90:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b92:	21 f4       	brne	.+8      	; 0xb9c <usart_init_spi+0x72>
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	be d2       	rcall	.+1404   	; 0x1116 <sysclk_enable_module>
     b9a:	88 c1       	rjmp	.+784    	; 0xeac <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b9c:	e1 14       	cp	r14, r1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     ba2:	21 f4       	brne	.+8      	; 0xbac <usart_init_spi+0x82>
     ba4:	62 e0       	ldi	r22, 0x02	; 2
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	b6 d2       	rcall	.+1388   	; 0x1116 <sysclk_enable_module>
     baa:	80 c1       	rjmp	.+768    	; 0xeac <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     bac:	e0 e4       	ldi	r30, 0x40	; 64
     bae:	ee 16       	cp	r14, r30
     bb0:	e2 e0       	ldi	r30, 0x02	; 2
     bb2:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usart_init_spi+0x94>
     bb6:	62 e0       	ldi	r22, 0x02	; 2
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	ad d2       	rcall	.+1370   	; 0x1116 <sysclk_enable_module>
     bbc:	77 c1       	rjmp	.+750    	; 0xeac <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     bbe:	f0 e2       	ldi	r31, 0x20	; 32
     bc0:	ef 16       	cp	r14, r31
     bc2:	f3 e0       	ldi	r31, 0x03	; 3
     bc4:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bc6:	21 f4       	brne	.+8      	; 0xbd0 <usart_init_spi+0xa6>
     bc8:	64 e0       	ldi	r22, 0x04	; 4
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	a4 d2       	rcall	.+1352   	; 0x1116 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bce:	6e c1       	rjmp	.+732    	; 0xeac <usart_init_spi+0x382>
     bd0:	e1 14       	cp	r14, r1
     bd2:	38 e0       	ldi	r19, 0x08	; 8
     bd4:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bd6:	21 f4       	brne	.+8      	; 0xbe0 <usart_init_spi+0xb6>
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	9c d2       	rcall	.+1336   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bde:	66 c1       	rjmp	.+716    	; 0xeac <usart_init_spi+0x382>
     be0:	e1 14       	cp	r14, r1
     be2:	89 e0       	ldi	r24, 0x09	; 9
     be4:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     be6:	21 f4       	brne	.+8      	; 0xbf0 <usart_init_spi+0xc6>
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	94 d2       	rcall	.+1320   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bee:	5e c1       	rjmp	.+700    	; 0xeac <usart_init_spi+0x382>
     bf0:	e1 14       	cp	r14, r1
     bf2:	ea e0       	ldi	r30, 0x0A	; 10
     bf4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bf6:	21 f4       	brne	.+8      	; 0xc00 <usart_init_spi+0xd6>
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	85 e0       	ldi	r24, 0x05	; 5
     bfc:	8c d2       	rcall	.+1304   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bfe:	56 c1       	rjmp	.+684    	; 0xeac <usart_init_spi+0x382>
     c00:	e1 14       	cp	r14, r1
     c02:	fb e0       	ldi	r31, 0x0B	; 11
     c04:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     c06:	21 f4       	brne	.+8      	; 0xc10 <usart_init_spi+0xe6>
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	84 d2       	rcall	.+1288   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     c0e:	4e c1       	rjmp	.+668    	; 0xeac <usart_init_spi+0x382>
     c10:	30 e4       	ldi	r19, 0x40	; 64
     c12:	e3 16       	cp	r14, r19
     c14:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c16:	f3 06       	cpc	r15, r19
     c18:	21 f4       	brne	.+8      	; 0xc22 <usart_init_spi+0xf8>
     c1a:	62 e0       	ldi	r22, 0x02	; 2
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	7b d2       	rcall	.+1270   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c20:	45 c1       	rjmp	.+650    	; 0xeac <usart_init_spi+0x382>
     c22:	80 e4       	ldi	r24, 0x40	; 64
     c24:	e8 16       	cp	r14, r24
     c26:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c28:	f8 06       	cpc	r15, r24
     c2a:	21 f4       	brne	.+8      	; 0xc34 <usart_init_spi+0x10a>
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	72 d2       	rcall	.+1252   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c32:	3c c1       	rjmp	.+632    	; 0xeac <usart_init_spi+0x382>
     c34:	e0 e4       	ldi	r30, 0x40	; 64
     c36:	ee 16       	cp	r14, r30
     c38:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c3a:	fe 06       	cpc	r15, r30
     c3c:	21 f4       	brne	.+8      	; 0xc46 <usart_init_spi+0x11c>
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	85 e0       	ldi	r24, 0x05	; 5
     c42:	69 d2       	rcall	.+1234   	; 0x1116 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c44:	33 c1       	rjmp	.+614    	; 0xeac <usart_init_spi+0x382>
     c46:	f0 e9       	ldi	r31, 0x90	; 144
     c48:	ef 16       	cp	r14, r31
     c4a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c4c:	ff 06       	cpc	r15, r31
     c4e:	21 f4       	brne	.+8      	; 0xc58 <usart_init_spi+0x12e>
     c50:	64 e0       	ldi	r22, 0x04	; 4
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	60 d2       	rcall	.+1216   	; 0x1116 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c56:	2a c1       	rjmp	.+596    	; 0xeac <usart_init_spi+0x382>
     c58:	30 e9       	ldi	r19, 0x90	; 144
     c5a:	e3 16       	cp	r14, r19
     c5c:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c5e:	f3 06       	cpc	r15, r19
     c60:	21 f4       	brne	.+8      	; 0xc6a <usart_init_spi+0x140>
     c62:	64 e0       	ldi	r22, 0x04	; 4
     c64:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c66:	57 d2       	rcall	.+1198   	; 0x1116 <sysclk_enable_module>
     c68:	21 c1       	rjmp	.+578    	; 0xeac <usart_init_spi+0x382>
     c6a:	80 e9       	ldi	r24, 0x90	; 144
     c6c:	e8 16       	cp	r14, r24
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c70:	f8 06       	cpc	r15, r24
     c72:	21 f4       	brne	.+8      	; 0xc7c <usart_init_spi+0x152>
     c74:	64 e0       	ldi	r22, 0x04	; 4
     c76:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c78:	4e d2       	rcall	.+1180   	; 0x1116 <sysclk_enable_module>
     c7a:	18 c1       	rjmp	.+560    	; 0xeac <usart_init_spi+0x382>
     c7c:	e0 e9       	ldi	r30, 0x90	; 144
     c7e:	ee 16       	cp	r14, r30
     c80:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c82:	fe 06       	cpc	r15, r30
     c84:	21 f4       	brne	.+8      	; 0xc8e <usart_init_spi+0x164>
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c8a:	45 d2       	rcall	.+1162   	; 0x1116 <sysclk_enable_module>
     c8c:	0f c1       	rjmp	.+542    	; 0xeac <usart_init_spi+0x382>
     c8e:	f0 ec       	ldi	r31, 0xC0	; 192
     c90:	ef 16       	cp	r14, r31
     c92:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c94:	ff 06       	cpc	r15, r31
     c96:	21 f4       	brne	.+8      	; 0xca0 <usart_init_spi+0x176>
     c98:	68 e0       	ldi	r22, 0x08	; 8
     c9a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c9c:	3c d2       	rcall	.+1144   	; 0x1116 <sysclk_enable_module>
     c9e:	06 c1       	rjmp	.+524    	; 0xeac <usart_init_spi+0x382>
     ca0:	30 ec       	ldi	r19, 0xC0	; 192
     ca2:	e3 16       	cp	r14, r19
     ca4:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ca6:	f3 06       	cpc	r15, r19
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <usart_init_spi+0x188>
     caa:	68 e0       	ldi	r22, 0x08	; 8
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	33 d2       	rcall	.+1126   	; 0x1116 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     cb0:	fd c0       	rjmp	.+506    	; 0xeac <usart_init_spi+0x382>
     cb2:	80 ea       	ldi	r24, 0xA0	; 160
     cb4:	e8 16       	cp	r14, r24
     cb6:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     cb8:	f8 06       	cpc	r15, r24
     cba:	61 f4       	brne	.+24     	; 0xcd4 <usart_init_spi+0x1aa>
     cbc:	60 e1       	ldi	r22, 0x10	; 16
     cbe:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     cc0:	2a d2       	rcall	.+1108   	; 0x1116 <sysclk_enable_module>
     cc2:	e0 ea       	ldi	r30, 0xA0	; 160
     cc4:	f8 e0       	ldi	r31, 0x08	; 8
     cc6:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     cc8:	8f 7e       	andi	r24, 0xEF	; 239
     cca:	84 83       	std	Z+4, r24	; 0x04
     ccc:	f8 01       	movw	r30, r16
     cce:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cd0:	22 50       	subi	r18, 0x02	; 2
     cd2:	4c c0       	rjmp	.+152    	; 0xd6c <usart_init_spi+0x242>
     cd4:	f0 ea       	ldi	r31, 0xA0	; 160
     cd6:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cd8:	f9 e0       	ldi	r31, 0x09	; 9
     cda:	ff 06       	cpc	r15, r31
     cdc:	21 f4       	brne	.+8      	; 0xce6 <usart_init_spi+0x1bc>
     cde:	60 e1       	ldi	r22, 0x10	; 16
     ce0:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ce2:	19 d2       	rcall	.+1074   	; 0x1116 <sysclk_enable_module>
     ce4:	e3 c0       	rjmp	.+454    	; 0xeac <usart_init_spi+0x382>
     ce6:	30 ea       	ldi	r19, 0xA0	; 160
     ce8:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     cea:	3a e0       	ldi	r19, 0x0A	; 10
     cec:	f3 06       	cpc	r15, r19
     cee:	21 f4       	brne	.+8      	; 0xcf8 <usart_init_spi+0x1ce>
     cf0:	60 e1       	ldi	r22, 0x10	; 16
     cf2:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cf4:	10 d2       	rcall	.+1056   	; 0x1116 <sysclk_enable_module>
     cf6:	da c0       	rjmp	.+436    	; 0xeac <usart_init_spi+0x382>
     cf8:	80 ea       	ldi	r24, 0xA0	; 160
     cfa:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     cfc:	8b e0       	ldi	r24, 0x0B	; 11
     cfe:	f8 06       	cpc	r15, r24
     d00:	21 f4       	brne	.+8      	; 0xd0a <usart_init_spi+0x1e0>
     d02:	60 e1       	ldi	r22, 0x10	; 16
     d04:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     d06:	07 d2       	rcall	.+1038   	; 0x1116 <sysclk_enable_module>
     d08:	d1 c0       	rjmp	.+418    	; 0xeac <usart_init_spi+0x382>
     d0a:	e0 eb       	ldi	r30, 0xB0	; 176
     d0c:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     d0e:	e8 e0       	ldi	r30, 0x08	; 8
     d10:	fe 06       	cpc	r15, r30
     d12:	21 f4       	brne	.+8      	; 0xd1c <usart_init_spi+0x1f2>
     d14:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	fe d1       	rcall	.+1020   	; 0x1116 <sysclk_enable_module>
     d1a:	c8 c0       	rjmp	.+400    	; 0xeac <usart_init_spi+0x382>
     d1c:	f0 eb       	ldi	r31, 0xB0	; 176
     d1e:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d20:	f9 e0       	ldi	r31, 0x09	; 9
     d22:	ff 06       	cpc	r15, r31
     d24:	21 f4       	brne	.+8      	; 0xd2e <usart_init_spi+0x204>
     d26:	60 e2       	ldi	r22, 0x20	; 32
     d28:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d2a:	f5 d1       	rcall	.+1002   	; 0x1116 <sysclk_enable_module>
     d2c:	bf c0       	rjmp	.+382    	; 0xeac <usart_init_spi+0x382>
     d2e:	30 e8       	ldi	r19, 0x80	; 128
     d30:	e3 16       	cp	r14, r19
     d32:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d34:	f3 06       	cpc	r15, r19
     d36:	21 f4       	brne	.+8      	; 0xd40 <usart_init_spi+0x216>
     d38:	60 e4       	ldi	r22, 0x40	; 64
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	ec d1       	rcall	.+984    	; 0x1116 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d3e:	b6 c0       	rjmp	.+364    	; 0xeac <usart_init_spi+0x382>
     d40:	80 ea       	ldi	r24, 0xA0	; 160
     d42:	e8 16       	cp	r14, r24
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d48:	21 f4       	brne	.+8      	; 0xd52 <usart_init_spi+0x228>
     d4a:	60 e4       	ldi	r22, 0x40	; 64
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	e3 d1       	rcall	.+966    	; 0x1116 <sysclk_enable_module>
     d50:	ad c0       	rjmp	.+346    	; 0xeac <usart_init_spi+0x382>
     d52:	f7 01       	movw	r30, r14
     d54:	84 81       	ldd	r24, Z+4	; 0x04
     d56:	8f 7e       	andi	r24, 0xEF	; 239
     d58:	84 83       	std	Z+4, r24	; 0x04
     d5a:	fb 01       	movw	r30, r22
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     d60:	c7 01       	movw	r24, r14
     d62:	f0 ea       	ldi	r31, 0xA0	; 160
     d64:	ef 16       	cp	r14, r31
     d66:	f8 e0       	ldi	r31, 0x08	; 8
     d68:	ff 06       	cpc	r15, r31
     d6a:	49 f4       	brne	.+18     	; 0xd7e <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     d6c:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
     d70:	84 fd       	sbrc	r24, 4
     d72:	a5 c0       	rjmp	.+330    	; 0xebe <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     d74:	0f 2e       	mov	r0, r31
     d76:	f1 e1       	ldi	r31, 0x11	; 17
     d78:	df 2e       	mov	r13, r31
     d7a:	f0 2d       	mov	r31, r0
     d7c:	a4 c0       	rjmp	.+328    	; 0xec6 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     d7e:	80 3b       	cpi	r24, 0xB0	; 176
     d80:	38 e0       	ldi	r19, 0x08	; 8
     d82:	93 07       	cpc	r25, r19
     d84:	91 f0       	breq	.+36     	; 0xdaa <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     d86:	80 3a       	cpi	r24, 0xA0	; 160
     d88:	e9 e0       	ldi	r30, 0x09	; 9
     d8a:	9e 07       	cpc	r25, r30
     d8c:	49 f4       	brne	.+18     	; 0xda0 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     d8e:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
     d92:	34 fd       	sbrc	r19, 4
     d94:	9b c0       	rjmp	.+310    	; 0xecc <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     d96:	0f 2e       	mov	r0, r31
     d98:	f9 e1       	ldi	r31, 0x19	; 25
     d9a:	df 2e       	mov	r13, r31
     d9c:	f0 2d       	mov	r31, r0
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     da0:	80 3b       	cpi	r24, 0xB0	; 176
     da2:	f9 e0       	ldi	r31, 0x09	; 9
     da4:	9f 07       	cpc	r25, r31
     da6:	f1 f0       	breq	.+60     	; 0xde4 <usart_init_spi+0x2ba>
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     daa:	0f 2e       	mov	r0, r31
     dac:	f5 e1       	ldi	r31, 0x15	; 21
     dae:	df 2e       	mov	r13, r31
     db0:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     db2:	80 3a       	cpi	r24, 0xA0	; 160
     db4:	3a e0       	ldi	r19, 0x0A	; 10
     db6:	93 07       	cpc	r25, r19
     db8:	49 f4       	brne	.+18     	; 0xdcc <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     dba:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
     dbe:	84 fd       	sbrc	r24, 4
     dc0:	8a c0       	rjmp	.+276    	; 0xed6 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f1 e2       	ldi	r31, 0x21	; 33
     dc6:	df 2e       	mov	r13, r31
     dc8:	f0 2d       	mov	r31, r0
     dca:	15 c0       	rjmp	.+42     	; 0xdf6 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     dcc:	80 3a       	cpi	r24, 0xA0	; 160
     dce:	9b 40       	sbci	r25, 0x0B	; 11
     dd0:	91 f4       	brne	.+36     	; 0xdf6 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     dd2:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
     dd6:	84 fd       	sbrc	r24, 4
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     dda:	0f 2e       	mov	r0, r31
     ddc:	f9 e2       	ldi	r31, 0x29	; 41
     dde:	df 2e       	mov	r13, r31
     de0:	f0 2d       	mov	r31, r0
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     de4:	0f 2e       	mov	r0, r31
     de6:	fd e1       	ldi	r31, 0x1D	; 29
     de8:	df 2e       	mov	r13, r31
     dea:	f0 2d       	mov	r31, r0
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     dee:	0f 2e       	mov	r0, r31
     df0:	fd e2       	ldi	r31, 0x2D	; 45
     df2:	df 2e       	mov	r13, r31
     df4:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     df6:	ed 2d       	mov	r30, r13
     df8:	e6 95       	lsr	r30
     dfa:	e6 95       	lsr	r30
     dfc:	e6 95       	lsr	r30
     dfe:	30 e2       	ldi	r19, 0x20	; 32
     e00:	e3 9f       	mul	r30, r19
     e02:	f0 01       	movw	r30, r0
     e04:	11 24       	eor	r1, r1
     e06:	fa 5f       	subi	r31, 0xFA	; 250
     e08:	3d 2d       	mov	r19, r13
     e0a:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	03 2e       	mov	r0, r19
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <usart_init_spi+0x2ee>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     e1c:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	10 f0       	brcs	.+4      	; 0xe26 <usart_init_spi+0x2fc>
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <usart_init_spi+0x2fe>
     e26:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     e28:	df 01       	movw	r26, r30
     e2a:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     e2c:	a3 0f       	add	r26, r19
     e2e:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e30:	9f b7       	in	r25, 0x3f	; 63
     e32:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e34:	f8 94       	cli
	return flags;
     e36:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     e38:	2c 91       	ld	r18, X
     e3a:	27 70       	andi	r18, 0x07	; 7
     e3c:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     e3e:	9c 91       	ld	r25, X
     e40:	94 2b       	or	r25, r20
     e42:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e44:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e46:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     e48:	f7 01       	movw	r30, r14
     e4a:	85 81       	ldd	r24, Z+5	; 0x05
     e4c:	80 6c       	ori	r24, 0xC0	; 192
     e4e:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     e50:	f8 01       	movw	r30, r16
     e52:	84 81       	ldd	r24, Z+4	; 0x04
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	29 f4       	brne	.+10     	; 0xe64 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
     e5a:	f7 01       	movw	r30, r14
     e5c:	85 81       	ldd	r24, Z+5	; 0x05
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <usart_init_spi+0x342>
     e64:	f7 01       	movw	r30, r14
     e66:	85 81       	ldd	r24, Z+5	; 0x05
     e68:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
     e6a:	85 83       	std	Z+5, r24	; 0x05
     e6c:	f8 01       	movw	r30, r16
     e6e:	85 81       	ldd	r24, Z+5	; 0x05
     e70:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
     e72:	29 f0       	breq	.+10     	; 0xe7e <usart_init_spi+0x354>
     e74:	f7 01       	movw	r30, r14
     e76:	85 81       	ldd	r24, Z+5	; 0x05
     e78:	84 60       	ori	r24, 0x04	; 4
     e7a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <usart_init_spi+0x35c>
     e7e:	f7 01       	movw	r30, r14
     e80:	85 81       	ldd	r24, Z+5	; 0x05
     e82:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     e84:	85 83       	std	Z+5, r24	; 0x05
     e86:	f8 01       	movw	r30, r16
     e88:	40 81       	ld	r20, Z
     e8a:	51 81       	ldd	r21, Z+1	; 0x01
     e8c:	62 81       	ldd	r22, Z+2	; 0x02
     e8e:	73 81       	ldd	r23, Z+3	; 0x03
     e90:	00 e8       	ldi	r16, 0x80	; 128
     e92:	14 e8       	ldi	r17, 0x84	; 132
     e94:	2e e1       	ldi	r18, 0x1E	; 30
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	c7 01       	movw	r24, r14
     e9a:	15 de       	rcall	.-982    	; 0xac6 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     e9c:	f7 01       	movw	r30, r14
     e9e:	84 81       	ldd	r24, Z+4	; 0x04
     ea0:	88 60       	ori	r24, 0x08	; 8
     ea2:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	80 61       	ori	r24, 0x10	; 16
     ea8:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     eaa:	1a c0       	rjmp	.+52     	; 0xee0 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     eac:	f7 01       	movw	r30, r14
     eae:	84 81       	ldd	r24, Z+4	; 0x04
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     eb4:	f8 01       	movw	r30, r16
     eb6:	24 81       	ldd	r18, Z+4	; 0x04
     eb8:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     eba:	c7 01       	movw	r24, r14
     ebc:	60 cf       	rjmp	.-320    	; 0xd7e <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     ebe:	0f 2e       	mov	r0, r31
     ec0:	f5 e1       	ldi	r31, 0x15	; 21
     ec2:	df 2e       	mov	r13, r31
     ec4:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     ec6:	80 ea       	ldi	r24, 0xA0	; 160
     ec8:	98 e0       	ldi	r25, 0x08	; 8
     eca:	6a cf       	rjmp	.-300    	; 0xda0 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     ecc:	0f 2e       	mov	r0, r31
     ece:	fd e1       	ldi	r31, 0x1D	; 29
     ed0:	df 2e       	mov	r13, r31
     ed2:	f0 2d       	mov	r31, r0
     ed4:	7b cf       	rjmp	.-266    	; 0xdcc <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     ed6:	0f 2e       	mov	r0, r31
     ed8:	f5 e2       	ldi	r31, 0x25	; 37
     eda:	df 2e       	mov	r13, r31
     edc:	f0 2d       	mov	r31, r0
     ede:	8b cf       	rjmp	.-234    	; 0xdf6 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	08 95       	ret

00000ef2 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     ef2:	80 3a       	cpi	r24, 0xA0	; 160
     ef4:	28 e0       	ldi	r18, 0x08	; 8
     ef6:	92 07       	cpc	r25, r18
     ef8:	21 f4       	brne	.+8      	; 0xf02 <usart_spi_init+0x10>
     efa:	60 e1       	ldi	r22, 0x10	; 16
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	0b c1       	rjmp	.+534    	; 0x1116 <sysclk_enable_module>
     f00:	08 95       	ret
     f02:	80 3b       	cpi	r24, 0xB0	; 176
     f04:	28 e0       	ldi	r18, 0x08	; 8
     f06:	92 07       	cpc	r25, r18
     f08:	21 f4       	brne	.+8      	; 0xf12 <usart_spi_init+0x20>
     f0a:	60 e2       	ldi	r22, 0x20	; 32
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	03 c1       	rjmp	.+518    	; 0x1116 <sysclk_enable_module>
     f10:	08 95       	ret
     f12:	80 3a       	cpi	r24, 0xA0	; 160
     f14:	29 e0       	ldi	r18, 0x09	; 9
     f16:	92 07       	cpc	r25, r18
     f18:	21 f4       	brne	.+8      	; 0xf22 <usart_spi_init+0x30>
     f1a:	60 e1       	ldi	r22, 0x10	; 16
     f1c:	84 e0       	ldi	r24, 0x04	; 4
     f1e:	fb c0       	rjmp	.+502    	; 0x1116 <sysclk_enable_module>
     f20:	08 95       	ret
     f22:	80 3b       	cpi	r24, 0xB0	; 176
     f24:	29 e0       	ldi	r18, 0x09	; 9
     f26:	92 07       	cpc	r25, r18
     f28:	21 f4       	brne	.+8      	; 0xf32 <usart_spi_init+0x40>
     f2a:	60 e2       	ldi	r22, 0x20	; 32
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	f3 c0       	rjmp	.+486    	; 0x1116 <sysclk_enable_module>
     f30:	08 95       	ret
     f32:	80 3a       	cpi	r24, 0xA0	; 160
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	92 07       	cpc	r25, r18
     f38:	21 f4       	brne	.+8      	; 0xf42 <usart_spi_init+0x50>
     f3a:	60 e1       	ldi	r22, 0x10	; 16
     f3c:	85 e0       	ldi	r24, 0x05	; 5
     f3e:	eb c0       	rjmp	.+470    	; 0x1116 <sysclk_enable_module>
     f40:	08 95       	ret
     f42:	80 3a       	cpi	r24, 0xA0	; 160
     f44:	9b 40       	sbci	r25, 0x0B	; 11
     f46:	19 f4       	brne	.+6      	; 0xf4e <usart_spi_init+0x5c>
     f48:	60 e1       	ldi	r22, 0x10	; 16
     f4a:	86 e0       	ldi	r24, 0x06	; 6
     f4c:	e4 c0       	rjmp	.+456    	; 0x1116 <sysclk_enable_module>
     f4e:	08 95       	ret

00000f50 <usart_spi_setup_device>:
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	00 d0       	rcall	.+0      	; 0xf5a <usart_spi_setup_device+0xa>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <usart_spi_setup_device+0xc>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	09 83       	std	Y+1, r16	; 0x01
     f62:	1a 83       	std	Y+2, r17	; 0x02
     f64:	2b 83       	std	Y+3, r18	; 0x03
     f66:	3c 83       	std	Y+4, r19	; 0x04
     f68:	4d 83       	std	Y+5, r20	; 0x05
     f6a:	1e 82       	std	Y+6, r1	; 0x06
     f6c:	be 01       	movw	r22, r28
     f6e:	6f 5f       	subi	r22, 0xFF	; 255
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	db dd       	rcall	.-1098   	; 0xb2a <usart_init_spi>
     f74:	26 96       	adiw	r28, 0x06	; 6
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     f84:	fb 01       	movw	r30, r22
     f86:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f88:	e8 2f       	mov	r30, r24
     f8a:	e6 95       	lsr	r30
     f8c:	e6 95       	lsr	r30
     f8e:	e6 95       	lsr	r30
     f90:	40 e2       	ldi	r20, 0x20	; 32
     f92:	e4 9f       	mul	r30, r20
     f94:	f0 01       	movw	r30, r0
     f96:	11 24       	eor	r1, r1
     f98:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     f9a:	87 70       	andi	r24, 0x07	; 7
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <usart_spi_select_device+0x24>
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     fac:	46 83       	std	Z+6, r20	; 0x06
     fae:	08 95       	ret

00000fb0 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     fb0:	fb 01       	movw	r30, r22
     fb2:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     fb4:	e8 2f       	mov	r30, r24
     fb6:	e6 95       	lsr	r30
     fb8:	e6 95       	lsr	r30
     fba:	e6 95       	lsr	r30
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	e4 9f       	mul	r30, r20
     fc0:	f0 01       	movw	r30, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     fc6:	87 70       	andi	r24, 0x07	; 7
     fc8:	21 e0       	ldi	r18, 0x01	; 1
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <usart_spi_deselect_device+0x24>
     fd0:	44 0f       	add	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	8a 95       	dec	r24
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     fd8:	45 83       	std	Z+5, r20	; 0x05
     fda:	08 95       	ret

00000fdc <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     fdc:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <fbpointer>
     fe0:	90 93 59 22 	sts	0x2259, r25	; 0x802259 <fbpointer+0x1>
     fe4:	08 95       	ret

00000fe6 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     fe6:	20 91 58 22 	lds	r18, 0x2258	; 0x802258 <fbpointer>
     fea:	30 91 59 22 	lds	r19, 0x2259	; 0x802259 <fbpointer+0x1>
     fee:	90 e8       	ldi	r25, 0x80	; 128
     ff0:	89 9f       	mul	r24, r25
     ff2:	20 0d       	add	r18, r0
     ff4:	31 1d       	adc	r19, r1
     ff6:	11 24       	eor	r1, r1
     ff8:	f9 01       	movw	r30, r18
     ffa:	e6 0f       	add	r30, r22
     ffc:	f1 1d       	adc	r31, r1
     ffe:	40 83       	st	Z, r20
    1000:	08 95       	ret

00001002 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1002:	20 91 58 22 	lds	r18, 0x2258	; 0x802258 <fbpointer>
    1006:	30 91 59 22 	lds	r19, 0x2259	; 0x802259 <fbpointer+0x1>
    100a:	90 e8       	ldi	r25, 0x80	; 128
    100c:	89 9f       	mul	r24, r25
    100e:	20 0d       	add	r18, r0
    1010:	31 1d       	adc	r19, r1
    1012:	11 24       	eor	r1, r1
    1014:	f9 01       	movw	r30, r18
    1016:	e6 0f       	add	r30, r22
    1018:	f1 1d       	adc	r31, r1
}
    101a:	80 81       	ld	r24, Z
    101c:	08 95       	ret

0000101e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	e4 2f       	mov	r30, r20
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	e8 0f       	add	r30, r24
    102e:	f1 1d       	adc	r31, r1
    1030:	e1 38       	cpi	r30, 0x81	; 129
    1032:	f1 05       	cpc	r31, r1
    1034:	1c f0       	brlt	.+6      	; 0x103c <gfx_mono_generic_draw_horizontal_line+0x1e>
    1036:	c0 e8       	ldi	r28, 0x80	; 128
    1038:	4c 2f       	mov	r20, r28
    103a:	48 1b       	sub	r20, r24
    103c:	44 23       	and	r20, r20
    103e:	09 f4       	brne	.+2      	; 0x1042 <gfx_mono_generic_draw_horizontal_line+0x24>
    1040:	4a c0       	rjmp	.+148    	; 0x10d6 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1042:	d6 2f       	mov	r29, r22
    1044:	d6 95       	lsr	r29
    1046:	d6 95       	lsr	r29
    1048:	d6 95       	lsr	r29
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	98 e0       	ldi	r25, 0x08	; 8
    104e:	d9 9f       	mul	r29, r25
    1050:	60 19       	sub	r22, r0
    1052:	71 09       	sbc	r23, r1
    1054:	11 24       	eor	r1, r1
    1056:	e1 e0       	ldi	r30, 0x01	; 1
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	df 01       	movw	r26, r30
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <gfx_mono_generic_draw_horizontal_line+0x44>
    105e:	aa 0f       	add	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	6a 95       	dec	r22
    1064:	e2 f7       	brpl	.-8      	; 0x105e <gfx_mono_generic_draw_horizontal_line+0x40>
    1066:	fa 2e       	mov	r15, r26
    1068:	21 30       	cpi	r18, 0x01	; 1
    106a:	21 f0       	breq	.+8      	; 0x1074 <gfx_mono_generic_draw_horizontal_line+0x56>
    106c:	98 f0       	brcs	.+38     	; 0x1094 <gfx_mono_generic_draw_horizontal_line+0x76>
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	19 f1       	breq	.+70     	; 0x10b8 <gfx_mono_generic_draw_horizontal_line+0x9a>
    1072:	31 c0       	rjmp	.+98     	; 0x10d6 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1074:	c4 2f       	mov	r28, r20
    1076:	1f ef       	ldi	r17, 0xFF	; 255
    1078:	18 0f       	add	r17, r24
    107a:	01 2f       	mov	r16, r17
    107c:	0c 0f       	add	r16, r28
    107e:	60 2f       	mov	r22, r16
    1080:	8d 2f       	mov	r24, r29
    1082:	1f dd       	rcall	.-1474   	; 0xac2 <gfx_mono_st7565r_get_byte>
    1084:	4f 2d       	mov	r20, r15
    1086:	48 2b       	or	r20, r24
    1088:	60 2f       	mov	r22, r16
    108a:	8d 2f       	mov	r24, r29
    108c:	fb db       	rcall	.-2058   	; 0x884 <gfx_mono_st7565r_put_byte>
    108e:	c1 50       	subi	r28, 0x01	; 1
    1090:	a1 f7       	brne	.-24     	; 0x107a <gfx_mono_generic_draw_horizontal_line+0x5c>
    1092:	21 c0       	rjmp	.+66     	; 0x10d6 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1094:	c4 2f       	mov	r28, r20
    1096:	1f ef       	ldi	r17, 0xFF	; 255
    1098:	18 0f       	add	r17, r24
    109a:	fa 2e       	mov	r15, r26
    109c:	f0 94       	com	r15
    109e:	01 2f       	mov	r16, r17
    10a0:	0c 0f       	add	r16, r28
    10a2:	60 2f       	mov	r22, r16
    10a4:	8d 2f       	mov	r24, r29
    10a6:	0d dd       	rcall	.-1510   	; 0xac2 <gfx_mono_st7565r_get_byte>
    10a8:	4f 2d       	mov	r20, r15
    10aa:	48 23       	and	r20, r24
    10ac:	60 2f       	mov	r22, r16
    10ae:	8d 2f       	mov	r24, r29
    10b0:	e9 db       	rcall	.-2094   	; 0x884 <gfx_mono_st7565r_put_byte>
    10b2:	c1 50       	subi	r28, 0x01	; 1
    10b4:	a1 f7       	brne	.-24     	; 0x109e <gfx_mono_generic_draw_horizontal_line+0x80>
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <gfx_mono_generic_draw_horizontal_line+0xb8>
    10b8:	c4 2f       	mov	r28, r20
    10ba:	1f ef       	ldi	r17, 0xFF	; 255
    10bc:	18 0f       	add	r17, r24
    10be:	01 2f       	mov	r16, r17
    10c0:	0c 0f       	add	r16, r28
    10c2:	60 2f       	mov	r22, r16
    10c4:	8d 2f       	mov	r24, r29
    10c6:	fd dc       	rcall	.-1542   	; 0xac2 <gfx_mono_st7565r_get_byte>
    10c8:	4f 2d       	mov	r20, r15
    10ca:	48 27       	eor	r20, r24
    10cc:	60 2f       	mov	r22, r16
    10ce:	8d 2f       	mov	r24, r29
    10d0:	d9 db       	rcall	.-2126   	; 0x884 <gfx_mono_st7565r_put_byte>
    10d2:	c1 50       	subi	r28, 0x01	; 1
    10d4:	a1 f7       	brne	.-24     	; 0x10be <gfx_mono_generic_draw_horizontal_line+0xa0>
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	08 95       	ret

000010e2 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
	if (height == 0) {
    10ec:	22 23       	and	r18, r18
    10ee:	69 f0       	breq	.+26     	; 0x110a <gfx_mono_generic_draw_filled_rect+0x28>
    10f0:	f4 2e       	mov	r15, r20
    10f2:	18 2f       	mov	r17, r24
    10f4:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    10f6:	df ef       	ldi	r29, 0xFF	; 255
    10f8:	d6 0f       	add	r29, r22
    10fa:	6d 2f       	mov	r22, r29
    10fc:	6c 0f       	add	r22, r28
    10fe:	20 2f       	mov	r18, r16
    1100:	4f 2d       	mov	r20, r15
    1102:	81 2f       	mov	r24, r17
    1104:	8c df       	rcall	.-232    	; 0x101e <gfx_mono_generic_draw_horizontal_line>
    1106:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1108:	c1 f7       	brne	.-16     	; 0x10fa <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	08 95       	ret

00001116 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	1f 92       	push	r1
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1120:	9f b7       	in	r25, 0x3f	; 63
    1122:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1124:	f8 94       	cli
	return flags;
    1126:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1128:	e8 2f       	mov	r30, r24
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	e0 59       	subi	r30, 0x90	; 144
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	60 95       	com	r22
    1132:	80 81       	ld	r24, Z
    1134:	68 23       	and	r22, r24
    1136:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1138:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    113a:	0f 90       	pop	r0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	c8 2f       	mov	r28, r24
    1158:	e6 2e       	mov	r14, r22
    115a:	b4 2e       	mov	r11, r20
    115c:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	24 81       	ldd	r18, Z+4	; 0x04
    1164:	43 81       	ldd	r20, Z+3	; 0x03
    1166:	6b 2d       	mov	r22, r11
    1168:	8e 2d       	mov	r24, r14
    116a:	bb df       	rcall	.-138    	; 0x10e2 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    116c:	f6 01       	movw	r30, r12
    116e:	80 81       	ld	r24, Z
    1170:	81 11       	cpse	r24, r1
    1172:	39 c0       	rjmp	.+114    	; 0x11e6 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1174:	83 81       	ldd	r24, Z+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	26 95       	lsr	r18
    117a:	26 95       	lsr	r18
    117c:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    117e:	87 70       	andi	r24, 0x07	; 7
    1180:	09 f0       	breq	.+2      	; 0x1184 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1182:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1184:	f6 01       	movw	r30, r12
    1186:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1188:	8c 2f       	mov	r24, r28
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	35 81       	ldd	r19, Z+5	; 0x05
    118e:	83 1b       	sub	r24, r19
    1190:	91 09       	sbc	r25, r1
    1192:	2a 9d       	mul	r18, r10
    1194:	90 01       	movw	r18, r0
    1196:	11 24       	eor	r1, r1
    1198:	82 9f       	mul	r24, r18
    119a:	a0 01       	movw	r20, r0
    119c:	83 9f       	mul	r24, r19
    119e:	50 0d       	add	r21, r0
    11a0:	92 9f       	mul	r25, r18
    11a2:	50 0d       	add	r21, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	01 81       	ldd	r16, Z+1	; 0x01
    11a8:	12 81       	ldd	r17, Z+2	; 0x02
    11aa:	04 0f       	add	r16, r20
    11ac:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    11ae:	f6 01       	movw	r30, r12
    11b0:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    11b2:	ff 20       	and	r15, r15
    11b4:	a1 f0       	breq	.+40     	; 0x11de <gfx_mono_draw_char+0x9c>
    11b6:	d0 e0       	ldi	r29, 0x00	; 0
    11b8:	c0 e0       	ldi	r28, 0x00	; 0
    11ba:	8e 2d       	mov	r24, r14
    11bc:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    11be:	9c 2f       	mov	r25, r28
    11c0:	97 70       	andi	r25, 0x07	; 7
    11c2:	21 f4       	brne	.+8      	; 0x11cc <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    11c4:	f8 01       	movw	r30, r16
    11c6:	d4 91       	lpm	r29, Z
				glyph_data++;
    11c8:	0f 5f       	subi	r16, 0xFF	; 255
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    11cc:	dd 23       	and	r29, r29
    11ce:	1c f4       	brge	.+6      	; 0x11d6 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	6b 2d       	mov	r22, r11
    11d4:	40 dc       	rcall	.-1920   	; 0xa56 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    11d6:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    11d8:	cf 5f       	subi	r28, 0xFF	; 255
    11da:	fc 12       	cpse	r15, r28
    11dc:	ee cf       	rjmp	.-36     	; 0x11ba <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    11de:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    11e0:	aa 94       	dec	r10
	} while (rows_left > 0);
    11e2:	a1 10       	cpse	r10, r1
    11e4:	e4 cf       	rjmp	.-56     	; 0x11ae <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	08 95       	ret

000011fc <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	d6 2e       	mov	r13, r22
    120c:	04 2f       	mov	r16, r20
    120e:	79 01       	movw	r14, r18
    1210:	ec 01       	movw	r28, r24
    1212:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1214:	89 91       	ld	r24, Y+
    1216:	8a 30       	cpi	r24, 0x0A	; 10
    1218:	31 f4       	brne	.+12     	; 0x1226 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    121a:	f7 01       	movw	r30, r14
    121c:	84 81       	ldd	r24, Z+4	; 0x04
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1222:	1d 2d       	mov	r17, r13
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1226:	8d 30       	cpi	r24, 0x0D	; 13
    1228:	39 f0       	breq	.+14     	; 0x1238 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    122a:	97 01       	movw	r18, r14
    122c:	40 2f       	mov	r20, r16
    122e:	61 2f       	mov	r22, r17
    1230:	88 df       	rcall	.-240    	; 0x1142 <gfx_mono_draw_char>
			x += font->width;
    1232:	f7 01       	movw	r30, r14
    1234:	83 81       	ldd	r24, Z+3	; 0x03
    1236:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1238:	88 81       	ld	r24, Y
    123a:	81 11       	cpse	r24, r1
    123c:	eb cf       	rjmp	.-42     	; 0x1214 <gfx_mono_draw_string+0x18>
}
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	08 95       	ret

0000124e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    124e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1250:	03 96       	adiw	r24, 0x03	; 3
    1252:	81 83       	std	Z+1, r24	; 0x01
    1254:	92 83       	std	Z+2, r25	; 0x02

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	23 83       	std	Z+3, r18	; 0x03
    125c:	34 83       	std	Z+4, r19	; 0x04

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    125e:	85 83       	std	Z+5, r24	; 0x05
    1260:	96 83       	std	Z+6, r25	; 0x06
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1262:	87 83       	std	Z+7, r24	; 0x07
    1264:	90 87       	std	Z+8, r25	; 0x08

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1266:	10 82       	st	Z, r1
    1268:	08 95       	ret

0000126a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    126a:	fc 01       	movw	r30, r24
    126c:	10 86       	std	Z+8, r1	; 0x08
    126e:	11 86       	std	Z+9, r1	; 0x09
    1270:	08 95       	ret

00001272 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	9c 01       	movw	r18, r24
    1278:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    127a:	dc 01       	movw	r26, r24
    127c:	11 96       	adiw	r26, 0x01	; 1
    127e:	cd 91       	ld	r28, X+
    1280:	dc 91       	ld	r29, X
    1282:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1284:	c2 83       	std	Z+2, r28	; 0x02
    1286:	d3 83       	std	Z+3, r29	; 0x03
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	84 83       	std	Z+4, r24	; 0x04
    128e:	95 83       	std	Z+5, r25	; 0x05

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	dc 01       	movw	r26, r24
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	6d 93       	st	X+, r22
    129a:	7c 93       	st	X, r23
    129c:	13 97       	sbiw	r26, 0x03	; 3
    pxIndex->pxPrevious = pxNewListItem;
    129e:	6c 83       	std	Y+4, r22	; 0x04
    12a0:	7d 83       	std	Y+5, r23	; 0x05

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    12a2:	20 87       	std	Z+8, r18	; 0x08
    12a4:	31 87       	std	Z+9, r19	; 0x09

    ( pxList->uxNumberOfItems )++;
    12a6:	f9 01       	movw	r30, r18
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	80 83       	st	Z, r24
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    12ba:	48 81       	ld	r20, Y
    12bc:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    12be:	4f 3f       	cpi	r20, 0xFF	; 255
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	52 07       	cpc	r21, r18
    12c4:	21 f4       	brne	.+8      	; 0x12ce <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    12c6:	fc 01       	movw	r30, r24
    12c8:	a7 81       	ldd	r26, Z+7	; 0x07
    12ca:	b0 85       	ldd	r27, Z+8	; 0x08
    12cc:	0d c0       	rjmp	.+26     	; 0x12e8 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    12ce:	dc 01       	movw	r26, r24
    12d0:	13 96       	adiw	r26, 0x03	; 3
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <vListInsert+0x22>
    12d4:	df 01       	movw	r26, r30
    12d6:	12 96       	adiw	r26, 0x02	; 2
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	13 97       	sbiw	r26, 0x03	; 3
    12de:	20 81       	ld	r18, Z
    12e0:	31 81       	ldd	r19, Z+1	; 0x01
    12e2:	42 17       	cp	r20, r18
    12e4:	53 07       	cpc	r21, r19
    12e6:	b0 f7       	brcc	.-20     	; 0x12d4 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	ed 91       	ld	r30, X+
    12ec:	fc 91       	ld	r31, X
    12ee:	13 97       	sbiw	r26, 0x03	; 3
    12f0:	ea 83       	std	Y+2, r30	; 0x02
    12f2:	fb 83       	std	Y+3, r31	; 0x03
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    12f4:	c4 83       	std	Z+4, r28	; 0x04
    12f6:	d5 83       	std	Z+5, r29	; 0x05
    pxNewListItem->pxPrevious = pxIterator;
    12f8:	ac 83       	std	Y+4, r26	; 0x04
    12fa:	bd 83       	std	Y+5, r27	; 0x05
    pxIterator->pxNext = pxNewListItem;
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	cd 93       	st	X+, r28
    1300:	dc 93       	st	X, r29
    1302:	13 97       	sbiw	r26, 0x03	; 3

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1304:	88 87       	std	Y+8, r24	; 0x08
    1306:	99 87       	std	Y+9, r25	; 0x09

    ( pxList->uxNumberOfItems )++;
    1308:	fc 01       	movw	r30, r24
    130a:	20 81       	ld	r18, Z
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	20 83       	st	Z, r18
}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    131c:	a0 85       	ldd	r26, Z+8	; 0x08
    131e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1320:	c2 81       	ldd	r28, Z+2	; 0x02
    1322:	d3 81       	ldd	r29, Z+3	; 0x03
    1324:	84 81       	ldd	r24, Z+4	; 0x04
    1326:	95 81       	ldd	r25, Z+5	; 0x05
    1328:	8c 83       	std	Y+4, r24	; 0x04
    132a:	9d 83       	std	Y+5, r25	; 0x05
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    132c:	c4 81       	ldd	r28, Z+4	; 0x04
    132e:	d5 81       	ldd	r29, Z+5	; 0x05
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	9b 83       	std	Y+3, r25	; 0x03

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1338:	11 96       	adiw	r26, 0x01	; 1
    133a:	8d 91       	ld	r24, X+
    133c:	9c 91       	ld	r25, X
    133e:	12 97       	sbiw	r26, 0x02	; 2
    1340:	e8 17       	cp	r30, r24
    1342:	f9 07       	cpc	r31, r25
    1344:	31 f4       	brne	.+12     	; 0x1352 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1346:	84 81       	ldd	r24, Z+4	; 0x04
    1348:	95 81       	ldd	r25, Z+5	; 0x05
    134a:	11 96       	adiw	r26, 0x01	; 1
    134c:	8d 93       	st	X+, r24
    134e:	9c 93       	st	X, r25
    1350:	12 97       	sbiw	r26, 0x02	; 2
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1352:	10 86       	std	Z+8, r1	; 0x08
    1354:	11 86       	std	Z+9, r1	; 0x09
    ( pxList->uxNumberOfItems )--;
    1356:	8c 91       	ld	r24, X
    1358:	81 50       	subi	r24, 0x01	; 1
    135a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    135c:	8c 91       	ld	r24, X
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    136a:	71 e1       	ldi	r23, 0x11	; 17
    136c:	fc 01       	movw	r30, r24
    136e:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	62 e2       	ldi	r22, 0x22	; 34
    1374:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	23 e3       	ldi	r18, 0x33	; 51
    137a:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    137c:	01 2e       	mov	r0, r17
    137e:	00 0c       	add	r0, r0
    1380:	22 0b       	sbc	r18, r18
    1382:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1384:	31 97       	sbiw	r30, 0x01	; 1
    1386:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    138c:	31 97       	sbiw	r30, 0x01	; 1
    138e:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    1390:	31 97       	sbiw	r30, 0x01	; 1
    1392:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	20 e8       	ldi	r18, 0x80	; 128
    1398:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	22 e0       	ldi	r18, 0x02	; 2
    13a2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	23 e0       	ldi	r18, 0x03	; 3
    13a8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	24 e0       	ldi	r18, 0x04	; 4
    13ae:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	25 e0       	ldi	r18, 0x05	; 5
    13b4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	26 e0       	ldi	r18, 0x06	; 6
    13ba:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	27 e0       	ldi	r18, 0x07	; 7
    13c0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    13c2:	31 97       	sbiw	r30, 0x01	; 1
    13c4:	28 e0       	ldi	r18, 0x08	; 8
    13c6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	29 e0       	ldi	r18, 0x09	; 9
    13cc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    13ce:	31 97       	sbiw	r30, 0x01	; 1
    13d0:	20 e1       	ldi	r18, 0x10	; 16
    13d2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	22 e1       	ldi	r18, 0x12	; 18
    13dc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    13de:	31 97       	sbiw	r30, 0x01	; 1
    13e0:	23 e1       	ldi	r18, 0x13	; 19
    13e2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    13e4:	31 97       	sbiw	r30, 0x01	; 1
    13e6:	24 e1       	ldi	r18, 0x14	; 20
    13e8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    13ea:	31 97       	sbiw	r30, 0x01	; 1
    13ec:	25 e1       	ldi	r18, 0x15	; 21
    13ee:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	26 e1       	ldi	r18, 0x16	; 22
    13f4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    13f6:	31 97       	sbiw	r30, 0x01	; 1
    13f8:	27 e1       	ldi	r18, 0x17	; 23
    13fa:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    13fc:	31 97       	sbiw	r30, 0x01	; 1
    13fe:	28 e1       	ldi	r18, 0x18	; 24
    1400:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    1402:	31 97       	sbiw	r30, 0x01	; 1
    1404:	29 e1       	ldi	r18, 0x19	; 25
    1406:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    1408:	31 97       	sbiw	r30, 0x01	; 1
    140a:	20 e2       	ldi	r18, 0x20	; 32
    140c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    140e:	31 97       	sbiw	r30, 0x01	; 1
    1410:	21 e2       	ldi	r18, 0x21	; 33
    1412:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    1414:	31 97       	sbiw	r30, 0x01	; 1
    1416:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	23 e2       	ldi	r18, 0x23	; 35
    141c:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    141e:	31 97       	sbiw	r30, 0x01	; 1
    1420:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    1422:	31 97       	sbiw	r30, 0x01	; 1
    1424:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    1426:	31 97       	sbiw	r30, 0x01	; 1
    1428:	26 e2       	ldi	r18, 0x26	; 38
    142a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	27 e2       	ldi	r18, 0x27	; 39
    1430:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    1432:	31 97       	sbiw	r30, 0x01	; 1
    1434:	28 e2       	ldi	r18, 0x28	; 40
    1436:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    1438:	31 97       	sbiw	r30, 0x01	; 1
    143a:	29 e2       	ldi	r18, 0x29	; 41
    143c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    143e:	31 97       	sbiw	r30, 0x01	; 1
    1440:	20 e3       	ldi	r18, 0x30	; 48
    1442:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    1444:	31 97       	sbiw	r30, 0x01	; 1
    1446:	21 e3       	ldi	r18, 0x31	; 49
    1448:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    144a:	87 97       	sbiw	r24, 0x27	; 39
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	08 95       	ret

00001452 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    1452:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    1454:	e0 e7       	ldi	r30, 0x70	; 112
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	83 81       	ldd	r24, Z+3	; 0x03
    145a:	8a 7f       	andi	r24, 0xFA	; 250
    145c:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    145e:	e0 e0       	ldi	r30, 0x00	; 0
    1460:	f8 e0       	ldi	r31, 0x08	; 8
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	9a ef       	ldi	r25, 0xFA	; 250
    1466:	86 a3       	std	Z+38, r24	; 0x26
    1468:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    146e:	a0 ea       	ldi	r26, 0xA0	; 160
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	12 96       	adiw	r26, 0x02	; 2
    1474:	8c 91       	ld	r24, X
    1476:	12 97       	sbiw	r26, 0x02	; 2
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    147e:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    1480:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1482:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1486:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    148a:	0d 90       	ld	r0, X+
    148c:	0d be       	out	0x3d, r0	; 61
    148e:	0d 90       	ld	r0, X+
    1490:	0e be       	out	0x3e, r0	; 62
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	bf 91       	pop	r27
    149c:	af 91       	pop	r26
    149e:	9f 91       	pop	r25
    14a0:	8f 91       	pop	r24
    14a2:	7f 91       	pop	r23
    14a4:	6f 91       	pop	r22
    14a6:	5f 91       	pop	r21
    14a8:	4f 91       	pop	r20
    14aa:	3f 91       	pop	r19
    14ac:	2f 91       	pop	r18
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	bf 90       	pop	r11
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	7f 90       	pop	r7
    14c4:	6f 90       	pop	r6
    14c6:	5f 90       	pop	r5
    14c8:	4f 90       	pop	r4
    14ca:	3f 90       	pop	r3
    14cc:	2f 90       	pop	r2
    14ce:	1f 90       	pop	r1
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    14d6:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	08 95       	ret

000014dc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	0f 92       	push	r0
    14e4:	1f 92       	push	r1
    14e6:	11 24       	eor	r1, r1
    14e8:	2f 92       	push	r2
    14ea:	3f 92       	push	r3
    14ec:	4f 92       	push	r4
    14ee:	5f 92       	push	r5
    14f0:	6f 92       	push	r6
    14f2:	7f 92       	push	r7
    14f4:	8f 92       	push	r8
    14f6:	9f 92       	push	r9
    14f8:	af 92       	push	r10
    14fa:	bf 92       	push	r11
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1528:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    152c:	0d b6       	in	r0, 0x3d	; 61
    152e:	0d 92       	st	X+, r0
    1530:	0e b6       	in	r0, 0x3e	; 62
    1532:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    1534:	7e d6       	rcall	.+3324   	; 0x2232 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    1536:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    153a:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    153e:	0d 90       	ld	r0, X+
    1540:	0d be       	out	0x3d, r0	; 61
    1542:	0d 90       	ld	r0, X+
    1544:	0e be       	out	0x3e, r0	; 62
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	8f 90       	pop	r8
    1576:	7f 90       	pop	r7
    1578:	6f 90       	pop	r6
    157a:	5f 90       	pop	r5
    157c:	4f 90       	pop	r4
    157e:	3f 90       	pop	r3
    1580:	2f 90       	pop	r2
    1582:	1f 90       	pop	r1
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	0f 90       	pop	r0

    asm volatile ( "ret" );
    158a:	08 95       	ret

0000158c <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	0f 92       	push	r0
    1594:	1f 92       	push	r1
    1596:	11 24       	eor	r1, r1
    1598:	2f 92       	push	r2
    159a:	3f 92       	push	r3
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	2f 93       	push	r18
    15ba:	3f 93       	push	r19
    15bc:	4f 93       	push	r20
    15be:	5f 93       	push	r21
    15c0:	6f 93       	push	r22
    15c2:	7f 93       	push	r23
    15c4:	8f 93       	push	r24
    15c6:	9f 93       	push	r25
    15c8:	af 93       	push	r26
    15ca:	bf 93       	push	r27
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    15d8:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    15dc:	0d b6       	in	r0, 0x3d	; 61
    15de:	0d 92       	st	X+, r0
    15e0:	0e b6       	in	r0, 0x3e	; 62
    15e2:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    15e4:	e1 d4       	rcall	.+2498   	; 0x1fa8 <xTaskIncrementTick>
    15e6:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    15e8:	24 d6       	rcall	.+3144   	; 0x2232 <vTaskSwitchContext>
    15ea:	a0 91 b5 22 	lds	r26, 0x22B5	; 0x8022b5 <pxCurrentTCB>
        }
        portRESTORE_CONTEXT();
    15ee:	b0 91 b6 22 	lds	r27, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    15f2:	0d 90       	ld	r0, X+
    15f4:	0d be       	out	0x3d, r0	; 61
    15f6:	0d 90       	ld	r0, X+
    15f8:	0e be       	out	0x3e, r0	; 62
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	bf 90       	pop	r11
    1624:	af 90       	pop	r10
    1626:	9f 90       	pop	r9
    1628:	8f 90       	pop	r8
    162a:	7f 90       	pop	r7
    162c:	6f 90       	pop	r6
    162e:	5f 90       	pop	r5
    1630:	4f 90       	pop	r4
    1632:	3f 90       	pop	r3
    1634:	2f 90       	pop	r2
    1636:	1f 90       	pop	r1
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	18 95       	reti

00001640 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
    1646:	a0 d4       	rcall	.+2368   	; 0x1f88 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    1648:	ce 01       	movw	r24, r28
    164a:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    164e:	ec 01       	movw	r28, r24
    1650:	63 d5       	rcall	.+2758   	; 0x2118 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
    1652:	ce 01       	movw	r24, r28
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    if( pv )
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	31 f0       	breq	.+12     	; 0x166e <vPortFree+0x14>
    1662:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1664:	91 d4       	rcall	.+2338   	; 0x1f88 <vTaskSuspendAll>
        {
            free( pv );
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    166c:	55 d5       	rcall	.+2730   	; 0x2118 <xTaskResumeAll>
    }
}
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	0f 92       	push	r0
    167a:	fc 01       	movw	r30, r24
    167c:	92 8d       	ldd	r25, Z+26	; 0x1a
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	91 11       	cpse	r25, r1
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	08 95       	ret

0000168a <prvCopyDataToQueue>:
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	04 2f       	mov	r16, r20
    1696:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1698:	4c 8d       	ldd	r20, Y+28	; 0x1c
    169a:	44 23       	and	r20, r20
    169c:	b9 f1       	breq	.+110    	; 0x170c <prvCopyDataToQueue+0x82>
    169e:	01 11       	cpse	r16, r1
    16a0:	16 c0       	rjmp	.+44     	; 0x16ce <prvCopyDataToQueue+0x44>
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	9b 81       	ldd	r25, Y+3	; 0x03
    16a8:	0e 94 3b 18 	call	0x3076	; 0x3076 <memcpy>
    16ac:	2c 8d       	ldd	r18, Y+28	; 0x1c
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	82 0f       	add	r24, r18
    16b4:	91 1d       	adc	r25, r1
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	2c 81       	ldd	r18, Y+4	; 0x04
    16bc:	3d 81       	ldd	r19, Y+5	; 0x05
    16be:	82 17       	cp	r24, r18
    16c0:	93 07       	cpc	r25, r19
    16c2:	20 f1       	brcs	.+72     	; 0x170c <prvCopyDataToQueue+0x82>
    16c4:	88 81       	ld	r24, Y
    16c6:	99 81       	ldd	r25, Y+1	; 0x01
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	9b 83       	std	Y+3, r25	; 0x03
    16cc:	1f c0       	rjmp	.+62     	; 0x170c <prvCopyDataToQueue+0x82>
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	9f 81       	ldd	r25, Y+7	; 0x07
    16d4:	0e 94 3b 18 	call	0x3076	; 0x3076 <memcpy>
    16d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	91 95       	neg	r25
    16de:	81 95       	neg	r24
    16e0:	91 09       	sbc	r25, r1
    16e2:	2e 81       	ldd	r18, Y+6	; 0x06
    16e4:	3f 81       	ldd	r19, Y+7	; 0x07
    16e6:	28 0f       	add	r18, r24
    16e8:	39 1f       	adc	r19, r25
    16ea:	2e 83       	std	Y+6, r18	; 0x06
    16ec:	3f 83       	std	Y+7, r19	; 0x07
    16ee:	48 81       	ld	r20, Y
    16f0:	59 81       	ldd	r21, Y+1	; 0x01
    16f2:	24 17       	cp	r18, r20
    16f4:	35 07       	cpc	r19, r21
    16f6:	30 f4       	brcc	.+12     	; 0x1704 <prvCopyDataToQueue+0x7a>
    16f8:	2c 81       	ldd	r18, Y+4	; 0x04
    16fa:	3d 81       	ldd	r19, Y+5	; 0x05
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	8e 83       	std	Y+6, r24	; 0x06
    1702:	9f 83       	std	Y+7, r25	; 0x07
    1704:	02 30       	cpi	r16, 0x02	; 2
    1706:	11 f4       	brne	.+4      	; 0x170c <prvCopyDataToQueue+0x82>
    1708:	11 11       	cpse	r17, r1
    170a:	11 50       	subi	r17, 0x01	; 1
    170c:	1f 5f       	subi	r17, 0xFF	; 255
    170e:	1a 8f       	std	Y+26, r17	; 0x1a
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <prvCopyDataFromQueue>:
    171c:	fc 01       	movw	r30, r24
    171e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1720:	44 23       	and	r20, r20
    1722:	a9 f0       	breq	.+42     	; 0x174e <prvCopyDataFromQueue+0x32>
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	26 81       	ldd	r18, Z+6	; 0x06
    1728:	37 81       	ldd	r19, Z+7	; 0x07
    172a:	24 0f       	add	r18, r20
    172c:	35 1f       	adc	r19, r21
    172e:	26 83       	std	Z+6, r18	; 0x06
    1730:	37 83       	std	Z+7, r19	; 0x07
    1732:	84 81       	ldd	r24, Z+4	; 0x04
    1734:	95 81       	ldd	r25, Z+5	; 0x05
    1736:	28 17       	cp	r18, r24
    1738:	39 07       	cpc	r19, r25
    173a:	20 f0       	brcs	.+8      	; 0x1744 <prvCopyDataFromQueue+0x28>
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	86 83       	std	Z+6, r24	; 0x06
    1742:	97 83       	std	Z+7, r25	; 0x07
    1744:	cb 01       	movw	r24, r22
    1746:	66 81       	ldd	r22, Z+6	; 0x06
    1748:	77 81       	ldd	r23, Z+7	; 0x07
    174a:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <memcpy>
    174e:	08 95       	ret

00001750 <prvUnlockQueue>:
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	8c 01       	movw	r16, r24
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	0f 92       	push	r0
    1762:	fc 01       	movw	r30, r24
    1764:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1766:	1c 16       	cp	r1, r28
    1768:	9c f4       	brge	.+38     	; 0x1790 <prvUnlockQueue+0x40>
    176a:	81 89       	ldd	r24, Z+17	; 0x11
    176c:	81 11       	cpse	r24, r1
    176e:	06 c0       	rjmp	.+12     	; 0x177c <prvUnlockQueue+0x2c>
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <prvUnlockQueue+0x40>
    1772:	f8 01       	movw	r30, r16
    1774:	81 89       	ldd	r24, Z+17	; 0x11
    1776:	81 11       	cpse	r24, r1
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <prvUnlockQueue+0x34>
    177a:	0a c0       	rjmp	.+20     	; 0x1790 <prvUnlockQueue+0x40>
    177c:	78 01       	movw	r14, r16
    177e:	f1 e1       	ldi	r31, 0x11	; 17
    1780:	ef 0e       	add	r14, r31
    1782:	f1 1c       	adc	r15, r1
    1784:	c7 01       	movw	r24, r14
    1786:	e4 d5       	rcall	.+3016   	; 0x2350 <xTaskRemoveFromEventList>
    1788:	81 11       	cpse	r24, r1
    178a:	65 d6       	rcall	.+3274   	; 0x2456 <vTaskMissedYield>
    178c:	c1 50       	subi	r28, 0x01	; 1
    178e:	89 f7       	brne	.-30     	; 0x1772 <prvUnlockQueue+0x22>
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	f8 01       	movw	r30, r16
    1794:	86 8f       	std	Z+30, r24	; 0x1e
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	0f 92       	push	r0
    17a0:	c5 8d       	ldd	r28, Z+29	; 0x1d
    17a2:	1c 16       	cp	r1, r28
    17a4:	9c f4       	brge	.+38     	; 0x17cc <prvUnlockQueue+0x7c>
    17a6:	80 85       	ldd	r24, Z+8	; 0x08
    17a8:	81 11       	cpse	r24, r1
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <prvUnlockQueue+0x68>
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <prvUnlockQueue+0x7c>
    17ae:	f8 01       	movw	r30, r16
    17b0:	80 85       	ldd	r24, Z+8	; 0x08
    17b2:	81 11       	cpse	r24, r1
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <prvUnlockQueue+0x70>
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <prvUnlockQueue+0x7c>
    17b8:	78 01       	movw	r14, r16
    17ba:	f8 e0       	ldi	r31, 0x08	; 8
    17bc:	ef 0e       	add	r14, r31
    17be:	f1 1c       	adc	r15, r1
    17c0:	c7 01       	movw	r24, r14
    17c2:	c6 d5       	rcall	.+2956   	; 0x2350 <xTaskRemoveFromEventList>
    17c4:	81 11       	cpse	r24, r1
    17c6:	47 d6       	rcall	.+3214   	; 0x2456 <vTaskMissedYield>
    17c8:	c1 50       	subi	r28, 0x01	; 1
    17ca:	89 f7       	brne	.-30     	; 0x17ae <prvUnlockQueue+0x5e>
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
    17ce:	f8 01       	movw	r30, r16
    17d0:	85 8f       	std	Z+29, r24	; 0x1d
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	08 95       	ret

000017e2 <xQueueGenericReset>:
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	ec 01       	movw	r28, r24
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	0f 92       	push	r0
    17ee:	e8 81       	ld	r30, Y
    17f0:	f9 81       	ldd	r31, Y+1	; 0x01
    17f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	82 9f       	mul	r24, r18
    17fc:	a0 01       	movw	r20, r0
    17fe:	83 9f       	mul	r24, r19
    1800:	50 0d       	add	r21, r0
    1802:	92 9f       	mul	r25, r18
    1804:	50 0d       	add	r21, r0
    1806:	11 24       	eor	r1, r1
    1808:	4e 0f       	add	r20, r30
    180a:	5f 1f       	adc	r21, r31
    180c:	4c 83       	std	Y+4, r20	; 0x04
    180e:	5d 83       	std	Y+5, r21	; 0x05
    1810:	1a 8e       	std	Y+26, r1	; 0x1a
    1812:	ea 83       	std	Y+2, r30	; 0x02
    1814:	fb 83       	std	Y+3, r31	; 0x03
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	82 9f       	mul	r24, r18
    181a:	a0 01       	movw	r20, r0
    181c:	83 9f       	mul	r24, r19
    181e:	50 0d       	add	r21, r0
    1820:	92 9f       	mul	r25, r18
    1822:	50 0d       	add	r21, r0
    1824:	11 24       	eor	r1, r1
    1826:	cf 01       	movw	r24, r30
    1828:	84 0f       	add	r24, r20
    182a:	95 1f       	adc	r25, r21
    182c:	8e 83       	std	Y+6, r24	; 0x06
    182e:	9f 83       	std	Y+7, r25	; 0x07
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	8d 8f       	std	Y+29, r24	; 0x1d
    1834:	8e 8f       	std	Y+30, r24	; 0x1e
    1836:	61 11       	cpse	r22, r1
    1838:	0a c0       	rjmp	.+20     	; 0x184e <xQueueGenericReset+0x6c>
    183a:	88 85       	ldd	r24, Y+8	; 0x08
    183c:	88 23       	and	r24, r24
    183e:	69 f0       	breq	.+26     	; 0x185a <xQueueGenericReset+0x78>
    1840:	ce 01       	movw	r24, r28
    1842:	08 96       	adiw	r24, 0x08	; 8
    1844:	85 d5       	rcall	.+2826   	; 0x2350 <xTaskRemoveFromEventList>
    1846:	88 23       	and	r24, r24
    1848:	41 f0       	breq	.+16     	; 0x185a <xQueueGenericReset+0x78>
    184a:	48 de       	rcall	.-880    	; 0x14dc <vPortYield>
    184c:	06 c0       	rjmp	.+12     	; 0x185a <xQueueGenericReset+0x78>
    184e:	ce 01       	movw	r24, r28
    1850:	08 96       	adiw	r24, 0x08	; 8
    1852:	fd dc       	rcall	.-1542   	; 0x124e <vListInitialise>
    1854:	ce 01       	movw	r24, r28
    1856:	41 96       	adiw	r24, 0x11	; 17
    1858:	fa dc       	rcall	.-1548   	; 0x124e <vListInitialise>
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <xQueueGenericCreate>:
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	08 2f       	mov	r16, r24
    1870:	16 2f       	mov	r17, r22
    1872:	86 9f       	mul	r24, r22
    1874:	c0 01       	movw	r24, r0
    1876:	11 24       	eor	r1, r1
    1878:	4f 96       	adiw	r24, 0x1f	; 31
    187a:	e2 de       	rcall	.-572    	; 0x1640 <pvPortMalloc>
    187c:	ec 01       	movw	r28, r24
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f0       	breq	.+26     	; 0x189c <xQueueGenericCreate+0x36>
    1882:	11 11       	cpse	r17, r1
    1884:	03 c0       	rjmp	.+6      	; 0x188c <xQueueGenericCreate+0x26>
    1886:	88 83       	st	Y, r24
    1888:	99 83       	std	Y+1, r25	; 0x01
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <xQueueGenericCreate+0x2c>
    188c:	4f 96       	adiw	r24, 0x1f	; 31
    188e:	88 83       	st	Y, r24
    1890:	99 83       	std	Y+1, r25	; 0x01
    1892:	0b 8f       	std	Y+27, r16	; 0x1b
    1894:	1c 8f       	std	Y+28, r17	; 0x1c
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	ce 01       	movw	r24, r28
    189a:	a3 df       	rcall	.-186    	; 0x17e2 <xQueueGenericReset>
    189c:	ce 01       	movw	r24, r28
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <xQueueGenericSend>:
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	25 97       	sbiw	r28, 0x05	; 5
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	8c 01       	movw	r16, r24
    18c8:	6b 01       	movw	r12, r22
    18ca:	4c 83       	std	Y+4, r20	; 0x04
    18cc:	5d 83       	std	Y+5, r21	; 0x05
    18ce:	a2 2e       	mov	r10, r18
    18d0:	b1 2c       	mov	r11, r1
    18d2:	7c 01       	movw	r14, r24
    18d4:	88 e0       	ldi	r24, 0x08	; 8
    18d6:	e8 0e       	add	r14, r24
    18d8:	f1 1c       	adc	r15, r1
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	0f 92       	push	r0
    18e0:	f8 01       	movw	r30, r16
    18e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    18e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    18e6:	98 17       	cp	r25, r24
    18e8:	18 f0       	brcs	.+6      	; 0x18f0 <xQueueGenericSend+0x48>
    18ea:	f2 e0       	ldi	r31, 0x02	; 2
    18ec:	af 12       	cpse	r10, r31
    18ee:	15 c0       	rjmp	.+42     	; 0x191a <xQueueGenericSend+0x72>
    18f0:	4a 2d       	mov	r20, r10
    18f2:	b6 01       	movw	r22, r12
    18f4:	c8 01       	movw	r24, r16
    18f6:	c9 de       	rcall	.-622    	; 0x168a <prvCopyDataToQueue>
    18f8:	f8 01       	movw	r30, r16
    18fa:	91 89       	ldd	r25, Z+17	; 0x11
    18fc:	99 23       	and	r25, r25
    18fe:	39 f0       	breq	.+14     	; 0x190e <xQueueGenericSend+0x66>
    1900:	c8 01       	movw	r24, r16
    1902:	41 96       	adiw	r24, 0x11	; 17
    1904:	25 d5       	rcall	.+2634   	; 0x2350 <xTaskRemoveFromEventList>
    1906:	88 23       	and	r24, r24
    1908:	21 f0       	breq	.+8      	; 0x1912 <xQueueGenericSend+0x6a>
    190a:	e8 dd       	rcall	.-1072   	; 0x14dc <vPortYield>
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <xQueueGenericSend+0x6a>
    190e:	81 11       	cpse	r24, r1
    1910:	e5 dd       	rcall	.-1078   	; 0x14dc <vPortYield>
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	46 c0       	rjmp	.+140    	; 0x19a6 <xQueueGenericSend+0xfe>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	89 2b       	or	r24, r25
    1920:	21 f4       	brne	.+8      	; 0x192a <xQueueGenericSend+0x82>
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	3e c0       	rjmp	.+124    	; 0x19a6 <xQueueGenericSend+0xfe>
    192a:	b1 10       	cpse	r11, r1
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <xQueueGenericSend+0x90>
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	56 d5       	rcall	.+2732   	; 0x23e0 <vTaskInternalSetTimeOutState>
    1934:	bb 24       	eor	r11, r11
    1936:	b3 94       	inc	r11
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	25 d3       	rcall	.+1610   	; 0x1f88 <vTaskSuspendAll>
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	0f 92       	push	r0
    1944:	f8 01       	movw	r30, r16
    1946:	85 8d       	ldd	r24, Z+29	; 0x1d
    1948:	8f 3f       	cpi	r24, 0xFF	; 255
    194a:	09 f4       	brne	.+2      	; 0x194e <xQueueGenericSend+0xa6>
    194c:	15 8e       	std	Z+29, r1	; 0x1d
    194e:	f8 01       	movw	r30, r16
    1950:	86 8d       	ldd	r24, Z+30	; 0x1e
    1952:	8f 3f       	cpi	r24, 0xFF	; 255
    1954:	09 f4       	brne	.+2      	; 0x1958 <xQueueGenericSend+0xb0>
    1956:	16 8e       	std	Z+30, r1	; 0x1e
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	be 01       	movw	r22, r28
    195e:	6c 5f       	subi	r22, 0xFC	; 252
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	ce 01       	movw	r24, r28
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	47 d5       	rcall	.+2702   	; 0x23f6 <xTaskCheckForTimeOut>
    1968:	81 11       	cpse	r24, r1
    196a:	19 c0       	rjmp	.+50     	; 0x199e <xQueueGenericSend+0xf6>
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	0f 92       	push	r0
    1972:	f8 01       	movw	r30, r16
    1974:	92 8d       	ldd	r25, Z+26	; 0x1a
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	83 8d       	ldd	r24, Z+27	; 0x1b
    197c:	98 13       	cpse	r25, r24
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <xQueueGenericSend+0xee>
    1980:	6c 81       	ldd	r22, Y+4	; 0x04
    1982:	7d 81       	ldd	r23, Y+5	; 0x05
    1984:	c7 01       	movw	r24, r14
    1986:	bb d4       	rcall	.+2422   	; 0x22fe <vTaskPlaceOnEventList>
    1988:	c8 01       	movw	r24, r16
    198a:	e2 de       	rcall	.-572    	; 0x1750 <prvUnlockQueue>
    198c:	c5 d3       	rcall	.+1930   	; 0x2118 <xTaskResumeAll>
    198e:	81 11       	cpse	r24, r1
    1990:	a4 cf       	rjmp	.-184    	; 0x18da <xQueueGenericSend+0x32>
    1992:	a4 dd       	rcall	.-1208   	; 0x14dc <vPortYield>
    1994:	a2 cf       	rjmp	.-188    	; 0x18da <xQueueGenericSend+0x32>
    1996:	c8 01       	movw	r24, r16
    1998:	db de       	rcall	.-586    	; 0x1750 <prvUnlockQueue>
    199a:	be d3       	rcall	.+1916   	; 0x2118 <xTaskResumeAll>
    199c:	9e cf       	rjmp	.-196    	; 0x18da <xQueueGenericSend+0x32>
    199e:	c8 01       	movw	r24, r16
    19a0:	d7 de       	rcall	.-594    	; 0x1750 <prvUnlockQueue>
    19a2:	ba d3       	rcall	.+1908   	; 0x2118 <xTaskResumeAll>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	25 96       	adiw	r28, 0x05	; 5
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	bf 90       	pop	r11
    19be:	af 90       	pop	r10
    19c0:	08 95       	ret

000019c2 <xQueueGenericSendFromISR>:
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	8a 01       	movw	r16, r20
    19d0:	fc 01       	movw	r30, r24
    19d2:	52 8d       	ldd	r21, Z+26	; 0x1a
    19d4:	33 8d       	ldd	r19, Z+27	; 0x1b
    19d6:	53 17       	cp	r21, r19
    19d8:	10 f0       	brcs	.+4      	; 0x19de <xQueueGenericSendFromISR+0x1c>
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	f1 f4       	brne	.+60     	; 0x1a1a <xQueueGenericSendFromISR+0x58>
    19de:	42 2f       	mov	r20, r18
    19e0:	78 01       	movw	r14, r16
    19e2:	ec 01       	movw	r28, r24
    19e4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    19e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19e8:	ce 01       	movw	r24, r28
    19ea:	4f de       	rcall	.-866    	; 0x168a <prvCopyDataToQueue>
    19ec:	1f 3f       	cpi	r17, 0xFF	; 255
    19ee:	79 f4       	brne	.+30     	; 0x1a0e <xQueueGenericSendFromISR+0x4c>
    19f0:	89 89       	ldd	r24, Y+17	; 0x11
    19f2:	88 23       	and	r24, r24
    19f4:	a1 f0       	breq	.+40     	; 0x1a1e <xQueueGenericSendFromISR+0x5c>
    19f6:	ce 01       	movw	r24, r28
    19f8:	41 96       	adiw	r24, 0x11	; 17
    19fa:	aa d4       	rcall	.+2388   	; 0x2350 <xTaskRemoveFromEventList>
    19fc:	88 23       	and	r24, r24
    19fe:	89 f0       	breq	.+34     	; 0x1a22 <xQueueGenericSendFromISR+0x60>
    1a00:	e1 14       	cp	r14, r1
    1a02:	f1 04       	cpc	r15, r1
    1a04:	81 f0       	breq	.+32     	; 0x1a26 <xQueueGenericSendFromISR+0x64>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	f7 01       	movw	r30, r14
    1a0a:	80 83       	st	Z, r24
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <xQueueGenericSendFromISR+0x66>
    1a0e:	ff 24       	eor	r15, r15
    1a10:	f3 94       	inc	r15
    1a12:	f1 0e       	add	r15, r17
    1a14:	fe 8e       	std	Y+30, r15	; 0x1e
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <xQueueGenericSendFromISR+0x66>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <xQueueGenericSendFromISR+0x66>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <xQueueGenericSendFromISR+0x66>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <xQueueGenericSendFromISR+0x66>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	08 95       	ret

00001a36 <xQueueReceive>:
    1a36:	af 92       	push	r10
    1a38:	bf 92       	push	r11
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	25 97       	sbiw	r28, 0x05	; 5
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	8c 01       	movw	r16, r24
    1a56:	5b 01       	movw	r10, r22
    1a58:	4c 83       	std	Y+4, r20	; 0x04
    1a5a:	5d 83       	std	Y+5, r21	; 0x05
    1a5c:	e1 2c       	mov	r14, r1
    1a5e:	6c 01       	movw	r12, r24
    1a60:	81 e1       	ldi	r24, 0x11	; 17
    1a62:	c8 0e       	add	r12, r24
    1a64:	d1 1c       	adc	r13, r1
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	0f 92       	push	r0
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1a70:	ff 20       	and	r15, r15
    1a72:	91 f0       	breq	.+36     	; 0x1a98 <xQueueReceive+0x62>
    1a74:	b5 01       	movw	r22, r10
    1a76:	c8 01       	movw	r24, r16
    1a78:	51 de       	rcall	.-862    	; 0x171c <prvCopyDataFromQueue>
    1a7a:	fa 94       	dec	r15
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	f2 8e       	std	Z+26, r15	; 0x1a
    1a80:	80 85       	ldd	r24, Z+8	; 0x08
    1a82:	88 23       	and	r24, r24
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <xQueueReceive+0x5a>
    1a86:	c8 01       	movw	r24, r16
    1a88:	08 96       	adiw	r24, 0x08	; 8
    1a8a:	62 d4       	rcall	.+2244   	; 0x2350 <xTaskRemoveFromEventList>
    1a8c:	81 11       	cpse	r24, r1
    1a8e:	26 dd       	rcall	.-1460   	; 0x14dc <vPortYield>
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	45 c0       	rjmp	.+138    	; 0x1b22 <xQueueReceive+0xec>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	89 2b       	or	r24, r25
    1a9e:	21 f4       	brne	.+8      	; 0x1aa8 <xQueueReceive+0x72>
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	3d c0       	rjmp	.+122    	; 0x1b22 <xQueueReceive+0xec>
    1aa8:	e1 10       	cpse	r14, r1
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <xQueueReceive+0x80>
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	97 d4       	rcall	.+2350   	; 0x23e0 <vTaskInternalSetTimeOutState>
    1ab2:	ee 24       	eor	r14, r14
    1ab4:	e3 94       	inc	r14
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	66 d2       	rcall	.+1228   	; 0x1f88 <vTaskSuspendAll>
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	0f 92       	push	r0
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xQueueReceive+0x96>
    1aca:	15 8e       	std	Z+29, r1	; 0x1d
    1acc:	f8 01       	movw	r30, r16
    1ace:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <xQueueReceive+0xa0>
    1ad4:	16 8e       	std	Z+30, r1	; 0x1e
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	be 01       	movw	r22, r28
    1adc:	6c 5f       	subi	r22, 0xFC	; 252
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	88 d4       	rcall	.+2320   	; 0x23f6 <xTaskCheckForTimeOut>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <xQueueReceive+0xda>
    1aea:	c8 01       	movw	r24, r16
    1aec:	c3 dd       	rcall	.-1146   	; 0x1674 <prvIsQueueEmpty>
    1aee:	88 23       	and	r24, r24
    1af0:	59 f0       	breq	.+22     	; 0x1b08 <xQueueReceive+0xd2>
    1af2:	6c 81       	ldd	r22, Y+4	; 0x04
    1af4:	7d 81       	ldd	r23, Y+5	; 0x05
    1af6:	c6 01       	movw	r24, r12
    1af8:	02 d4       	rcall	.+2052   	; 0x22fe <vTaskPlaceOnEventList>
    1afa:	c8 01       	movw	r24, r16
    1afc:	29 de       	rcall	.-942    	; 0x1750 <prvUnlockQueue>
    1afe:	0c d3       	rcall	.+1560   	; 0x2118 <xTaskResumeAll>
    1b00:	81 11       	cpse	r24, r1
    1b02:	b1 cf       	rjmp	.-158    	; 0x1a66 <xQueueReceive+0x30>
    1b04:	eb dc       	rcall	.-1578   	; 0x14dc <vPortYield>
    1b06:	af cf       	rjmp	.-162    	; 0x1a66 <xQueueReceive+0x30>
    1b08:	c8 01       	movw	r24, r16
    1b0a:	22 de       	rcall	.-956    	; 0x1750 <prvUnlockQueue>
    1b0c:	05 d3       	rcall	.+1546   	; 0x2118 <xTaskResumeAll>
    1b0e:	ab cf       	rjmp	.-170    	; 0x1a66 <xQueueReceive+0x30>
    1b10:	c8 01       	movw	r24, r16
    1b12:	1e de       	rcall	.-964    	; 0x1750 <prvUnlockQueue>
    1b14:	01 d3       	rcall	.+1538   	; 0x2118 <xTaskResumeAll>
    1b16:	c8 01       	movw	r24, r16
    1b18:	ad dd       	rcall	.-1190   	; 0x1674 <prvIsQueueEmpty>
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <xQueueReceive+0xea>
    1b1e:	a3 cf       	rjmp	.-186    	; 0x1a66 <xQueueReceive+0x30>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	25 96       	adiw	r28, 0x05	; 5
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	af 90       	pop	r10
    1b3c:	08 95       	ret

00001b3e <xQueueSemaphoreTake>:
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	25 97       	sbiw	r28, 0x05	; 5
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	8c 01       	movw	r16, r24
    1b58:	6c 83       	std	Y+4, r22	; 0x04
    1b5a:	7d 83       	std	Y+5, r23	; 0x05
    1b5c:	d1 2c       	mov	r13, r1
    1b5e:	7c 01       	movw	r14, r24
    1b60:	81 e1       	ldi	r24, 0x11	; 17
    1b62:	e8 0e       	add	r14, r24
    1b64:	f1 1c       	adc	r15, r1
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	0f 92       	push	r0
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b70:	88 23       	and	r24, r24
    1b72:	71 f0       	breq	.+28     	; 0x1b90 <xQueueSemaphoreTake+0x52>
    1b74:	81 50       	subi	r24, 0x01	; 1
    1b76:	82 8f       	std	Z+26, r24	; 0x1a
    1b78:	80 85       	ldd	r24, Z+8	; 0x08
    1b7a:	88 23       	and	r24, r24
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <xQueueSemaphoreTake+0x4a>
    1b7e:	c8 01       	movw	r24, r16
    1b80:	08 96       	adiw	r24, 0x08	; 8
    1b82:	e6 d3       	rcall	.+1996   	; 0x2350 <xTaskRemoveFromEventList>
    1b84:	81 11       	cpse	r24, r1
    1b86:	aa dc       	rcall	.-1708   	; 0x14dc <vPortYield>
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	45 c0       	rjmp	.+138    	; 0x1c1a <xQueueSemaphoreTake+0xdc>
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	89 2b       	or	r24, r25
    1b96:	21 f4       	brne	.+8      	; 0x1ba0 <xQueueSemaphoreTake+0x62>
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	3d c0       	rjmp	.+122    	; 0x1c1a <xQueueSemaphoreTake+0xdc>
    1ba0:	d1 10       	cpse	r13, r1
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <xQueueSemaphoreTake+0x70>
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	1b d4       	rcall	.+2102   	; 0x23e0 <vTaskInternalSetTimeOutState>
    1baa:	dd 24       	eor	r13, r13
    1bac:	d3 94       	inc	r13
    1bae:	0f 90       	pop	r0
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	ea d1       	rcall	.+980    	; 0x1f88 <vTaskSuspendAll>
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	0f 92       	push	r0
    1bba:	f8 01       	movw	r30, r16
    1bbc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <xQueueSemaphoreTake+0x86>
    1bc2:	15 8e       	std	Z+29, r1	; 0x1d
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bca:	09 f4       	brne	.+2      	; 0x1bce <xQueueSemaphoreTake+0x90>
    1bcc:	16 8e       	std	Z+30, r1	; 0x1e
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	be 01       	movw	r22, r28
    1bd4:	6c 5f       	subi	r22, 0xFC	; 252
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	0c d4       	rcall	.+2072   	; 0x23f6 <xTaskCheckForTimeOut>
    1bde:	81 11       	cpse	r24, r1
    1be0:	13 c0       	rjmp	.+38     	; 0x1c08 <xQueueSemaphoreTake+0xca>
    1be2:	c8 01       	movw	r24, r16
    1be4:	47 dd       	rcall	.-1394   	; 0x1674 <prvIsQueueEmpty>
    1be6:	88 23       	and	r24, r24
    1be8:	59 f0       	breq	.+22     	; 0x1c00 <xQueueSemaphoreTake+0xc2>
    1bea:	6c 81       	ldd	r22, Y+4	; 0x04
    1bec:	7d 81       	ldd	r23, Y+5	; 0x05
    1bee:	c7 01       	movw	r24, r14
    1bf0:	86 d3       	rcall	.+1804   	; 0x22fe <vTaskPlaceOnEventList>
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	ad dd       	rcall	.-1190   	; 0x1750 <prvUnlockQueue>
    1bf6:	90 d2       	rcall	.+1312   	; 0x2118 <xTaskResumeAll>
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	b5 cf       	rjmp	.-150    	; 0x1b66 <xQueueSemaphoreTake+0x28>
    1bfc:	6f dc       	rcall	.-1826   	; 0x14dc <vPortYield>
    1bfe:	b3 cf       	rjmp	.-154    	; 0x1b66 <xQueueSemaphoreTake+0x28>
    1c00:	c8 01       	movw	r24, r16
    1c02:	a6 dd       	rcall	.-1204   	; 0x1750 <prvUnlockQueue>
    1c04:	89 d2       	rcall	.+1298   	; 0x2118 <xTaskResumeAll>
    1c06:	af cf       	rjmp	.-162    	; 0x1b66 <xQueueSemaphoreTake+0x28>
    1c08:	c8 01       	movw	r24, r16
    1c0a:	a2 dd       	rcall	.-1212   	; 0x1750 <prvUnlockQueue>
    1c0c:	85 d2       	rcall	.+1290   	; 0x2118 <xTaskResumeAll>
    1c0e:	c8 01       	movw	r24, r16
    1c10:	31 dd       	rcall	.-1438   	; 0x1674 <prvIsQueueEmpty>
    1c12:	88 23       	and	r24, r24
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <xQueueSemaphoreTake+0xda>
    1c16:	a7 cf       	rjmp	.-178    	; 0x1b66 <xQueueSemaphoreTake+0x28>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	25 96       	adiw	r28, 0x05	; 5
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	08 95       	ret

00001c30 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <vQueueWaitForMessageRestricted+0x14>
    1c42:	1d 8e       	std	Y+29, r1	; 0x1d
    1c44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c46:	8f 3f       	cpi	r24, 0xFF	; 255
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <vQueueWaitForMessageRestricted+0x1c>
    1c4a:	1e 8e       	std	Y+30, r1	; 0x1e
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c52:	81 11       	cpse	r24, r1
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1c56:	ce 01       	movw	r24, r28
    1c58:	41 96       	adiw	r24, 0x11	; 17
    1c5a:	62 d3       	rcall	.+1732   	; 0x2320 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	78 dd       	rcall	.-1296   	; 0x1750 <prvUnlockQueue>
    }
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    1c66:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <pxDelayedTaskList>
    1c6a:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <pxDelayedTaskList+0x1>
    1c6e:	80 81       	ld	r24, Z
    1c70:	81 11       	cpse	r24, r1
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <prvResetNextTaskUnblockTime+0x1c>
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	9f ef       	ldi	r25, 0xFF	; 255
    1c78:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <xNextTaskUnblockTime>
    1c7c:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <xNextTaskUnblockTime+0x1>
    1c80:	08 95       	ret
    1c82:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <pxDelayedTaskList>
    1c86:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <pxDelayedTaskList+0x1>
    1c8a:	05 80       	ldd	r0, Z+5	; 0x05
    1c8c:	f6 81       	ldd	r31, Z+6	; 0x06
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <xNextTaskUnblockTime>
    1c98:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <xNextTaskUnblockTime+0x1>
    1c9c:	08 95       	ret

00001c9e <prvIdleTask>:
    1c9e:	c8 e8       	ldi	r28, 0x88	; 136
    1ca0:	d2 e2       	ldi	r29, 0x22	; 34
    1ca2:	88 81       	ld	r24, Y
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	e8 f3       	brcs	.-6      	; 0x1ca2 <prvIdleTask+0x4>
    1ca8:	19 dc       	rcall	.-1998   	; 0x14dc <vPortYield>
    1caa:	fb cf       	rjmp	.-10     	; 0x1ca2 <prvIdleTask+0x4>

00001cac <prvAddCurrentTaskToDelayedList>:
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	00 91 66 22 	lds	r16, 0x2266	; 0x802266 <xTickCount>
    1cba:	10 91 67 22 	lds	r17, 0x2267	; 0x802267 <xTickCount+0x1>
    1cbe:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1cc2:	90 91 b6 22 	lds	r25, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1cc6:	02 96       	adiw	r24, 0x02	; 2
    1cc8:	26 db       	rcall	.-2484   	; 0x1316 <uxListRemove>
    1cca:	c0 0f       	add	r28, r16
    1ccc:	d1 1f       	adc	r29, r17
    1cce:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1cd2:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1cd6:	c2 83       	std	Z+2, r28	; 0x02
    1cd8:	d3 83       	std	Z+3, r29	; 0x03
    1cda:	c0 17       	cp	r28, r16
    1cdc:	d1 07       	cpc	r29, r17
    1cde:	60 f4       	brcc	.+24     	; 0x1cf8 <prvAddCurrentTaskToDelayedList+0x4c>
    1ce0:	60 91 b5 22 	lds	r22, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1ce4:	70 91 b6 22 	lds	r23, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1ce8:	80 91 72 22 	lds	r24, 0x2272	; 0x802272 <pxOverflowDelayedTaskList>
    1cec:	90 91 73 22 	lds	r25, 0x2273	; 0x802273 <pxOverflowDelayedTaskList+0x1>
    1cf0:	6e 5f       	subi	r22, 0xFE	; 254
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	df da       	rcall	.-2626   	; 0x12b4 <vListInsert>
    1cf6:	16 c0       	rjmp	.+44     	; 0x1d24 <prvAddCurrentTaskToDelayedList+0x78>
    1cf8:	60 91 b5 22 	lds	r22, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1cfc:	70 91 b6 22 	lds	r23, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1d00:	80 91 74 22 	lds	r24, 0x2274	; 0x802274 <pxDelayedTaskList>
    1d04:	90 91 75 22 	lds	r25, 0x2275	; 0x802275 <pxDelayedTaskList+0x1>
    1d08:	6e 5f       	subi	r22, 0xFE	; 254
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	d3 da       	rcall	.-2650   	; 0x12b4 <vListInsert>
    1d0e:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xNextTaskUnblockTime>
    1d12:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xNextTaskUnblockTime+0x1>
    1d16:	c8 17       	cp	r28, r24
    1d18:	d9 07       	cpc	r29, r25
    1d1a:	20 f4       	brcc	.+8      	; 0x1d24 <prvAddCurrentTaskToDelayedList+0x78>
    1d1c:	c0 93 5d 22 	sts	0x225D, r28	; 0x80225d <xNextTaskUnblockTime>
    1d20:	d0 93 5e 22 	sts	0x225E, r29	; 0x80225e <xNextTaskUnblockTime+0x1>
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <xTaskCreate>:
    1d2e:	4f 92       	push	r4
    1d30:	5f 92       	push	r5
    1d32:	6f 92       	push	r6
    1d34:	7f 92       	push	r7
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	4c 01       	movw	r8, r24
    1d50:	6b 01       	movw	r12, r22
    1d52:	5a 01       	movw	r10, r20
    1d54:	29 01       	movw	r4, r18
    1d56:	ca 01       	movw	r24, r20
    1d58:	73 dc       	rcall	.-1818   	; 0x1640 <pvPortMalloc>
    1d5a:	3c 01       	movw	r6, r24
    1d5c:	89 2b       	or	r24, r25
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <xTaskCreate+0x34>
    1d60:	d6 c0       	rjmp	.+428    	; 0x1f0e <xTaskCreate+0x1e0>
    1d62:	86 e2       	ldi	r24, 0x26	; 38
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	6c dc       	rcall	.-1832   	; 0x1640 <pvPortMalloc>
    1d68:	ec 01       	movw	r28, r24
    1d6a:	89 2b       	or	r24, r25
    1d6c:	59 f0       	breq	.+22     	; 0x1d84 <xTaskCreate+0x56>
    1d6e:	6f 8a       	std	Y+23, r6	; 0x17
    1d70:	78 8e       	std	Y+24, r7	; 0x18
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	a8 1a       	sub	r10, r24
    1d76:	b1 08       	sbc	r11, r1
    1d78:	a6 0c       	add	r10, r6
    1d7a:	b7 1c       	adc	r11, r7
    1d7c:	c1 14       	cp	r12, r1
    1d7e:	d1 04       	cpc	r13, r1
    1d80:	21 f4       	brne	.+8      	; 0x1d8a <xTaskCreate+0x5c>
    1d82:	1f c0       	rjmp	.+62     	; 0x1dc2 <xTaskCreate+0x94>
    1d84:	c3 01       	movw	r24, r6
    1d86:	69 dc       	rcall	.-1838   	; 0x165a <vPortFree>
    1d88:	c2 c0       	rjmp	.+388    	; 0x1f0e <xTaskCreate+0x1e0>
    1d8a:	d6 01       	movw	r26, r12
    1d8c:	8c 91       	ld	r24, X
    1d8e:	89 8f       	std	Y+25, r24	; 0x19
    1d90:	8c 91       	ld	r24, X
    1d92:	88 23       	and	r24, r24
    1d94:	a1 f0       	breq	.+40     	; 0x1dbe <xTaskCreate+0x90>
    1d96:	ae 01       	movw	r20, r28
    1d98:	46 5e       	subi	r20, 0xE6	; 230
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	f6 01       	movw	r30, r12
    1d9e:	31 96       	adiw	r30, 0x01	; 1
    1da0:	b8 e0       	ldi	r27, 0x08	; 8
    1da2:	cb 0e       	add	r12, r27
    1da4:	d1 1c       	adc	r13, r1
    1da6:	cf 01       	movw	r24, r30
    1da8:	21 91       	ld	r18, Z+
    1daa:	da 01       	movw	r26, r20
    1dac:	2d 93       	st	X+, r18
    1dae:	ad 01       	movw	r20, r26
    1db0:	dc 01       	movw	r26, r24
    1db2:	8c 91       	ld	r24, X
    1db4:	88 23       	and	r24, r24
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <xTaskCreate+0x90>
    1db8:	ce 16       	cp	r12, r30
    1dba:	df 06       	cpc	r13, r31
    1dbc:	a1 f7       	brne	.-24     	; 0x1da6 <xTaskCreate+0x78>
    1dbe:	18 a2       	std	Y+32, r1	; 0x20
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <xTaskCreate+0x96>
    1dc2:	19 8e       	std	Y+25, r1	; 0x19
    1dc4:	05 30       	cpi	r16, 0x05	; 5
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <xTaskCreate+0x9c>
    1dc8:	04 e0       	ldi	r16, 0x04	; 4
    1dca:	0e 8b       	std	Y+22, r16	; 0x16
    1dcc:	6e 01       	movw	r12, r28
    1dce:	b2 e0       	ldi	r27, 0x02	; 2
    1dd0:	cb 0e       	add	r12, r27
    1dd2:	d1 1c       	adc	r13, r1
    1dd4:	c6 01       	movw	r24, r12
    1dd6:	49 da       	rcall	.-2926   	; 0x126a <vListInitialiseItem>
    1dd8:	ce 01       	movw	r24, r28
    1dda:	0c 96       	adiw	r24, 0x0c	; 12
    1ddc:	46 da       	rcall	.-2932   	; 0x126a <vListInitialiseItem>
    1dde:	c8 87       	std	Y+8, r28	; 0x08
    1de0:	d9 87       	std	Y+9, r29	; 0x09
    1de2:	85 e0       	ldi	r24, 0x05	; 5
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	80 1b       	sub	r24, r16
    1de8:	91 09       	sbc	r25, r1
    1dea:	8c 87       	std	Y+12, r24	; 0x0c
    1dec:	9d 87       	std	Y+13, r25	; 0x0d
    1dee:	ca 8b       	std	Y+18, r28	; 0x12
    1df0:	db 8b       	std	Y+19, r29	; 0x13
    1df2:	84 e0       	ldi	r24, 0x04	; 4
    1df4:	fe 01       	movw	r30, r28
    1df6:	b1 96       	adiw	r30, 0x21	; 33
    1df8:	df 01       	movw	r26, r30
    1dfa:	1d 92       	st	X+, r1
    1dfc:	8a 95       	dec	r24
    1dfe:	e9 f7       	brne	.-6      	; 0x1dfa <xTaskCreate+0xcc>
    1e00:	1d a2       	std	Y+37, r1	; 0x25
    1e02:	a2 01       	movw	r20, r4
    1e04:	b4 01       	movw	r22, r8
    1e06:	c5 01       	movw	r24, r10
    1e08:	ad da       	rcall	.-2726   	; 0x1364 <pxPortInitialiseStack>
    1e0a:	88 83       	st	Y, r24
    1e0c:	99 83       	std	Y+1, r25	; 0x01
    1e0e:	e1 14       	cp	r14, r1
    1e10:	f1 04       	cpc	r15, r1
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <xTaskCreate+0xec>
    1e14:	f7 01       	movw	r30, r14
    1e16:	c0 83       	st	Z, r28
    1e18:	d1 83       	std	Z+1, r29	; 0x01
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	0f 92       	push	r0
    1e20:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <uxCurrentNumberOfTasks>
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <uxCurrentNumberOfTasks>
    1e2a:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1e2e:	90 91 b6 22 	lds	r25, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1e32:	89 2b       	or	r24, r25
    1e34:	69 f5       	brne	.+90     	; 0x1e90 <xTaskCreate+0x162>
    1e36:	c0 93 b5 22 	sts	0x22B5, r28	; 0x8022b5 <pxCurrentTCB>
    1e3a:	d0 93 b6 22 	sts	0x22B6, r29	; 0x8022b6 <pxCurrentTCB+0x1>
    1e3e:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <uxCurrentNumberOfTasks>
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	a9 f5       	brne	.+106    	; 0x1eb0 <xTaskCreate+0x182>
    1e46:	08 e8       	ldi	r16, 0x88	; 136
    1e48:	12 e2       	ldi	r17, 0x22	; 34
    1e4a:	0f 2e       	mov	r0, r31
    1e4c:	f5 eb       	ldi	r31, 0xB5	; 181
    1e4e:	ef 2e       	mov	r14, r31
    1e50:	f2 e2       	ldi	r31, 0x22	; 34
    1e52:	ff 2e       	mov	r15, r31
    1e54:	f0 2d       	mov	r31, r0
    1e56:	c8 01       	movw	r24, r16
    1e58:	fa d9       	rcall	.-3084   	; 0x124e <vListInitialise>
    1e5a:	07 5f       	subi	r16, 0xF7	; 247
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	0e 15       	cp	r16, r14
    1e60:	1f 05       	cpc	r17, r15
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <xTaskCreate+0x128>
    1e64:	8f e7       	ldi	r24, 0x7F	; 127
    1e66:	92 e2       	ldi	r25, 0x22	; 34
    1e68:	f2 d9       	rcall	.-3100   	; 0x124e <vListInitialise>
    1e6a:	86 e7       	ldi	r24, 0x76	; 118
    1e6c:	92 e2       	ldi	r25, 0x22	; 34
    1e6e:	ef d9       	rcall	.-3106   	; 0x124e <vListInitialise>
    1e70:	89 e6       	ldi	r24, 0x69	; 105
    1e72:	92 e2       	ldi	r25, 0x22	; 34
    1e74:	ec d9       	rcall	.-3112   	; 0x124e <vListInitialise>
    1e76:	8f e7       	ldi	r24, 0x7F	; 127
    1e78:	92 e2       	ldi	r25, 0x22	; 34
    1e7a:	80 93 74 22 	sts	0x2274, r24	; 0x802274 <pxDelayedTaskList>
    1e7e:	90 93 75 22 	sts	0x2275, r25	; 0x802275 <pxDelayedTaskList+0x1>
    1e82:	86 e7       	ldi	r24, 0x76	; 118
    1e84:	92 e2       	ldi	r25, 0x22	; 34
    1e86:	80 93 72 22 	sts	0x2272, r24	; 0x802272 <pxOverflowDelayedTaskList>
    1e8a:	90 93 73 22 	sts	0x2273, r25	; 0x802273 <pxOverflowDelayedTaskList+0x1>
    1e8e:	10 c0       	rjmp	.+32     	; 0x1eb0 <xTaskCreate+0x182>
    1e90:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <xSchedulerRunning>
    1e94:	81 11       	cpse	r24, r1
    1e96:	0c c0       	rjmp	.+24     	; 0x1eb0 <xTaskCreate+0x182>
    1e98:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1e9c:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1ea0:	96 89       	ldd	r25, Z+22	; 0x16
    1ea2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ea4:	89 17       	cp	r24, r25
    1ea6:	20 f0       	brcs	.+8      	; 0x1eb0 <xTaskCreate+0x182>
    1ea8:	c0 93 b5 22 	sts	0x22B5, r28	; 0x8022b5 <pxCurrentTCB>
    1eac:	d0 93 b6 22 	sts	0x22B6, r29	; 0x8022b6 <pxCurrentTCB+0x1>
    1eb0:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <uxTaskNumber>
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <uxTaskNumber>
    1eba:	8e 89       	ldd	r24, Y+22	; 0x16
    1ebc:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <uxTopReadyPriority>
    1ec0:	98 17       	cp	r25, r24
    1ec2:	10 f4       	brcc	.+4      	; 0x1ec8 <xTaskCreate+0x19a>
    1ec4:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <uxTopReadyPriority>
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 01       	movw	r18, r24
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	b6 01       	movw	r22, r12
    1ede:	88 57       	subi	r24, 0x78	; 120
    1ee0:	9d 4d       	sbci	r25, 0xDD	; 221
    1ee2:	c7 d9       	rcall	.-3186   	; 0x1272 <vListInsertEnd>
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <xSchedulerRunning>
    1eec:	88 23       	and	r24, r24
    1eee:	59 f0       	breq	.+22     	; 0x1f06 <xTaskCreate+0x1d8>
    1ef0:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    1ef4:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    1ef8:	96 89       	ldd	r25, Z+22	; 0x16
    1efa:	8e 89       	ldd	r24, Y+22	; 0x16
    1efc:	98 17       	cp	r25, r24
    1efe:	28 f4       	brcc	.+10     	; 0x1f0a <xTaskCreate+0x1dc>
    1f00:	ed da       	rcall	.-2598   	; 0x14dc <vPortYield>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <xTaskCreate+0x1e2>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	03 c0       	rjmp	.+6      	; 0x1f10 <xTaskCreate+0x1e2>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <xTaskCreate+0x1e2>
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	bf 90       	pop	r11
    1f22:	af 90       	pop	r10
    1f24:	9f 90       	pop	r9
    1f26:	8f 90       	pop	r8
    1f28:	7f 90       	pop	r7
    1f2a:	6f 90       	pop	r6
    1f2c:	5f 90       	pop	r5
    1f2e:	4f 90       	pop	r4
    1f30:	08 95       	ret

00001f32 <vTaskStartScheduler>:
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	fb e5       	ldi	r31, 0x5B	; 91
    1f3c:	ef 2e       	mov	r14, r31
    1f3e:	f2 e2       	ldi	r31, 0x22	; 34
    1f40:	ff 2e       	mov	r15, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	00 e0       	ldi	r16, 0x00	; 0
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	45 e5       	ldi	r20, 0x55	; 85
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	6d e0       	ldi	r22, 0x0D	; 13
    1f50:	70 e2       	ldi	r23, 0x20	; 32
    1f52:	8f e4       	ldi	r24, 0x4F	; 79
    1f54:	9e e0       	ldi	r25, 0x0E	; 14
    1f56:	eb de       	rcall	.-554    	; 0x1d2e <xTaskCreate>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 f4       	brne	.+36     	; 0x1f80 <vTaskStartScheduler+0x4e>
    1f5c:	e5 d2       	rcall	.+1482   	; 0x2528 <xTimerCreateTimerTask>
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	79 f4       	brne	.+30     	; 0x1f80 <vTaskStartScheduler+0x4e>
    1f62:	f8 94       	cli
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <xNextTaskUnblockTime>
    1f6c:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <xNextTaskUnblockTime+0x1>
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <xSchedulerRunning>
    1f76:	10 92 66 22 	sts	0x2266, r1	; 0x802266 <xTickCount>
    1f7a:	10 92 67 22 	sts	0x2267, r1	; 0x802267 <xTickCount+0x1>
    1f7e:	69 da       	rcall	.-2862   	; 0x1452 <xPortStartScheduler>
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	08 95       	ret

00001f88 <vTaskSuspendAll>:
    1f88:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <uxSchedulerSuspended>
    1f92:	08 95       	ret

00001f94 <xTaskGetTickCount>:
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	0f 92       	push	r0
    1f9a:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <xTickCount>
    1f9e:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <xTickCount+0x1>
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	08 95       	ret

00001fa8 <xTaskIncrementTick>:
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	9a c0       	rjmp	.+308    	; 0x20f2 <xTaskIncrementTick+0x14a>
    1fbe:	e0 90 66 22 	lds	r14, 0x2266	; 0x802266 <xTickCount>
    1fc2:	f0 90 67 22 	lds	r15, 0x2267	; 0x802267 <xTickCount+0x1>
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	e8 1a       	sub	r14, r24
    1fca:	f8 0a       	sbc	r15, r24
    1fcc:	e0 92 66 22 	sts	0x2266, r14	; 0x802266 <xTickCount>
    1fd0:	f0 92 67 22 	sts	0x2267, r15	; 0x802267 <xTickCount+0x1>
    1fd4:	e1 14       	cp	r14, r1
    1fd6:	f1 04       	cpc	r15, r1
    1fd8:	b1 f4       	brne	.+44     	; 0x2006 <xTaskIncrementTick+0x5e>
    1fda:	80 91 74 22 	lds	r24, 0x2274	; 0x802274 <pxDelayedTaskList>
    1fde:	90 91 75 22 	lds	r25, 0x2275	; 0x802275 <pxDelayedTaskList+0x1>
    1fe2:	20 91 72 22 	lds	r18, 0x2272	; 0x802272 <pxOverflowDelayedTaskList>
    1fe6:	30 91 73 22 	lds	r19, 0x2273	; 0x802273 <pxOverflowDelayedTaskList+0x1>
    1fea:	20 93 74 22 	sts	0x2274, r18	; 0x802274 <pxDelayedTaskList>
    1fee:	30 93 75 22 	sts	0x2275, r19	; 0x802275 <pxDelayedTaskList+0x1>
    1ff2:	80 93 72 22 	sts	0x2272, r24	; 0x802272 <pxOverflowDelayedTaskList>
    1ff6:	90 93 73 22 	sts	0x2273, r25	; 0x802273 <pxOverflowDelayedTaskList+0x1>
    1ffa:	80 91 60 22 	lds	r24, 0x2260	; 0x802260 <xNumOfOverflows>
    1ffe:	8f 5f       	subi	r24, 0xFF	; 255
    2000:	80 93 60 22 	sts	0x2260, r24	; 0x802260 <xNumOfOverflows>
    2004:	30 de       	rcall	.-928    	; 0x1c66 <prvResetNextTaskUnblockTime>
    2006:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xNextTaskUnblockTime>
    200a:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xNextTaskUnblockTime+0x1>
    200e:	e8 16       	cp	r14, r24
    2010:	f9 06       	cpc	r15, r25
    2012:	10 f4       	brcc	.+4      	; 0x2018 <xTaskIncrementTick+0x70>
    2014:	d1 2c       	mov	r13, r1
    2016:	4f c0       	rjmp	.+158    	; 0x20b6 <xTaskIncrementTick+0x10e>
    2018:	d1 2c       	mov	r13, r1
    201a:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <pxDelayedTaskList>
    201e:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <pxDelayedTaskList+0x1>
    2022:	80 81       	ld	r24, Z
    2024:	81 11       	cpse	r24, r1
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <xTaskIncrementTick+0x8e>
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	9f ef       	ldi	r25, 0xFF	; 255
    202c:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <xNextTaskUnblockTime>
    2030:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <xNextTaskUnblockTime+0x1>
    2034:	40 c0       	rjmp	.+128    	; 0x20b6 <xTaskIncrementTick+0x10e>
    2036:	e0 91 74 22 	lds	r30, 0x2274	; 0x802274 <pxDelayedTaskList>
    203a:	f0 91 75 22 	lds	r31, 0x2275	; 0x802275 <pxDelayedTaskList+0x1>
    203e:	05 80       	ldd	r0, Z+5	; 0x05
    2040:	f6 81       	ldd	r31, Z+6	; 0x06
    2042:	e0 2d       	mov	r30, r0
    2044:	c6 81       	ldd	r28, Z+6	; 0x06
    2046:	d7 81       	ldd	r29, Z+7	; 0x07
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	e8 16       	cp	r14, r24
    204e:	f9 06       	cpc	r15, r25
    2050:	28 f4       	brcc	.+10     	; 0x205c <xTaskIncrementTick+0xb4>
    2052:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <xNextTaskUnblockTime>
    2056:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <xNextTaskUnblockTime+0x1>
    205a:	2d c0       	rjmp	.+90     	; 0x20b6 <xTaskIncrementTick+0x10e>
    205c:	8e 01       	movw	r16, r28
    205e:	0e 5f       	subi	r16, 0xFE	; 254
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	c8 01       	movw	r24, r16
    2064:	58 d9       	rcall	.-3408   	; 0x1316 <uxListRemove>
    2066:	8c 89       	ldd	r24, Y+20	; 0x14
    2068:	9d 89       	ldd	r25, Y+21	; 0x15
    206a:	89 2b       	or	r24, r25
    206c:	19 f0       	breq	.+6      	; 0x2074 <xTaskIncrementTick+0xcc>
    206e:	ce 01       	movw	r24, r28
    2070:	0c 96       	adiw	r24, 0x0c	; 12
    2072:	51 d9       	rcall	.-3422   	; 0x1316 <uxListRemove>
    2074:	8e 89       	ldd	r24, Y+22	; 0x16
    2076:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <uxTopReadyPriority>
    207a:	98 17       	cp	r25, r24
    207c:	10 f4       	brcc	.+4      	; 0x2082 <xTaskIncrementTick+0xda>
    207e:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <uxTopReadyPriority>
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 01       	movw	r18, r24
    2086:	22 0f       	add	r18, r18
    2088:	33 1f       	adc	r19, r19
    208a:	22 0f       	add	r18, r18
    208c:	33 1f       	adc	r19, r19
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	82 0f       	add	r24, r18
    2094:	93 1f       	adc	r25, r19
    2096:	b8 01       	movw	r22, r16
    2098:	88 57       	subi	r24, 0x78	; 120
    209a:	9d 4d       	sbci	r25, 0xDD	; 221
    209c:	ea d8       	rcall	.-3628   	; 0x1272 <vListInsertEnd>
    209e:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    20a2:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    20a6:	9e 89       	ldd	r25, Y+22	; 0x16
    20a8:	86 89       	ldd	r24, Z+22	; 0x16
    20aa:	98 17       	cp	r25, r24
    20ac:	08 f4       	brcc	.+2      	; 0x20b0 <xTaskIncrementTick+0x108>
    20ae:	b5 cf       	rjmp	.-150    	; 0x201a <xTaskIncrementTick+0x72>
    20b0:	dd 24       	eor	r13, r13
    20b2:	d3 94       	inc	r13
    20b4:	b2 cf       	rjmp	.-156    	; 0x201a <xTaskIncrementTick+0x72>
    20b6:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    20ba:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    20be:	86 89       	ldd	r24, Z+22	; 0x16
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	fc 01       	movw	r30, r24
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	8e 0f       	add	r24, r30
    20d2:	9f 1f       	adc	r25, r31
    20d4:	fc 01       	movw	r30, r24
    20d6:	e8 57       	subi	r30, 0x78	; 120
    20d8:	fd 4d       	sbci	r31, 0xDD	; 221
    20da:	80 81       	ld	r24, Z
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	10 f0       	brcs	.+4      	; 0x20e4 <xTaskIncrementTick+0x13c>
    20e0:	dd 24       	eor	r13, r13
    20e2:	d3 94       	inc	r13
    20e4:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <xYieldPending>
    20e8:	88 23       	and	r24, r24
    20ea:	69 f0       	breq	.+26     	; 0x2106 <xTaskIncrementTick+0x15e>
    20ec:	dd 24       	eor	r13, r13
    20ee:	d3 94       	inc	r13
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <xTaskIncrementTick+0x15e>
    20f2:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <xPendedTicks>
    20f6:	90 91 63 22 	lds	r25, 0x2263	; 0x802263 <xPendedTicks+0x1>
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <xPendedTicks>
    2100:	90 93 63 22 	sts	0x2263, r25	; 0x802263 <xPendedTicks+0x1>
    2104:	d1 2c       	mov	r13, r1
    2106:	8d 2d       	mov	r24, r13
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	df 90       	pop	r13
    2116:	08 95       	ret

00002118 <xTaskResumeAll>:
    2118:	df 92       	push	r13
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	0f 92       	push	r0
    212c:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    2130:	81 50       	subi	r24, 0x01	; 1
    2132:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <uxSchedulerSuspended>
    2136:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    213a:	81 11       	cpse	r24, r1
    213c:	5d c0       	rjmp	.+186    	; 0x21f8 <xTaskResumeAll+0xe0>
    213e:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <uxCurrentNumberOfTasks>
    2142:	81 11       	cpse	r24, r1
    2144:	30 c0       	rjmp	.+96     	; 0x21a6 <xTaskResumeAll+0x8e>
    2146:	5b c0       	rjmp	.+182    	; 0x21fe <xTaskResumeAll+0xe6>
    2148:	d7 01       	movw	r26, r14
    214a:	15 96       	adiw	r26, 0x05	; 5
    214c:	ed 91       	ld	r30, X+
    214e:	fc 91       	ld	r31, X
    2150:	16 97       	sbiw	r26, 0x06	; 6
    2152:	c6 81       	ldd	r28, Z+6	; 0x06
    2154:	d7 81       	ldd	r29, Z+7	; 0x07
    2156:	ce 01       	movw	r24, r28
    2158:	0c 96       	adiw	r24, 0x0c	; 12
    215a:	dd d8       	rcall	.-3654   	; 0x1316 <uxListRemove>
    215c:	8e 01       	movw	r16, r28
    215e:	0e 5f       	subi	r16, 0xFE	; 254
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	c8 01       	movw	r24, r16
    2164:	d8 d8       	rcall	.-3664   	; 0x1316 <uxListRemove>
    2166:	8e 89       	ldd	r24, Y+22	; 0x16
    2168:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <uxTopReadyPriority>
    216c:	98 17       	cp	r25, r24
    216e:	10 f4       	brcc	.+4      	; 0x2174 <xTaskResumeAll+0x5c>
    2170:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <uxTopReadyPriority>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c 01       	movw	r18, r24
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	22 0f       	add	r18, r18
    217e:	33 1f       	adc	r19, r19
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	82 0f       	add	r24, r18
    2186:	93 1f       	adc	r25, r19
    2188:	b8 01       	movw	r22, r16
    218a:	88 57       	subi	r24, 0x78	; 120
    218c:	9d 4d       	sbci	r25, 0xDD	; 221
    218e:	71 d8       	rcall	.-3870   	; 0x1272 <vListInsertEnd>
    2190:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    2194:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    2198:	9e 89       	ldd	r25, Y+22	; 0x16
    219a:	86 89       	ldd	r24, Z+22	; 0x16
    219c:	98 17       	cp	r25, r24
    219e:	68 f0       	brcs	.+26     	; 0x21ba <xTaskResumeAll+0xa2>
    21a0:	d0 92 61 22 	sts	0x2261, r13	; 0x802261 <xYieldPending>
    21a4:	0a c0       	rjmp	.+20     	; 0x21ba <xTaskResumeAll+0xa2>
    21a6:	c0 e0       	ldi	r28, 0x00	; 0
    21a8:	d0 e0       	ldi	r29, 0x00	; 0
    21aa:	0f 2e       	mov	r0, r31
    21ac:	f9 e6       	ldi	r31, 0x69	; 105
    21ae:	ef 2e       	mov	r14, r31
    21b0:	f2 e2       	ldi	r31, 0x22	; 34
    21b2:	ff 2e       	mov	r15, r31
    21b4:	f0 2d       	mov	r31, r0
    21b6:	dd 24       	eor	r13, r13
    21b8:	d3 94       	inc	r13
    21ba:	f7 01       	movw	r30, r14
    21bc:	80 81       	ld	r24, Z
    21be:	81 11       	cpse	r24, r1
    21c0:	c3 cf       	rjmp	.-122    	; 0x2148 <xTaskResumeAll+0x30>
    21c2:	cd 2b       	or	r28, r29
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <xTaskResumeAll+0xb0>
    21c6:	4f dd       	rcall	.-1378   	; 0x1c66 <prvResetNextTaskUnblockTime>
    21c8:	c0 91 62 22 	lds	r28, 0x2262	; 0x802262 <xPendedTicks>
    21cc:	d0 91 63 22 	lds	r29, 0x2263	; 0x802263 <xPendedTicks+0x1>
    21d0:	20 97       	sbiw	r28, 0x00	; 0
    21d2:	59 f0       	breq	.+22     	; 0x21ea <xTaskResumeAll+0xd2>
    21d4:	11 e0       	ldi	r17, 0x01	; 1
    21d6:	e8 de       	rcall	.-560    	; 0x1fa8 <xTaskIncrementTick>
    21d8:	81 11       	cpse	r24, r1
    21da:	10 93 61 22 	sts	0x2261, r17	; 0x802261 <xYieldPending>
    21de:	21 97       	sbiw	r28, 0x01	; 1
    21e0:	d1 f7       	brne	.-12     	; 0x21d6 <xTaskResumeAll+0xbe>
    21e2:	10 92 62 22 	sts	0x2262, r1	; 0x802262 <xPendedTicks>
    21e6:	10 92 63 22 	sts	0x2263, r1	; 0x802263 <xPendedTicks+0x1>
    21ea:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <xYieldPending>
    21ee:	88 23       	and	r24, r24
    21f0:	29 f0       	breq	.+10     	; 0x21fc <xTaskResumeAll+0xe4>
    21f2:	74 d9       	rcall	.-3352   	; 0x14dc <vPortYield>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <xTaskResumeAll+0xe6>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <xTaskResumeAll+0xe6>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	0f 90       	pop	r0
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	08 95       	ret

00002212 <vTaskDelay>:
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	ec 01       	movw	r28, r24
    2218:	89 2b       	or	r24, r25
    221a:	39 f0       	breq	.+14     	; 0x222a <vTaskDelay+0x18>
    221c:	b5 de       	rcall	.-662    	; 0x1f88 <vTaskSuspendAll>
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	ce 01       	movw	r24, r28
    2222:	44 dd       	rcall	.-1400   	; 0x1cac <prvAddCurrentTaskToDelayedList>
    2224:	79 df       	rcall	.-270    	; 0x2118 <xTaskResumeAll>
    2226:	81 11       	cpse	r24, r1
    2228:	01 c0       	rjmp	.+2      	; 0x222c <vTaskDelay+0x1a>
    222a:	58 d9       	rcall	.-3408   	; 0x14dc <vPortYield>
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	08 95       	ret

00002232 <vTaskSwitchContext>:
    2232:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    2236:	88 23       	and	r24, r24
    2238:	21 f0       	breq	.+8      	; 0x2242 <vTaskSwitchContext+0x10>
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <xYieldPending>
    2240:	08 95       	ret
    2242:	10 92 61 22 	sts	0x2261, r1	; 0x802261 <xYieldPending>
    2246:	20 91 65 22 	lds	r18, 0x2265	; 0x802265 <uxTopReadyPriority>
    224a:	82 2f       	mov	r24, r18
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	fc 01       	movw	r30, r24
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	ee 0f       	add	r30, r30
    2256:	ff 1f       	adc	r31, r31
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	e8 0f       	add	r30, r24
    225e:	f9 1f       	adc	r31, r25
    2260:	e8 57       	subi	r30, 0x78	; 120
    2262:	fd 4d       	sbci	r31, 0xDD	; 221
    2264:	30 81       	ld	r19, Z
    2266:	31 11       	cpse	r19, r1
    2268:	11 c0       	rjmp	.+34     	; 0x228c <vTaskSwitchContext+0x5a>
    226a:	21 50       	subi	r18, 0x01	; 1
    226c:	82 2f       	mov	r24, r18
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	fc 01       	movw	r30, r24
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	e8 0f       	add	r30, r24
    2280:	f9 1f       	adc	r31, r25
    2282:	e8 57       	subi	r30, 0x78	; 120
    2284:	fd 4d       	sbci	r31, 0xDD	; 221
    2286:	30 81       	ld	r19, Z
    2288:	33 23       	and	r19, r19
    228a:	79 f3       	breq	.-34     	; 0x226a <vTaskSwitchContext+0x38>
    228c:	ac 01       	movw	r20, r24
    228e:	44 0f       	add	r20, r20
    2290:	55 1f       	adc	r21, r21
    2292:	44 0f       	add	r20, r20
    2294:	55 1f       	adc	r21, r21
    2296:	44 0f       	add	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	48 0f       	add	r20, r24
    229c:	59 1f       	adc	r21, r25
    229e:	da 01       	movw	r26, r20
    22a0:	a8 57       	subi	r26, 0x78	; 120
    22a2:	bd 4d       	sbci	r27, 0xDD	; 221
    22a4:	11 96       	adiw	r26, 0x01	; 1
    22a6:	ed 91       	ld	r30, X+
    22a8:	fc 91       	ld	r31, X
    22aa:	12 97       	sbiw	r26, 0x02	; 2
    22ac:	02 80       	ldd	r0, Z+2	; 0x02
    22ae:	f3 81       	ldd	r31, Z+3	; 0x03
    22b0:	e0 2d       	mov	r30, r0
    22b2:	11 96       	adiw	r26, 0x01	; 1
    22b4:	ed 93       	st	X+, r30
    22b6:	fc 93       	st	X, r31
    22b8:	12 97       	sbiw	r26, 0x02	; 2
    22ba:	45 57       	subi	r20, 0x75	; 117
    22bc:	5d 4d       	sbci	r21, 0xDD	; 221
    22be:	e4 17       	cp	r30, r20
    22c0:	f5 07       	cpc	r31, r21
    22c2:	29 f4       	brne	.+10     	; 0x22ce <vTaskSwitchContext+0x9c>
    22c4:	42 81       	ldd	r20, Z+2	; 0x02
    22c6:	53 81       	ldd	r21, Z+3	; 0x03
    22c8:	fd 01       	movw	r30, r26
    22ca:	41 83       	std	Z+1, r20	; 0x01
    22cc:	52 83       	std	Z+2, r21	; 0x02
    22ce:	fc 01       	movw	r30, r24
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	8e 0f       	add	r24, r30
    22de:	9f 1f       	adc	r25, r31
    22e0:	fc 01       	movw	r30, r24
    22e2:	e8 57       	subi	r30, 0x78	; 120
    22e4:	fd 4d       	sbci	r31, 0xDD	; 221
    22e6:	01 80       	ldd	r0, Z+1	; 0x01
    22e8:	f2 81       	ldd	r31, Z+2	; 0x02
    22ea:	e0 2d       	mov	r30, r0
    22ec:	86 81       	ldd	r24, Z+6	; 0x06
    22ee:	97 81       	ldd	r25, Z+7	; 0x07
    22f0:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <pxCurrentTCB>
    22f4:	90 93 b6 22 	sts	0x22B6, r25	; 0x8022b6 <pxCurrentTCB+0x1>
    22f8:	20 93 65 22 	sts	0x2265, r18	; 0x802265 <uxTopReadyPriority>
    22fc:	08 95       	ret

000022fe <vTaskPlaceOnEventList>:
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	eb 01       	movw	r28, r22
    2304:	60 91 b5 22 	lds	r22, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    2308:	70 91 b6 22 	lds	r23, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    230c:	64 5f       	subi	r22, 0xF4	; 244
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <vListInsert>
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	ce 01       	movw	r24, r28
    2318:	c9 dc       	rcall	.-1646   	; 0x1cac <prvAddCurrentTaskToDelayedList>
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <vTaskPlaceOnEventListRestricted>:
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	8b 01       	movw	r16, r22
    2328:	c4 2f       	mov	r28, r20
    232a:	60 91 b5 22 	lds	r22, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    232e:	70 91 b6 22 	lds	r23, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    2332:	64 5f       	subi	r22, 0xF4	; 244
    2334:	7f 4f       	sbci	r23, 0xFF	; 255
    2336:	0e 94 39 09 	call	0x1272	; 0x1272 <vListInsertEnd>
    233a:	cc 23       	and	r28, r28
    233c:	11 f0       	breq	.+4      	; 0x2342 <vTaskPlaceOnEventListRestricted+0x22>
    233e:	0f ef       	ldi	r16, 0xFF	; 255
    2340:	1f ef       	ldi	r17, 0xFF	; 255
    2342:	6c 2f       	mov	r22, r28
    2344:	c8 01       	movw	r24, r16
    2346:	b2 dc       	rcall	.-1692   	; 0x1cac <prvAddCurrentTaskToDelayedList>
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	08 95       	ret

00002350 <xTaskRemoveFromEventList>:
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	dc 01       	movw	r26, r24
    235a:	15 96       	adiw	r26, 0x05	; 5
    235c:	ed 91       	ld	r30, X+
    235e:	fc 91       	ld	r31, X
    2360:	16 97       	sbiw	r26, 0x06	; 6
    2362:	c6 81       	ldd	r28, Z+6	; 0x06
    2364:	d7 81       	ldd	r29, Z+7	; 0x07
    2366:	8e 01       	movw	r16, r28
    2368:	04 5f       	subi	r16, 0xF4	; 244
    236a:	1f 4f       	sbci	r17, 0xFF	; 255
    236c:	c8 01       	movw	r24, r16
    236e:	0e 94 8b 09 	call	0x1316	; 0x1316 <uxListRemove>
    2372:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    2376:	81 11       	cpse	r24, r1
    2378:	1c c0       	rjmp	.+56     	; 0x23b2 <xTaskRemoveFromEventList+0x62>
    237a:	0a 50       	subi	r16, 0x0A	; 10
    237c:	11 09       	sbc	r17, r1
    237e:	c8 01       	movw	r24, r16
    2380:	0e 94 8b 09 	call	0x1316	; 0x1316 <uxListRemove>
    2384:	8e 89       	ldd	r24, Y+22	; 0x16
    2386:	90 91 65 22 	lds	r25, 0x2265	; 0x802265 <uxTopReadyPriority>
    238a:	98 17       	cp	r25, r24
    238c:	10 f4       	brcc	.+4      	; 0x2392 <xTaskRemoveFromEventList+0x42>
    238e:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <uxTopReadyPriority>
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 01       	movw	r18, r24
    2396:	22 0f       	add	r18, r18
    2398:	33 1f       	adc	r19, r19
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	22 0f       	add	r18, r18
    23a0:	33 1f       	adc	r19, r19
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	b8 01       	movw	r22, r16
    23a8:	88 57       	subi	r24, 0x78	; 120
    23aa:	9d 4d       	sbci	r25, 0xDD	; 221
    23ac:	0e 94 39 09 	call	0x1272	; 0x1272 <vListInsertEnd>
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <xTaskRemoveFromEventList+0x6c>
    23b2:	b8 01       	movw	r22, r16
    23b4:	89 e6       	ldi	r24, 0x69	; 105
    23b6:	92 e2       	ldi	r25, 0x22	; 34
    23b8:	0e 94 39 09 	call	0x1272	; 0x1272 <vListInsertEnd>
    23bc:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTCB>
    23c0:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTCB+0x1>
    23c4:	9e 89       	ldd	r25, Y+22	; 0x16
    23c6:	86 89       	ldd	r24, Z+22	; 0x16
    23c8:	89 17       	cp	r24, r25
    23ca:	20 f4       	brcc	.+8      	; 0x23d4 <xTaskRemoveFromEventList+0x84>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <xYieldPending>
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <xTaskRemoveFromEventList+0x86>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    23e0:	20 91 60 22 	lds	r18, 0x2260	; 0x802260 <xNumOfOverflows>
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    23e8:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <xTickCount>
    23ec:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <xTickCount+0x1>
    23f0:	21 83       	std	Z+1, r18	; 0x01
    23f2:	32 83       	std	Z+2, r19	; 0x02
    23f4:	08 95       	ret

000023f6 <xTaskCheckForTimeOut>:
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    23fc:	20 91 66 22 	lds	r18, 0x2266	; 0x802266 <xTickCount>
    2400:	30 91 67 22 	lds	r19, 0x2267	; 0x802267 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2404:	dc 01       	movw	r26, r24
    2406:	11 96       	adiw	r26, 0x01	; 1
    2408:	4d 91       	ld	r20, X+
    240a:	5c 91       	ld	r21, X
    240c:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    240e:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <xNumOfOverflows>
    2412:	fc 91       	ld	r31, X
    2414:	fe 17       	cp	r31, r30
    2416:	41 f0       	breq	.+16     	; 0x2428 <xTaskCheckForTimeOut+0x32>
    2418:	24 17       	cp	r18, r20
    241a:	35 07       	cpc	r19, r21
    241c:	28 f0       	brcs	.+10     	; 0x2428 <xTaskCheckForTimeOut+0x32>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    241e:	fb 01       	movw	r30, r22
    2420:	10 82       	st	Z, r1
    2422:	11 82       	std	Z+1, r1	; 0x01
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    2424:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <xTaskCheckForTimeOut+0x5a>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2428:	24 1b       	sub	r18, r20
    242a:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    242c:	db 01       	movw	r26, r22
    242e:	4d 91       	ld	r20, X+
    2430:	5c 91       	ld	r21, X
    2432:	24 17       	cp	r18, r20
    2434:	35 07       	cpc	r19, r21
    2436:	40 f4       	brcc	.+16     	; 0x2448 <xTaskCheckForTimeOut+0x52>
    2438:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    243a:	42 1b       	sub	r20, r18
    243c:	53 0b       	sbc	r21, r19
    243e:	40 83       	st	Z, r20
    2440:	51 83       	std	Z+1, r21	; 0x01
            vTaskInternalSetTimeOutState( pxTimeOut );
    2442:	ce df       	rcall	.-100    	; 0x23e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	04 c0       	rjmp	.+8      	; 0x2450 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    2448:	fb 01       	movw	r30, r22
    244a:	10 82       	st	Z, r1
    244c:	11 82       	std	Z+1, r1	; 0x01
            xReturn = pdTRUE;
    244e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    2454:	08 95       	ret

00002456 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <xYieldPending>
    245c:	08 95       	ret

0000245e <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    245e:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <xSchedulerRunning>
    2462:	88 23       	and	r24, r24
    2464:	31 f0       	breq	.+12     	; 0x2472 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2466:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxSchedulerSuspended>
    246a:	88 23       	and	r24, r24
    246c:	21 f0       	breq	.+8      	; 0x2476 <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	08 95       	ret
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
            {
                xReturn = taskSCHEDULER_RUNNING;
    2476:	82 e0       	ldi	r24, 0x02	; 2
                xReturn = taskSCHEDULER_SUSPENDED;
            }
        }

        return xReturn;
    }
    2478:	08 95       	ret

0000247a <prvInsertTimerInActiveList>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    247a:	fc 01       	movw	r30, r24
    247c:	62 83       	std	Z+2, r22	; 0x02
    247e:	73 83       	std	Z+3, r23	; 0x03
    2480:	80 87       	std	Z+8, r24	; 0x08
    2482:	91 87       	std	Z+9, r25	; 0x09
    2484:	46 17       	cp	r20, r22
    2486:	57 07       	cpc	r21, r23
    2488:	90 f0       	brcs	.+36     	; 0x24ae <prvInsertTimerInActiveList+0x34>
    248a:	42 1b       	sub	r20, r18
    248c:	53 0b       	sbc	r21, r19
    248e:	84 85       	ldd	r24, Z+12	; 0x0c
    2490:	95 85       	ldd	r25, Z+13	; 0x0d
    2492:	48 17       	cp	r20, r24
    2494:	59 07       	cpc	r21, r25
    2496:	e0 f4       	brcc	.+56     	; 0x24d0 <prvInsertTimerInActiveList+0x56>
    2498:	bf 01       	movw	r22, r30
    249a:	6e 5f       	subi	r22, 0xFE	; 254
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <pxOverflowTimerList>
    24a2:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <pxOverflowTimerList+0x1>
    24a6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <vListInsert>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	08 95       	ret
    24ae:	42 17       	cp	r20, r18
    24b0:	53 07       	cpc	r21, r19
    24b2:	18 f4       	brcc	.+6      	; 0x24ba <prvInsertTimerInActiveList+0x40>
    24b4:	62 17       	cp	r22, r18
    24b6:	73 07       	cpc	r23, r19
    24b8:	68 f4       	brcc	.+26     	; 0x24d4 <prvInsertTimerInActiveList+0x5a>
    24ba:	bf 01       	movw	r22, r30
    24bc:	6e 5f       	subi	r22, 0xFE	; 254
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <pxCurrentTimerList>
    24c4:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <pxCurrentTimerList+0x1>
    24c8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <vListInsert>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	08 95       	ret
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	08 95       	ret
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	08 95       	ret

000024d8 <prvCheckForValidListAndQueue>:
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	0f 92       	push	r0
    24de:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <xTimerQueue>
    24e2:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <xTimerQueue+0x1>
    24e6:	89 2b       	or	r24, r25
    24e8:	e1 f4       	brne	.+56     	; 0x2522 <prvCheckForValidListAndQueue+0x4a>
    24ea:	8a ec       	ldi	r24, 0xCA	; 202
    24ec:	92 e2       	ldi	r25, 0x22	; 34
    24ee:	0e 94 27 09 	call	0x124e	; 0x124e <vListInitialise>
    24f2:	81 ec       	ldi	r24, 0xC1	; 193
    24f4:	92 e2       	ldi	r25, 0x22	; 34
    24f6:	0e 94 27 09 	call	0x124e	; 0x124e <vListInitialise>
    24fa:	8a ec       	ldi	r24, 0xCA	; 202
    24fc:	92 e2       	ldi	r25, 0x22	; 34
    24fe:	80 93 bf 22 	sts	0x22BF, r24	; 0x8022bf <pxCurrentTimerList>
    2502:	90 93 c0 22 	sts	0x22C0, r25	; 0x8022c0 <pxCurrentTimerList+0x1>
    2506:	81 ec       	ldi	r24, 0xC1	; 193
    2508:	92 e2       	ldi	r25, 0x22	; 34
    250a:	80 93 bd 22 	sts	0x22BD, r24	; 0x8022bd <pxOverflowTimerList>
    250e:	90 93 be 22 	sts	0x22BE, r25	; 0x8022be <pxOverflowTimerList+0x1>
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	65 e0       	ldi	r22, 0x05	; 5
    2516:	8a e0       	ldi	r24, 0x0A	; 10
    2518:	a6 d9       	rcall	.-3252   	; 0x1866 <xQueueGenericCreate>
    251a:	80 93 bb 22 	sts	0x22BB, r24	; 0x8022bb <xTimerQueue>
    251e:	90 93 bc 22 	sts	0x22BC, r25	; 0x8022bc <xTimerQueue+0x1>
    2522:	0f 90       	pop	r0
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	08 95       	ret

00002528 <xTimerCreateTimerTask>:
    2528:	ef 92       	push	r14
    252a:	ff 92       	push	r15
    252c:	0f 93       	push	r16
    252e:	d4 df       	rcall	.-88     	; 0x24d8 <prvCheckForValidListAndQueue>
    2530:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <xTimerQueue>
    2534:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <xTimerQueue+0x1>
    2538:	89 2b       	or	r24, r25
    253a:	89 f0       	breq	.+34     	; 0x255e <xTimerCreateTimerTask+0x36>
    253c:	0f 2e       	mov	r0, r31
    253e:	f9 eb       	ldi	r31, 0xB9	; 185
    2540:	ef 2e       	mov	r14, r31
    2542:	f2 e2       	ldi	r31, 0x22	; 34
    2544:	ff 2e       	mov	r15, r31
    2546:	f0 2d       	mov	r31, r0
    2548:	03 e0       	ldi	r16, 0x03	; 3
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	45 e5       	ldi	r20, 0x55	; 85
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	62 e1       	ldi	r22, 0x12	; 18
    2554:	70 e2       	ldi	r23, 0x20	; 32
    2556:	84 e6       	ldi	r24, 0x64	; 100
    2558:	93 e1       	ldi	r25, 0x13	; 19
    255a:	e9 db       	rcall	.-2094   	; 0x1d2e <xTaskCreate>
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <xTimerCreateTimerTask+0x38>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	08 95       	ret

00002568 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	25 97       	sbiw	r28, 0x05	; 5
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	de bf       	out	0x3e, r29	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    257a:	e0 91 bb 22 	lds	r30, 0x22BB	; 0x8022bb <xTimerQueue>
    257e:	f0 91 bc 22 	lds	r31, 0x22BC	; 0x8022bc <xTimerQueue+0x1>
    2582:	30 97       	sbiw	r30, 0x00	; 0
    2584:	51 f1       	breq	.+84     	; 0x25da <xTimerGenericCommand+0x72>
    2586:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2588:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    258a:	4a 83       	std	Y+2, r20	; 0x02
    258c:	5b 83       	std	Y+3, r21	; 0x03
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    258e:	8c 83       	std	Y+4, r24	; 0x04
    2590:	9d 83       	std	Y+5, r25	; 0x05

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2592:	66 30       	cpi	r22, 0x06	; 6
    2594:	d4 f4       	brge	.+52     	; 0x25ca <xTimerGenericCommand+0x62>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2596:	63 df       	rcall	.-314    	; 0x245e <xTaskGetSchedulerState>
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	59 f4       	brne	.+22     	; 0x25b2 <xTimerGenericCommand+0x4a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	a8 01       	movw	r20, r16
    25a0:	be 01       	movw	r22, r28
    25a2:	6f 5f       	subi	r22, 0xFF	; 255
    25a4:	7f 4f       	sbci	r23, 0xFF	; 255
    25a6:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <xTimerQueue>
    25aa:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <xTimerQueue+0x1>
    25ae:	7c d9       	rcall	.-3336   	; 0x18a8 <xQueueGenericSend>
    25b0:	15 c0       	rjmp	.+42     	; 0x25dc <xTimerGenericCommand+0x74>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	be 01       	movw	r22, r28
    25ba:	6f 5f       	subi	r22, 0xFF	; 255
    25bc:	7f 4f       	sbci	r23, 0xFF	; 255
    25be:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <xTimerQueue>
    25c2:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <xTimerQueue+0x1>
    25c6:	70 d9       	rcall	.-3360   	; 0x18a8 <xQueueGenericSend>
    25c8:	09 c0       	rjmp	.+18     	; 0x25dc <xTimerGenericCommand+0x74>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	ad 01       	movw	r20, r26
    25ce:	be 01       	movw	r22, r28
    25d0:	6f 5f       	subi	r22, 0xFF	; 255
    25d2:	7f 4f       	sbci	r23, 0xFF	; 255
    25d4:	cf 01       	movw	r24, r30
    25d6:	f5 d9       	rcall	.-3094   	; 0x19c2 <xQueueGenericSendFromISR>
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <xTimerGenericCommand+0x74>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    25da:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    25dc:	25 96       	adiw	r28, 0x05	; 5
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	08 95       	ret

000025ec <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    25ec:	af 92       	push	r10
    25ee:	bf 92       	push	r11
    25f0:	cf 92       	push	r12
    25f2:	df 92       	push	r13
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	6c 01       	movw	r12, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2602:	c8 dc       	rcall	.-1648   	; 0x1f94 <xTaskGetTickCount>
    2604:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2606:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <xLastTime.4399>
    260a:	90 91 b8 22 	lds	r25, 0x22B8	; 0x8022b8 <xLastTime.4399+0x1>
    260e:	e8 16       	cp	r14, r24
    2610:	f9 06       	cpc	r15, r25
    2612:	08 f0       	brcs	.+2      	; 0x2616 <prvSampleTimeNow+0x2a>
    2614:	47 c0       	rjmp	.+142    	; 0x26a4 <prvSampleTimeNow+0xb8>
    2616:	2f c0       	rjmp	.+94     	; 0x2676 <prvSampleTimeNow+0x8a>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2618:	05 80       	ldd	r0, Z+5	; 0x05
    261a:	f6 81       	ldd	r31, Z+6	; 0x06
    261c:	e0 2d       	mov	r30, r0
    261e:	a0 80       	ld	r10, Z
    2620:	b1 80       	ldd	r11, Z+1	; 0x01

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2622:	c6 81       	ldd	r28, Z+6	; 0x06
    2624:	d7 81       	ldd	r29, Z+7	; 0x07
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2626:	8e 01       	movw	r16, r28
    2628:	0e 5f       	subi	r16, 0xFE	; 254
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	c8 01       	movw	r24, r16
    262e:	0e 94 8b 09 	call	0x1316	; 0x1316 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2632:	e8 89       	ldd	r30, Y+16	; 0x10
    2634:	f9 89       	ldd	r31, Y+17	; 0x11
    2636:	ce 01       	movw	r24, r28
    2638:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    263a:	8a 89       	ldd	r24, Y+18	; 0x12
    263c:	82 ff       	sbrs	r24, 2
    263e:	1b c0       	rjmp	.+54     	; 0x2676 <prvSampleTimeNow+0x8a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2640:	8c 85       	ldd	r24, Y+12	; 0x0c
    2642:	9d 85       	ldd	r25, Y+13	; 0x0d
    2644:	8a 0d       	add	r24, r10
    2646:	9b 1d       	adc	r25, r11

                if( xReloadTime > xNextExpireTime )
    2648:	a8 16       	cp	r10, r24
    264a:	b9 06       	cpc	r11, r25
    264c:	60 f4       	brcc	.+24     	; 0x2666 <prvSampleTimeNow+0x7a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    264e:	8a 83       	std	Y+2, r24	; 0x02
    2650:	9b 83       	std	Y+3, r25	; 0x03
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2652:	c8 87       	std	Y+8, r28	; 0x08
    2654:	d9 87       	std	Y+9, r29	; 0x09
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2656:	b8 01       	movw	r22, r16
    2658:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <pxCurrentTimerList>
    265c:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <pxCurrentTimerList+0x1>
    2660:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <vListInsert>
    2664:	08 c0       	rjmp	.+16     	; 0x2676 <prvSampleTimeNow+0x8a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2666:	00 e0       	ldi	r16, 0x00	; 0
    2668:	10 e0       	ldi	r17, 0x00	; 0
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	a5 01       	movw	r20, r10
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	ce 01       	movw	r24, r28
    2674:	79 df       	rcall	.-270    	; 0x2568 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2676:	e0 91 bf 22 	lds	r30, 0x22BF	; 0x8022bf <pxCurrentTimerList>
    267a:	f0 91 c0 22 	lds	r31, 0x22C0	; 0x8022c0 <pxCurrentTimerList+0x1>
    267e:	80 81       	ld	r24, Z
    2680:	81 11       	cpse	r24, r1
    2682:	ca cf       	rjmp	.-108    	; 0x2618 <prvSampleTimeNow+0x2c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2684:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <pxOverflowTimerList>
    2688:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <pxOverflowTimerList+0x1>
    268c:	80 93 bf 22 	sts	0x22BF, r24	; 0x8022bf <pxCurrentTimerList>
    2690:	90 93 c0 22 	sts	0x22C0, r25	; 0x8022c0 <pxCurrentTimerList+0x1>
        pxOverflowTimerList = pxTemp;
    2694:	e0 93 bd 22 	sts	0x22BD, r30	; 0x8022bd <pxOverflowTimerList>
    2698:	f0 93 be 22 	sts	0x22BE, r31	; 0x8022be <pxOverflowTimerList+0x1>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	f6 01       	movw	r30, r12
    26a0:	80 83       	st	Z, r24
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <prvSampleTimeNow+0xbc>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    26a4:	f6 01       	movw	r30, r12
    26a6:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    26a8:	e0 92 b7 22 	sts	0x22B7, r14	; 0x8022b7 <xLastTime.4399>
    26ac:	f0 92 b8 22 	sts	0x22B8, r15	; 0x8022b8 <xLastTime.4399+0x1>

        return xTimeNow;
    }
    26b0:	c7 01       	movw	r24, r14
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	bf 90       	pop	r11
    26c4:	af 90       	pop	r10
    26c6:	08 95       	ret

000026c8 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <prvTimerTask+0x6>
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <prvTimerTask+0x8>
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26d4:	ce 01       	movw	r24, r28
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	5c 01       	movw	r10, r24
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26da:	e8 2e       	mov	r14, r24
    26dc:	fb 2c       	mov	r15, r11
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    26de:	e0 91 bf 22 	lds	r30, 0x22BF	; 0x8022bf <pxCurrentTimerList>
    26e2:	f0 91 c0 22 	lds	r31, 0x22C0	; 0x8022c0 <pxCurrentTimerList+0x1>
    26e6:	80 81       	ld	r24, Z

        if( *pxListWasEmpty == pdFALSE )
    26e8:	88 23       	and	r24, r24
    26ea:	09 f4       	brne	.+2      	; 0x26ee <prvTimerTask+0x26>
    26ec:	cf c0       	rjmp	.+414    	; 0x288c <prvTimerTask+0x1c4>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    26ee:	05 80       	ldd	r0, Z+5	; 0x05
    26f0:	f6 81       	ldd	r31, Z+6	; 0x06
    26f2:	e0 2d       	mov	r30, r0
    26f4:	c0 80       	ld	r12, Z
    26f6:	d1 80       	ldd	r13, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    26f8:	47 dc       	rcall	.-1906   	; 0x1f88 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26fa:	c5 01       	movw	r24, r10
    26fc:	77 df       	rcall	.-274    	; 0x25ec <prvSampleTimeNow>
    26fe:	8c 01       	movw	r16, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	81 11       	cpse	r24, r1
    2704:	46 c0       	rjmp	.+140    	; 0x2792 <prvTimerTask+0xca>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2706:	0c 15       	cp	r16, r12
    2708:	1d 05       	cpc	r17, r13
                {
                    ( void ) xTaskResumeAll();
    270a:	a0 f1       	brcs	.+104    	; 0x2774 <prvTimerTask+0xac>
    270c:	05 dd       	rcall	.-1526   	; 0x2118 <xTaskResumeAll>

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    270e:	e0 91 bf 22 	lds	r30, 0x22BF	; 0x8022bf <pxCurrentTimerList>
    2712:	f0 91 c0 22 	lds	r31, 0x22C0	; 0x8022c0 <pxCurrentTimerList+0x1>
    2716:	05 80       	ldd	r0, Z+5	; 0x05
    2718:	f6 81       	ldd	r31, Z+6	; 0x06
    271a:	e0 2d       	mov	r30, r0
    271c:	86 80       	ldd	r8, Z+6	; 0x06
    271e:	97 80       	ldd	r9, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2720:	c4 01       	movw	r24, r8
    2722:	02 96       	adiw	r24, 0x02	; 2
    2724:	0e 94 8b 09 	call	0x1316	; 0x1316 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2728:	d4 01       	movw	r26, r8
    272a:	52 96       	adiw	r26, 0x12	; 18
    272c:	8c 91       	ld	r24, X
    272e:	52 97       	sbiw	r26, 0x12	; 18
    2730:	82 ff       	sbrs	r24, 2
    2732:	15 c0       	rjmp	.+42     	; 0x275e <prvTimerTask+0x96>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2734:	1c 96       	adiw	r26, 0x0c	; 12
    2736:	6d 91       	ld	r22, X+
    2738:	7c 91       	ld	r23, X
    273a:	1d 97       	sbiw	r26, 0x0d	; 13
    273c:	6c 0d       	add	r22, r12
    273e:	7d 1d       	adc	r23, r13
    2740:	96 01       	movw	r18, r12
    2742:	a8 01       	movw	r20, r16
    2744:	c4 01       	movw	r24, r8
    2746:	99 de       	rcall	.-718    	; 0x247a <prvInsertTimerInActiveList>
    2748:	88 23       	and	r24, r24
    274a:	61 f0       	breq	.+24     	; 0x2764 <prvTimerTask+0x9c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    274c:	00 e0       	ldi	r16, 0x00	; 0
    274e:	10 e0       	ldi	r17, 0x00	; 0
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	a6 01       	movw	r20, r12
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	c4 01       	movw	r24, r8
    275a:	06 df       	rcall	.-500    	; 0x2568 <xTimerGenericCommand>
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <prvTimerTask+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    275e:	8e 7f       	andi	r24, 0xFE	; 254
    2760:	f4 01       	movw	r30, r8
    2762:	82 8b       	std	Z+18, r24	; 0x12
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2764:	d4 01       	movw	r26, r8
    2766:	50 96       	adiw	r26, 0x10	; 16
    2768:	ed 91       	ld	r30, X+
    276a:	fc 91       	ld	r31, X
    276c:	51 97       	sbiw	r26, 0x11	; 17
    276e:	c4 01       	movw	r24, r8
    2770:	19 95       	eicall
    2772:	80 c0       	rjmp	.+256    	; 0x2874 <prvTimerTask+0x1ac>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2774:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2776:	b6 01       	movw	r22, r12
    2778:	60 1b       	sub	r22, r16
    277a:	71 0b       	sbc	r23, r17
    277c:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <xTimerQueue>
    2780:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <xTimerQueue+0x1>

                    if( xTaskResumeAll() == pdFALSE )
    2784:	55 da       	rcall	.-2902   	; 0x1c30 <vQueueWaitForMessageRestricted>
    2786:	c8 dc       	rcall	.-1648   	; 0x2118 <xTaskResumeAll>
    2788:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    278a:	74 c0       	rjmp	.+232    	; 0x2874 <prvTimerTask+0x1ac>
    278c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2790:	71 c0       	rjmp	.+226    	; 0x2874 <prvTimerTask+0x1ac>
    2792:	c2 dc       	rcall	.-1660   	; 0x2118 <xTaskResumeAll>
    2794:	6f c0       	rjmp	.+222    	; 0x2874 <prvTimerTask+0x1ac>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 23       	and	r24, r24
    279a:	0c f4       	brge	.+2      	; 0x279e <prvTimerTask+0xd6>
    279c:	6b c0       	rjmp	.+214    	; 0x2874 <prvTimerTask+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    279e:	cc 80       	ldd	r12, Y+4	; 0x04
    27a0:	dd 80       	ldd	r13, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    27a2:	f6 01       	movw	r30, r12
    27a4:	82 85       	ldd	r24, Z+10	; 0x0a
    27a6:	93 85       	ldd	r25, Z+11	; 0x0b
    27a8:	89 2b       	or	r24, r25
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    27aa:	21 f0       	breq	.+8      	; 0x27b4 <prvTimerTask+0xec>
    27ac:	c6 01       	movw	r24, r12
    27ae:	02 96       	adiw	r24, 0x02	; 2
    27b0:	0e 94 8b 09 	call	0x1316	; 0x1316 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27b4:	ce 01       	movw	r24, r28
    27b6:	06 96       	adiw	r24, 0x06	; 6
    27b8:	19 df       	rcall	.-462    	; 0x25ec <prvSampleTimeNow>
    27ba:	ac 01       	movw	r20, r24

                switch( xMessage.xMessageID )
    27bc:	e9 81       	ldd	r30, Y+1	; 0x01
    27be:	0e 2e       	mov	r0, r30
    27c0:	00 0c       	add	r0, r0
    27c2:	ff 0b       	sbc	r31, r31
    27c4:	ea 30       	cpi	r30, 0x0A	; 10
    27c6:	f1 05       	cpc	r31, r1
    27c8:	08 f0       	brcs	.+2      	; 0x27cc <prvTimerTask+0x104>
    27ca:	54 c0       	rjmp	.+168    	; 0x2874 <prvTimerTask+0x1ac>
    27cc:	88 27       	eor	r24, r24
    27ce:	e2 50       	subi	r30, 0x02	; 2
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	8f 4f       	sbci	r24, 0xFF	; 255
    27d4:	27 c3       	rjmp	.+1614   	; 0x2e24 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    27d6:	d6 01       	movw	r26, r12
    27d8:	52 96       	adiw	r26, 0x12	; 18
    27da:	8c 91       	ld	r24, X
    27dc:	52 97       	sbiw	r26, 0x12	; 18
    27de:	81 60       	ori	r24, 0x01	; 1
    27e0:	52 96       	adiw	r26, 0x12	; 18
    27e2:	8c 93       	st	X, r24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    27e4:	52 97       	sbiw	r26, 0x12	; 18
    27e6:	2a 81       	ldd	r18, Y+2	; 0x02
    27e8:	3b 81       	ldd	r19, Y+3	; 0x03
    27ea:	1c 96       	adiw	r26, 0x0c	; 12
    27ec:	6d 91       	ld	r22, X+
    27ee:	7c 91       	ld	r23, X
    27f0:	1d 97       	sbiw	r26, 0x0d	; 13
    27f2:	62 0f       	add	r22, r18
    27f4:	73 1f       	adc	r23, r19
    27f6:	c6 01       	movw	r24, r12
    27f8:	40 de       	rcall	.-896    	; 0x247a <prvInsertTimerInActiveList>
    27fa:	88 23       	and	r24, r24
    27fc:	d9 f1       	breq	.+118    	; 0x2874 <prvTimerTask+0x1ac>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    27fe:	d6 01       	movw	r26, r12
    2800:	50 96       	adiw	r26, 0x10	; 16
    2802:	ed 91       	ld	r30, X+
    2804:	fc 91       	ld	r31, X
    2806:	51 97       	sbiw	r26, 0x11	; 17
    2808:	c6 01       	movw	r24, r12
    280a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    280c:	f6 01       	movw	r30, r12
    280e:	82 89       	ldd	r24, Z+18	; 0x12
    2810:	82 ff       	sbrs	r24, 2
    2812:	30 c0       	rjmp	.+96     	; 0x2874 <prvTimerTask+0x1ac>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2814:	4a 81       	ldd	r20, Y+2	; 0x02
    2816:	5b 81       	ldd	r21, Y+3	; 0x03
    2818:	84 85       	ldd	r24, Z+12	; 0x0c
    281a:	95 85       	ldd	r25, Z+13	; 0x0d
    281c:	48 0f       	add	r20, r24
    281e:	59 1f       	adc	r21, r25
    2820:	00 e0       	ldi	r16, 0x00	; 0
    2822:	10 e0       	ldi	r17, 0x00	; 0
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	c6 01       	movw	r24, r12
    282c:	9d de       	rcall	.-710    	; 0x2568 <xTimerGenericCommand>
    282e:	22 c0       	rjmp	.+68     	; 0x2874 <prvTimerTask+0x1ac>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2830:	d6 01       	movw	r26, r12
    2832:	52 96       	adiw	r26, 0x12	; 18
    2834:	8c 91       	ld	r24, X
    2836:	52 97       	sbiw	r26, 0x12	; 18
    2838:	8e 7f       	andi	r24, 0xFE	; 254
    283a:	52 96       	adiw	r26, 0x12	; 18
    283c:	8c 93       	st	X, r24
    283e:	1a c0       	rjmp	.+52     	; 0x2874 <prvTimerTask+0x1ac>
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2840:	f6 01       	movw	r30, r12
    2842:	82 89       	ldd	r24, Z+18	; 0x12
    2844:	81 60       	ori	r24, 0x01	; 1
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2846:	82 8b       	std	Z+18, r24	; 0x12
    2848:	6a 81       	ldd	r22, Y+2	; 0x02
    284a:	7b 81       	ldd	r23, Y+3	; 0x03
    284c:	64 87       	std	Z+12, r22	; 0x0c
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    284e:	75 87       	std	Z+13, r23	; 0x0d
    2850:	64 0f       	add	r22, r20
    2852:	75 1f       	adc	r23, r21
    2854:	9a 01       	movw	r18, r20
    2856:	c6 01       	movw	r24, r12
    2858:	10 de       	rcall	.-992    	; 0x247a <prvInsertTimerInActiveList>
    285a:	0c c0       	rjmp	.+24     	; 0x2874 <prvTimerTask+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    285c:	d6 01       	movw	r26, r12
    285e:	52 96       	adiw	r26, 0x12	; 18
    2860:	8c 91       	ld	r24, X
    2862:	81 fd       	sbrc	r24, 1
    2864:	04 c0       	rjmp	.+8      	; 0x286e <prvTimerTask+0x1a6>
                                {
                                    vPortFree( pxTimer );
    2866:	c6 01       	movw	r24, r12
    2868:	0e 94 2d 0b 	call	0x165a	; 0x165a <vPortFree>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    286c:	03 c0       	rjmp	.+6      	; 0x2874 <prvTimerTask+0x1ac>
    286e:	8e 7f       	andi	r24, 0xFE	; 254
    2870:	f6 01       	movw	r30, r12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2872:	82 8b       	std	Z+18, r24	; 0x12
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	6e 2d       	mov	r22, r14
    287a:	7f 2d       	mov	r23, r15
    287c:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <xTimerQueue>
    2880:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <xTimerQueue+0x1>
    2884:	d8 d8       	rcall	.-3664   	; 0x1a36 <xQueueReceive>
    2886:	81 11       	cpse	r24, r1
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2888:	86 cf       	rjmp	.-244    	; 0x2796 <prvTimerTask+0xce>
    288a:	29 cf       	rjmp	.-430    	; 0x26de <prvTimerTask+0x16>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    288c:	7d db       	rcall	.-2310   	; 0x1f88 <vTaskSuspendAll>
    288e:	c5 01       	movw	r24, r10
    2890:	ad de       	rcall	.-678    	; 0x25ec <prvSampleTimeNow>
    2892:	8c 01       	movw	r16, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	81 11       	cpse	r24, r1
    2898:	7c cf       	rjmp	.-264    	; 0x2792 <prvTimerTask+0xca>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    289a:	e0 91 bd 22 	lds	r30, 0x22BD	; 0x8022bd <pxOverflowTimerList>
    289e:	f0 91 be 22 	lds	r31, 0x22BE	; 0x8022be <pxOverflowTimerList+0x1>
    28a2:	80 81       	ld	r24, Z
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	81 11       	cpse	r24, r1
    28a8:	40 e0       	ldi	r20, 0x00	; 0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    28aa:	c1 2c       	mov	r12, r1
    28ac:	d1 2c       	mov	r13, r1
    28ae:	63 cf       	rjmp	.-314    	; 0x2776 <prvTimerTask+0xae>

000028b0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    28ba:	c6 2f       	mov	r28, r22
    28bc:	d0 e0       	ldi	r29, 0x00	; 0
    28be:	de 01       	movw	r26, r28
    28c0:	02 2e       	mov	r0, r18
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <ioport_configure_port_pin+0x18>
    28c4:	b5 95       	asr	r27
    28c6:	a7 95       	ror	r26
    28c8:	0a 94       	dec	r0
    28ca:	e2 f7       	brpl	.-8      	; 0x28c4 <ioport_configure_port_pin+0x14>
    28cc:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    28ce:	50 8b       	std	Z+16, r21	; 0x10
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    28d6:	28 30       	cpi	r18, 0x08	; 8
    28d8:	31 05       	cpc	r19, r1
    28da:	89 f7       	brne	.-30     	; 0x28be <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    28dc:	40 ff       	sbrs	r20, 0
    28de:	0a c0       	rjmp	.+20     	; 0x28f4 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    28e0:	41 ff       	sbrs	r20, 1
    28e2:	03 c0       	rjmp	.+6      	; 0x28ea <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    28e4:	fc 01       	movw	r30, r24
    28e6:	65 83       	std	Z+5, r22	; 0x05
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    28ea:	fc 01       	movw	r30, r24
    28ec:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    28ee:	fc 01       	movw	r30, r24
    28f0:	61 83       	std	Z+1, r22	; 0x01
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    28f4:	fc 01       	movw	r30, r24
    28f6:	62 83       	std	Z+2, r22	; 0x02
	}
}
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    28fe:	43 e0       	ldi	r20, 0x03	; 3
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	80 ee       	ldi	r24, 0xE0	; 224
    2906:	97 e0       	ldi	r25, 0x07	; 7
    2908:	d3 df       	rcall	.-90     	; 0x28b0 <ioport_configure_port_pin>
    290a:	43 e0       	ldi	r20, 0x03	; 3
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	80 ee       	ldi	r24, 0xE0	; 224
    2912:	97 e0       	ldi	r25, 0x07	; 7
    2914:	cd df       	rcall	.-102    	; 0x28b0 <ioport_configure_port_pin>
    2916:	43 e0       	ldi	r20, 0x03	; 3
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	60 e1       	ldi	r22, 0x10	; 16
    291c:	80 e6       	ldi	r24, 0x60	; 96
    291e:	96 e0       	ldi	r25, 0x06	; 6
    2920:	c7 df       	rcall	.-114    	; 0x28b0 <ioport_configure_port_pin>
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	50 e4       	ldi	r21, 0x40	; 64
    2926:	60 e2       	ldi	r22, 0x20	; 32
    2928:	80 e6       	ldi	r24, 0x60	; 96
    292a:	96 e0       	ldi	r25, 0x06	; 6
    292c:	c1 df       	rcall	.-126    	; 0x28b0 <ioport_configure_port_pin>
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	5b e1       	ldi	r21, 0x1B	; 27
    2932:	60 e2       	ldi	r22, 0x20	; 32
    2934:	80 e8       	ldi	r24, 0x80	; 128
    2936:	96 e0       	ldi	r25, 0x06	; 6
    2938:	bb df       	rcall	.-138    	; 0x28b0 <ioport_configure_port_pin>
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	5b e1       	ldi	r21, 0x1B	; 27
    293e:	62 e0       	ldi	r22, 0x02	; 2
    2940:	80 ea       	ldi	r24, 0xA0	; 160
    2942:	96 e0       	ldi	r25, 0x06	; 6
    2944:	b5 df       	rcall	.-150    	; 0x28b0 <ioport_configure_port_pin>
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	5b e1       	ldi	r21, 0x1B	; 27
    294a:	64 e0       	ldi	r22, 0x04	; 4
    294c:	80 ea       	ldi	r24, 0xA0	; 160
    294e:	96 e0       	ldi	r25, 0x06	; 6
    2950:	af df       	rcall	.-162    	; 0x28b0 <ioport_configure_port_pin>
    2952:	43 e0       	ldi	r20, 0x03	; 3
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	62 e0       	ldi	r22, 0x02	; 2
    2958:	80 e6       	ldi	r24, 0x60	; 96
    295a:	96 e0       	ldi	r25, 0x06	; 6
    295c:	a9 df       	rcall	.-174    	; 0x28b0 <ioport_configure_port_pin>
    295e:	43 e0       	ldi	r20, 0x03	; 3
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	68 e0       	ldi	r22, 0x08	; 8
    2964:	80 e6       	ldi	r24, 0x60	; 96
    2966:	96 e0       	ldi	r25, 0x06	; 6
    2968:	a3 df       	rcall	.-186    	; 0x28b0 <ioport_configure_port_pin>
    296a:	43 e0       	ldi	r20, 0x03	; 3
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	68 e0       	ldi	r22, 0x08	; 8
    2970:	80 ea       	ldi	r24, 0xA0	; 160
    2972:	96 e0       	ldi	r25, 0x06	; 6
    2974:	9d df       	rcall	.-198    	; 0x28b0 <ioport_configure_port_pin>
    2976:	43 e0       	ldi	r20, 0x03	; 3
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	80 e6       	ldi	r24, 0x60	; 96
    297e:	96 e0       	ldi	r25, 0x06	; 6
    2980:	97 df       	rcall	.-210    	; 0x28b0 <ioport_configure_port_pin>
    2982:	43 e0       	ldi	r20, 0x03	; 3
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	68 e0       	ldi	r22, 0x08	; 8
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	96 e0       	ldi	r25, 0x06	; 6
    298c:	91 df       	rcall	.-222    	; 0x28b0 <ioport_configure_port_pin>
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	60 e1       	ldi	r22, 0x10	; 16
    2994:	80 e8       	ldi	r24, 0x80	; 128
    2996:	96 e0       	ldi	r25, 0x06	; 6
    2998:	8b df       	rcall	.-234    	; 0x28b0 <ioport_configure_port_pin>
    299a:	43 e0       	ldi	r20, 0x03	; 3
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	62 e0       	ldi	r22, 0x02	; 2
    29a0:	80 e6       	ldi	r24, 0x60	; 96
    29a2:	96 e0       	ldi	r25, 0x06	; 6
    29a4:	85 df       	rcall	.-246    	; 0x28b0 <ioport_configure_port_pin>
    29a6:	43 e0       	ldi	r20, 0x03	; 3
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	68 e0       	ldi	r22, 0x08	; 8
    29ac:	80 e6       	ldi	r24, 0x60	; 96
    29ae:	96 e0       	ldi	r25, 0x06	; 6
    29b0:	7f df       	rcall	.-258    	; 0x28b0 <ioport_configure_port_pin>
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	64 e0       	ldi	r22, 0x04	; 4
    29b8:	80 e6       	ldi	r24, 0x60	; 96
    29ba:	96 e0       	ldi	r25, 0x06	; 6
    29bc:	79 df       	rcall	.-270    	; 0x28b0 <ioport_configure_port_pin>
    29be:	43 e0       	ldi	r20, 0x03	; 3
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	60 e1       	ldi	r22, 0x10	; 16
    29c4:	80 ea       	ldi	r24, 0xA0	; 160
    29c6:	96 e0       	ldi	r25, 0x06	; 6
    29c8:	73 df       	rcall	.-282    	; 0x28b0 <ioport_configure_port_pin>
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	96 e0       	ldi	r25, 0x06	; 6
    29d4:	6d df       	rcall	.-294    	; 0x28b0 <ioport_configure_port_pin>
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	64 e0       	ldi	r22, 0x04	; 4
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	96 e0       	ldi	r25, 0x06	; 6
    29e0:	67 df       	rcall	.-306    	; 0x28b0 <ioport_configure_port_pin>
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	62 e0       	ldi	r22, 0x02	; 2
    29e8:	80 e2       	ldi	r24, 0x20	; 32
    29ea:	96 e0       	ldi	r25, 0x06	; 6
    29ec:	61 df       	rcall	.-318    	; 0x28b0 <ioport_configure_port_pin>
    29ee:	43 e0       	ldi	r20, 0x03	; 3
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	68 e0       	ldi	r22, 0x08	; 8
    29f4:	80 e4       	ldi	r24, 0x40	; 64
    29f6:	96 e0       	ldi	r25, 0x06	; 6
    29f8:	5b df       	rcall	.-330    	; 0x28b0 <ioport_configure_port_pin>
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	64 e0       	ldi	r22, 0x04	; 4
    2a00:	80 e4       	ldi	r24, 0x40	; 64
    2a02:	96 e0       	ldi	r25, 0x06	; 6
    2a04:	55 df       	rcall	.-342    	; 0x28b0 <ioport_configure_port_pin>
    2a06:	43 e0       	ldi	r20, 0x03	; 3
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	68 e0       	ldi	r22, 0x08	; 8
    2a0c:	80 e6       	ldi	r24, 0x60	; 96
    2a0e:	96 e0       	ldi	r25, 0x06	; 6
    2a10:	4f df       	rcall	.-354    	; 0x28b0 <ioport_configure_port_pin>
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	64 e0       	ldi	r22, 0x04	; 4
    2a18:	80 e6       	ldi	r24, 0x60	; 96
    2a1a:	96 e0       	ldi	r25, 0x06	; 6
    2a1c:	49 df       	rcall	.-366    	; 0x28b0 <ioport_configure_port_pin>
    2a1e:	43 e0       	ldi	r20, 0x03	; 3
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	68 e0       	ldi	r22, 0x08	; 8
    2a24:	80 e8       	ldi	r24, 0x80	; 128
    2a26:	96 e0       	ldi	r25, 0x06	; 6
    2a28:	43 df       	rcall	.-378    	; 0x28b0 <ioport_configure_port_pin>
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	64 e0       	ldi	r22, 0x04	; 4
    2a30:	80 e8       	ldi	r24, 0x80	; 128
    2a32:	96 e0       	ldi	r25, 0x06	; 6
    2a34:	3d cf       	rjmp	.-390    	; 0x28b0 <ioport_configure_port_pin>
    2a36:	08 95       	ret

00002a38 <buzzerEvenOdd>:
uint16_t counter = 0;
int led0_cnt = 0;
int led1_cnt = 0;

static void buzzerEvenOdd() {
	if (counter % 2 == 0) {
    2a38:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <counter>
    2a3c:	80 fd       	sbrc	r24, 0
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <buzzerEvenOdd+0x10>
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7be645>
    2a46:	08 95       	ret
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7be646>
    2a4e:	08 95       	ret

00002a50 <vCounter>:
		
		vTaskDelay(10/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vCounter, r_) {
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	c0 58       	subi	r28, 0x80	; 128
    2a5a:	d1 09       	sbc	r29, r1
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	de bf       	out	0x3e, r29	; 62
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
			counter++;
			snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2a60:	0f 2e       	mov	r0, r31
    2a62:	fa e1       	ldi	r31, 0x1A	; 26
    2a64:	ef 2e       	mov	r14, r31
    2a66:	f0 e2       	ldi	r31, 0x20	; 32
    2a68:	ff 2e       	mov	r15, r31
    2a6a:	f0 2d       	mov	r31, r0
    2a6c:	68 94       	set
    2a6e:	dd 24       	eor	r13, r13
    2a70:	d7 f8       	bld	r13, 7
    2a72:	8e 01       	movw	r16, r28
    2a74:	0f 5f       	subi	r16, 0xFF	; 255
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
static portTASK_FUNCTION(vCounter, r_) {
	char strbuf[128];
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2a78:	6a e0       	ldi	r22, 0x0A	; 10
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <xSemaphore>
    2a80:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <xSemaphore+0x1>
    2a84:	5c d8       	rcall	.-3912   	; 0x1b3e <xQueueSemaphoreTake>
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	39 f5       	brne	.+78     	; 0x2ad8 <vCounter+0x88>
			counter++;
    2a8a:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <counter>
    2a8e:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <counter+0x1>
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	80 93 d7 22 	sts	0x22D7, r24	; 0x8022d7 <counter>
    2a98:	90 93 d8 22 	sts	0x22D8, r25	; 0x8022d8 <counter+0x1>
			snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2a9c:	9f 93       	push	r25
    2a9e:	8f 93       	push	r24
    2aa0:	ff 92       	push	r15
    2aa2:	ef 92       	push	r14
    2aa4:	1f 92       	push	r1
    2aa6:	df 92       	push	r13
    2aa8:	1f 93       	push	r17
    2aaa:	0f 93       	push	r16
    2aac:	ed d2       	rcall	.+1498   	; 0x3088 <snprintf>
			gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2aae:	26 e0       	ldi	r18, 0x06	; 6
    2ab0:	30 e2       	ldi	r19, 0x20	; 32
    2ab2:	48 e0       	ldi	r20, 0x08	; 8
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>
			
			buzzerEvenOdd();
    2abc:	bd df       	rcall	.-134    	; 0x2a38 <buzzerEvenOdd>
			
			xSemaphoreGive(xSemaphore);	
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <xSemaphore>
    2acc:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <xSemaphore+0x1>
    2ad0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xQueueGenericSend>
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	de bf       	out	0x3e, r29	; 62
		}
		
		vTaskDelay(100/portTICK_PERIOD_MS);
    2ad8:	82 e3       	ldi	r24, 0x32	; 50
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9a db       	rcall	.-2252   	; 0x2212 <vTaskDelay>
	}	
    2ade:	cc cf       	rjmp	.-104    	; 0x2a78 <vCounter+0x28>

00002ae0 <vPushButton1>:
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(200/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vPushButton1, s_) {
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	c0 58       	subi	r28, 0x80	; 128
    2aea:	d1 09       	sbc	r29, r1
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	de bf       	out	0x3e, r29	; 62

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2af0:	00 ea       	ldi	r16, 0xA0	; 160
    2af2:	16 e0       	ldi	r17, 0x06	; 6
				xSemaphoreGive(xSemaphore);
			}
		} else if (ioport_get_pin_level(GPIO_PUSH_BUTTON_2)==0){
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
				counter--;
				snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2af4:	0f 2e       	mov	r0, r31
    2af6:	fa e1       	ldi	r31, 0x1A	; 26
    2af8:	cf 2e       	mov	r12, r31
    2afa:	f0 e2       	ldi	r31, 0x20	; 32
    2afc:	df 2e       	mov	r13, r31
    2afe:	f0 2d       	mov	r31, r0
    2b00:	68 94       	set
    2b02:	bb 24       	eor	r11, r11
    2b04:	b7 f8       	bld	r11, 7
    2b06:	ce 01       	movw	r24, r28
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	7c 01       	movw	r14, r24
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	80 85       	ldd	r24, Z+8	; 0x08
static portTASK_FUNCTION(vPushButton1, s_) {
	char strbuf[128];
	
	while(1) {
		
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
    2b10:	81 fd       	sbrc	r24, 1
    2b12:	32 c0       	rjmp	.+100    	; 0x2b78 <vPushButton1+0x98>
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2b14:	6a e0       	ldi	r22, 0x0A	; 10
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <xSemaphore>
    2b1c:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <xSemaphore+0x1>
    2b20:	0e d8       	rcall	.-4068   	; 0x1b3e <xQueueSemaphoreTake>
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <vPushButton1+0x48>
    2b26:	5d c0       	rjmp	.+186    	; 0x2be2 <vPushButton1+0x102>
				counter++;
    2b28:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <counter>
    2b2c:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <counter+0x1>
    2b30:	01 96       	adiw	r24, 0x01	; 1
    2b32:	80 93 d7 22 	sts	0x22D7, r24	; 0x8022d7 <counter>
    2b36:	90 93 d8 22 	sts	0x22D8, r25	; 0x8022d8 <counter+0x1>
				snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2b3a:	9f 93       	push	r25
    2b3c:	8f 93       	push	r24
    2b3e:	df 92       	push	r13
    2b40:	cf 92       	push	r12
    2b42:	1f 92       	push	r1
    2b44:	bf 92       	push	r11
    2b46:	ff 92       	push	r15
    2b48:	ef 92       	push	r14
    2b4a:	9e d2       	rcall	.+1340   	; 0x3088 <snprintf>
				gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2b4c:	26 e0       	ldi	r18, 0x06	; 6
    2b4e:	30 e2       	ldi	r19, 0x20	; 32
    2b50:	48 e0       	ldi	r20, 0x08	; 8
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	c7 01       	movw	r24, r14
    2b56:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>
				buzzerEvenOdd();
    2b5a:	6e df       	rcall	.-292    	; 0x2a38 <buzzerEvenOdd>
				xSemaphoreGive(xSemaphore);
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <xSemaphore>
    2b6a:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <xSemaphore+0x1>
    2b6e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xQueueGenericSend>
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	35 c0       	rjmp	.+106    	; 0x2be2 <vPushButton1+0x102>
    2b78:	f8 01       	movw	r30, r16
    2b7a:	80 85       	ldd	r24, Z+8	; 0x08
			}
		} else if (ioport_get_pin_level(GPIO_PUSH_BUTTON_2)==0){
    2b7c:	82 fd       	sbrc	r24, 2
    2b7e:	31 c0       	rjmp	.+98     	; 0x2be2 <vPushButton1+0x102>
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2b80:	6a e0       	ldi	r22, 0x0A	; 10
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <xSemaphore>
    2b88:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <xSemaphore+0x1>
    2b8c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xQueueSemaphoreTake>
    2b90:	81 30       	cpi	r24, 0x01	; 1
    2b92:	39 f5       	brne	.+78     	; 0x2be2 <vPushButton1+0x102>
				counter--;
    2b94:	80 91 d7 22 	lds	r24, 0x22D7	; 0x8022d7 <counter>
    2b98:	90 91 d8 22 	lds	r25, 0x22D8	; 0x8022d8 <counter+0x1>
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	80 93 d7 22 	sts	0x22D7, r24	; 0x8022d7 <counter>
    2ba2:	90 93 d8 22 	sts	0x22D8, r25	; 0x8022d8 <counter+0x1>
				snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2ba6:	9f 93       	push	r25
    2ba8:	8f 93       	push	r24
    2baa:	df 92       	push	r13
    2bac:	cf 92       	push	r12
    2bae:	1f 92       	push	r1
    2bb0:	bf 92       	push	r11
    2bb2:	ff 92       	push	r15
    2bb4:	ef 92       	push	r14
    2bb6:	68 d2       	rcall	.+1232   	; 0x3088 <snprintf>
				gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2bb8:	26 e0       	ldi	r18, 0x06	; 6
    2bba:	30 e2       	ldi	r19, 0x20	; 32
    2bbc:	48 e0       	ldi	r20, 0x08	; 8
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	c7 01       	movw	r24, r14
    2bc2:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>
				buzzerEvenOdd();
    2bc6:	38 df       	rcall	.-400    	; 0x2a38 <buzzerEvenOdd>
				xSemaphoreGive(xSemaphore);
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	70 e0       	ldi	r23, 0x00	; 0
    2bd2:	80 91 d9 22 	lds	r24, 0x22D9	; 0x8022d9 <xSemaphore>
    2bd6:	90 91 da 22 	lds	r25, 0x22DA	; 0x8022da <xSemaphore+0x1>
    2bda:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xQueueGenericSend>
    2bde:	cd bf       	out	0x3d, r28	; 61
			}
		}
		
		vTaskDelay(10/portTICK_PERIOD_MS);
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	85 e0       	ldi	r24, 0x05	; 5
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	15 db       	rcall	.-2518   	; 0x2212 <vTaskDelay>
	}
    2be8:	91 cf       	rjmp	.-222    	; 0x2b0c <vPushButton1+0x2c>

00002bea <vBlinkLed1>:
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vBlinkLed1, q_) {	
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	c0 58       	subi	r28, 0x80	; 128
    2bf4:	d1 09       	sbc	r29, r1
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed1 = 0;
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2bfe:	0f 2e       	mov	r0, r31
    2c00:	f0 ee       	ldi	r31, 0xE0	; 224
    2c02:	af 2e       	mov	r10, r31
    2c04:	f7 e0       	ldi	r31, 0x07	; 7
    2c06:	bf 2e       	mov	r11, r31
    2c08:	f0 2d       	mov	r31, r0
    2c0a:	68 94       	set
    2c0c:	88 24       	eor	r8, r8
    2c0e:	81 f8       	bld	r8, 1
	
	while(1) {
		flagLed1 = !flagLed1;
		led1_cnt++;
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d ", led1_cnt);
    2c10:	0f 2e       	mov	r0, r31
    2c12:	f8 e2       	ldi	r31, 0x28	; 40
    2c14:	cf 2e       	mov	r12, r31
    2c16:	f0 e2       	ldi	r31, 0x20	; 32
    2c18:	df 2e       	mov	r13, r31
    2c1a:	f0 2d       	mov	r31, r0
    2c1c:	68 94       	set
    2c1e:	99 24       	eor	r9, r9
    2c20:	97 f8       	bld	r9, 7
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	7c 01       	movw	r14, r24
static portTASK_FUNCTION(vBlinkLed1, q_) {	
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2c28:	01 e0       	ldi	r16, 0x01	; 1
    2c2a:	21 15       	cp	r18, r1
    2c2c:	31 05       	cpc	r19, r1
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <vBlinkLed1+0x48>
    2c30:	00 e0       	ldi	r16, 0x00	; 0
    2c32:	10 e0       	ldi	r17, 0x00	; 0
		led1_cnt++;
    2c34:	80 91 d3 22 	lds	r24, 0x22D3	; 0x8022d3 <led1_cnt>
    2c38:	90 91 d4 22 	lds	r25, 0x22D4	; 0x8022d4 <led1_cnt+0x1>
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	80 93 d3 22 	sts	0x22D3, r24	; 0x8022d3 <led1_cnt>
    2c42:	90 93 d4 22 	sts	0x22D4, r25	; 0x8022d4 <led1_cnt+0x1>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2c46:	23 2b       	or	r18, r19
    2c48:	19 f4       	brne	.+6      	; 0x2c50 <vBlinkLed1+0x66>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2c4a:	f5 01       	movw	r30, r10
    2c4c:	85 82       	std	Z+5, r8	; 0x05
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <vBlinkLed1+0x6a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2c50:	f5 01       	movw	r30, r10
    2c52:	86 82       	std	Z+6, r8	; 0x06
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d ", led1_cnt);
    2c54:	9f 93       	push	r25
    2c56:	8f 93       	push	r24
    2c58:	df 92       	push	r13
    2c5a:	cf 92       	push	r12
    2c5c:	1f 92       	push	r1
    2c5e:	9f 92       	push	r9
    2c60:	ff 92       	push	r15
    2c62:	ef 92       	push	r14
    2c64:	11 d2       	rcall	.+1058   	; 0x3088 <snprintf>
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
    2c66:	26 e0       	ldi	r18, 0x06	; 6
    2c68:	30 e2       	ldi	r19, 0x20	; 32
    2c6a:	48 e1       	ldi	r20, 0x18	; 24
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	c7 01       	movw	r24, r14
    2c70:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>
		vTaskDelay(200/portTICK_PERIOD_MS);
    2c74:	84 e6       	ldi	r24, 0x64	; 100
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	cc da       	rcall	.-2664   	; 0x2212 <vTaskDelay>
	}
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed1, q_) {	
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2c7e:	98 01       	movw	r18, r16
		led1_cnt++;
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d ", led1_cnt);
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(200/portTICK_PERIOD_MS);
	}
    2c80:	d3 cf       	rjmp	.-90     	; 0x2c28 <vBlinkLed1+0x3e>

00002c82 <vBlinkLed0>:
	/* Start the task */
	
	vTaskStartScheduler();
}

static portTASK_FUNCTION(vBlinkLed0, p_) {
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	c0 58       	subi	r28, 0x80	; 128
    2c8c:	d1 09       	sbc	r29, r1
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed0 = 1;
    2c92:	21 e0       	ldi	r18, 0x01	; 1
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	0f 2e       	mov	r0, r31
    2c98:	f0 ee       	ldi	r31, 0xE0	; 224
    2c9a:	af 2e       	mov	r10, r31
    2c9c:	f7 e0       	ldi	r31, 0x07	; 7
    2c9e:	bf 2e       	mov	r11, r31
    2ca0:	f0 2d       	mov	r31, r0
	
	while(1) {
		flagLed0 = !flagLed0;
		led0_cnt++;
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d ", led0_cnt);
    2ca2:	0f 2e       	mov	r0, r31
    2ca4:	f4 e3       	ldi	r31, 0x34	; 52
    2ca6:	cf 2e       	mov	r12, r31
    2ca8:	f0 e2       	ldi	r31, 0x20	; 32
    2caa:	df 2e       	mov	r13, r31
    2cac:	f0 2d       	mov	r31, r0
    2cae:	68 94       	set
    2cb0:	99 24       	eor	r9, r9
    2cb2:	97 f8       	bld	r9, 7
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	7c 01       	movw	r14, r24
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2cba:	01 e0       	ldi	r16, 0x01	; 1
    2cbc:	21 15       	cp	r18, r1
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <vBlinkLed0+0x42>
    2cc2:	00 e0       	ldi	r16, 0x00	; 0
    2cc4:	10 e0       	ldi	r17, 0x00	; 0
		led0_cnt++;
    2cc6:	80 91 d5 22 	lds	r24, 0x22D5	; 0x8022d5 <led0_cnt>
    2cca:	90 91 d6 22 	lds	r25, 0x22D6	; 0x8022d6 <led0_cnt+0x1>
    2cce:	01 96       	adiw	r24, 0x01	; 1
    2cd0:	80 93 d5 22 	sts	0x22D5, r24	; 0x8022d5 <led0_cnt>
    2cd4:	90 93 d6 22 	sts	0x22D6, r25	; 0x8022d6 <led0_cnt+0x1>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2cd8:	23 2b       	or	r18, r19
    2cda:	21 f4       	brne	.+8      	; 0x2ce4 <vBlinkLed0+0x62>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2cdc:	21 e0       	ldi	r18, 0x01	; 1
    2cde:	f5 01       	movw	r30, r10
    2ce0:	25 83       	std	Z+5, r18	; 0x05
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <vBlinkLed0+0x68>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ce4:	21 e0       	ldi	r18, 0x01	; 1
    2ce6:	f5 01       	movw	r30, r10
    2ce8:	26 83       	std	Z+6, r18	; 0x06
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d ", led0_cnt);
    2cea:	9f 93       	push	r25
    2cec:	8f 93       	push	r24
    2cee:	df 92       	push	r13
    2cf0:	cf 92       	push	r12
    2cf2:	1f 92       	push	r1
    2cf4:	9f 92       	push	r9
    2cf6:	ff 92       	push	r15
    2cf8:	ef 92       	push	r14
    2cfa:	c6 d1       	rcall	.+908    	; 0x3088 <snprintf>
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2cfc:	26 e0       	ldi	r18, 0x06	; 6
    2cfe:	30 e2       	ldi	r19, 0x20	; 32
    2d00:	40 e1       	ldi	r20, 0x10	; 16
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	c7 01       	movw	r24, r14
    2d06:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>
		vTaskDelay(100/portTICK_PERIOD_MS);
    2d0a:	82 e3       	ldi	r24, 0x32	; 50
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	81 da       	rcall	.-2814   	; 0x2212 <vTaskDelay>
	}
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2d14:	98 01       	movw	r18, r16
		led0_cnt++;
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d ", led0_cnt);
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
    2d16:	d1 cf       	rjmp	.-94     	; 0x2cba <vBlinkLed0+0x38>

00002d18 <main>:
		ioport_set_pin_level(J1_PIN0, 0);
	}
}

int main (void)
{
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
	//set J1 Pin 0 to output
	ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);

	board_init();
    2d24:	ec dd       	rcall	.-1064   	; 0x28fe <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2d26:	87 e0       	ldi	r24, 0x07	; 7
    2d28:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	pmic_init();
	gfx_mono_init();
    2d2c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2d30:	80 e1       	ldi	r24, 0x10	; 16
    2d32:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	gfx_mono_draw_string("RTOS Steven", 0, 0, &sysfont);
    2d36:	26 e0       	ldi	r18, 0x06	; 6
    2d38:	30 e2       	ldi	r19, 0x20	; 32
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	80 e4       	ldi	r24, 0x40	; 64
    2d40:	90 e2       	ldi	r25, 0x20	; 32
    2d42:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>
	gfx_mono_draw_string("Counter : 0", 0, 8, &sysfont);
    2d46:	26 e0       	ldi	r18, 0x06	; 6
    2d48:	30 e2       	ldi	r19, 0x20	; 32
    2d4a:	48 e0       	ldi	r20, 0x08	; 8
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	8c e4       	ldi	r24, 0x4C	; 76
    2d50:	90 e2       	ldi	r25, 0x20	; 32
    2d52:	0e 94 fe 08 	call	0x11fc	; 0x11fc <gfx_mono_draw_string>

	/* Create the task */
	
	xTaskCreate(vBlinkLed0, "", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);	// higher priority
    2d56:	e1 2c       	mov	r14, r1
    2d58:	f1 2c       	mov	r15, r1
    2d5a:	01 e0       	ldi	r16, 0x01	; 1
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	48 ee       	ldi	r20, 0xE8	; 232
    2d62:	53 e0       	ldi	r21, 0x03	; 3
    2d64:	6f e3       	ldi	r22, 0x3F	; 63
    2d66:	70 e2       	ldi	r23, 0x20	; 32
    2d68:	81 e4       	ldi	r24, 0x41	; 65
    2d6a:	96 e1       	ldi	r25, 0x16	; 22
    2d6c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <xTaskCreate>
	xTaskCreate(vBlinkLed1, "", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);	// higher priority
    2d70:	02 e0       	ldi	r16, 0x02	; 2
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	48 ee       	ldi	r20, 0xE8	; 232
    2d78:	53 e0       	ldi	r21, 0x03	; 3
    2d7a:	6f e3       	ldi	r22, 0x3F	; 63
    2d7c:	70 e2       	ldi	r23, 0x20	; 32
    2d7e:	85 ef       	ldi	r24, 0xF5	; 245
    2d80:	95 e1       	ldi	r25, 0x15	; 21
    2d82:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <xTaskCreate>
	xTaskCreate(vPushButton1, "", 1000, NULL, tskIDLE_PRIORITY + 3, NULL);	// higher priority
    2d86:	03 e0       	ldi	r16, 0x03	; 3
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	48 ee       	ldi	r20, 0xE8	; 232
    2d8e:	53 e0       	ldi	r21, 0x03	; 3
    2d90:	6f e3       	ldi	r22, 0x3F	; 63
    2d92:	70 e2       	ldi	r23, 0x20	; 32
    2d94:	80 e7       	ldi	r24, 0x70	; 112
    2d96:	95 e1       	ldi	r25, 0x15	; 21
    2d98:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <xTaskCreate>
	xTaskCreate(vCounter, "", 1000, NULL, tskIDLE_PRIORITY, NULL);			// low priority
    2d9c:	00 e0       	ldi	r16, 0x00	; 0
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	48 ee       	ldi	r20, 0xE8	; 232
    2da4:	53 e0       	ldi	r21, 0x03	; 3
    2da6:	6f e3       	ldi	r22, 0x3F	; 63
    2da8:	70 e2       	ldi	r23, 0x20	; 32
    2daa:	88 e2       	ldi	r24, 0x28	; 40
    2dac:	95 e1       	ldi	r25, 0x15	; 21
    2dae:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <xTaskCreate>
	
	/* Semaphore */
	xSemaphore = xSemaphoreCreateBinary();
    2db2:	43 e0       	ldi	r20, 0x03	; 3
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	0e 94 33 0c 	call	0x1866	; 0x1866 <xQueueGenericCreate>
    2dbc:	80 93 d9 22 	sts	0x22D9, r24	; 0x8022d9 <xSemaphore>
    2dc0:	90 93 da 22 	sts	0x22DA, r25	; 0x8022da <xSemaphore+0x1>
	xSemaphoreGive(xSemaphore);
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xQueueGenericSend>
	
	/* Start the task */
	
	vTaskStartScheduler();
    2dd2:	af d8       	rcall	.-3746   	; 0x1f32 <vTaskStartScheduler>
}
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0f 91       	pop	r16
    2dda:	ff 90       	pop	r15
    2ddc:	ef 90       	pop	r14
    2dde:	08 95       	ret

00002de0 <__udivmodsi4>:
    2de0:	a1 e2       	ldi	r26, 0x21	; 33
    2de2:	1a 2e       	mov	r1, r26
    2de4:	aa 1b       	sub	r26, r26
    2de6:	bb 1b       	sub	r27, r27
    2de8:	fd 01       	movw	r30, r26
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <__udivmodsi4_ep>

00002dec <__udivmodsi4_loop>:
    2dec:	aa 1f       	adc	r26, r26
    2dee:	bb 1f       	adc	r27, r27
    2df0:	ee 1f       	adc	r30, r30
    2df2:	ff 1f       	adc	r31, r31
    2df4:	a2 17       	cp	r26, r18
    2df6:	b3 07       	cpc	r27, r19
    2df8:	e4 07       	cpc	r30, r20
    2dfa:	f5 07       	cpc	r31, r21
    2dfc:	20 f0       	brcs	.+8      	; 0x2e06 <__udivmodsi4_ep>
    2dfe:	a2 1b       	sub	r26, r18
    2e00:	b3 0b       	sbc	r27, r19
    2e02:	e4 0b       	sbc	r30, r20
    2e04:	f5 0b       	sbc	r31, r21

00002e06 <__udivmodsi4_ep>:
    2e06:	66 1f       	adc	r22, r22
    2e08:	77 1f       	adc	r23, r23
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	1a 94       	dec	r1
    2e10:	69 f7       	brne	.-38     	; 0x2dec <__udivmodsi4_loop>
    2e12:	60 95       	com	r22
    2e14:	70 95       	com	r23
    2e16:	80 95       	com	r24
    2e18:	90 95       	com	r25
    2e1a:	9b 01       	movw	r18, r22
    2e1c:	ac 01       	movw	r20, r24
    2e1e:	bd 01       	movw	r22, r26
    2e20:	cf 01       	movw	r24, r30
    2e22:	08 95       	ret

00002e24 <__tablejump2__>:
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	88 1f       	adc	r24, r24
    2e2a:	8b bf       	out	0x3b, r24	; 59
    2e2c:	07 90       	elpm	r0, Z+
    2e2e:	f6 91       	elpm	r31, Z
    2e30:	e0 2d       	mov	r30, r0
    2e32:	19 94       	eijmp

00002e34 <malloc>:
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	82 30       	cpi	r24, 0x02	; 2
    2e3e:	91 05       	cpc	r25, r1
    2e40:	10 f4       	brcc	.+4      	; 0x2e46 <malloc+0x12>
    2e42:	82 e0       	ldi	r24, 0x02	; 2
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	e0 91 dd 22 	lds	r30, 0x22DD	; 0x8022dd <__flp>
    2e4a:	f0 91 de 22 	lds	r31, 0x22DE	; 0x8022de <__flp+0x1>
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	a0 e0       	ldi	r26, 0x00	; 0
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	30 97       	sbiw	r30, 0x00	; 0
    2e58:	19 f1       	breq	.+70     	; 0x2ea0 <malloc+0x6c>
    2e5a:	40 81       	ld	r20, Z
    2e5c:	51 81       	ldd	r21, Z+1	; 0x01
    2e5e:	02 81       	ldd	r16, Z+2	; 0x02
    2e60:	13 81       	ldd	r17, Z+3	; 0x03
    2e62:	48 17       	cp	r20, r24
    2e64:	59 07       	cpc	r21, r25
    2e66:	c8 f0       	brcs	.+50     	; 0x2e9a <malloc+0x66>
    2e68:	84 17       	cp	r24, r20
    2e6a:	95 07       	cpc	r25, r21
    2e6c:	69 f4       	brne	.+26     	; 0x2e88 <malloc+0x54>
    2e6e:	10 97       	sbiw	r26, 0x00	; 0
    2e70:	31 f0       	breq	.+12     	; 0x2e7e <malloc+0x4a>
    2e72:	12 96       	adiw	r26, 0x02	; 2
    2e74:	0c 93       	st	X, r16
    2e76:	12 97       	sbiw	r26, 0x02	; 2
    2e78:	13 96       	adiw	r26, 0x03	; 3
    2e7a:	1c 93       	st	X, r17
    2e7c:	27 c0       	rjmp	.+78     	; 0x2ecc <malloc+0x98>
    2e7e:	00 93 dd 22 	sts	0x22DD, r16	; 0x8022dd <__flp>
    2e82:	10 93 de 22 	sts	0x22DE, r17	; 0x8022de <__flp+0x1>
    2e86:	22 c0       	rjmp	.+68     	; 0x2ecc <malloc+0x98>
    2e88:	21 15       	cp	r18, r1
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	19 f0       	breq	.+6      	; 0x2e94 <malloc+0x60>
    2e8e:	42 17       	cp	r20, r18
    2e90:	53 07       	cpc	r21, r19
    2e92:	18 f4       	brcc	.+6      	; 0x2e9a <malloc+0x66>
    2e94:	9a 01       	movw	r18, r20
    2e96:	bd 01       	movw	r22, r26
    2e98:	ef 01       	movw	r28, r30
    2e9a:	df 01       	movw	r26, r30
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	db cf       	rjmp	.-74     	; 0x2e56 <malloc+0x22>
    2ea0:	21 15       	cp	r18, r1
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	f9 f0       	breq	.+62     	; 0x2ee4 <malloc+0xb0>
    2ea6:	28 1b       	sub	r18, r24
    2ea8:	39 0b       	sbc	r19, r25
    2eaa:	24 30       	cpi	r18, 0x04	; 4
    2eac:	31 05       	cpc	r19, r1
    2eae:	80 f4       	brcc	.+32     	; 0x2ed0 <malloc+0x9c>
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb4:	61 15       	cp	r22, r1
    2eb6:	71 05       	cpc	r23, r1
    2eb8:	21 f0       	breq	.+8      	; 0x2ec2 <malloc+0x8e>
    2eba:	fb 01       	movw	r30, r22
    2ebc:	82 83       	std	Z+2, r24	; 0x02
    2ebe:	93 83       	std	Z+3, r25	; 0x03
    2ec0:	04 c0       	rjmp	.+8      	; 0x2eca <malloc+0x96>
    2ec2:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <__flp>
    2ec6:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <__flp+0x1>
    2eca:	fe 01       	movw	r30, r28
    2ecc:	32 96       	adiw	r30, 0x02	; 2
    2ece:	44 c0       	rjmp	.+136    	; 0x2f58 <malloc+0x124>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e2 0f       	add	r30, r18
    2ed4:	f3 1f       	adc	r31, r19
    2ed6:	81 93       	st	Z+, r24
    2ed8:	91 93       	st	Z+, r25
    2eda:	22 50       	subi	r18, 0x02	; 2
    2edc:	31 09       	sbc	r19, r1
    2ede:	28 83       	st	Y, r18
    2ee0:	39 83       	std	Y+1, r19	; 0x01
    2ee2:	3a c0       	rjmp	.+116    	; 0x2f58 <malloc+0x124>
    2ee4:	20 91 db 22 	lds	r18, 0x22DB	; 0x8022db <__brkval>
    2ee8:	30 91 dc 22 	lds	r19, 0x22DC	; 0x8022dc <__brkval+0x1>
    2eec:	23 2b       	or	r18, r19
    2eee:	41 f4       	brne	.+16     	; 0x2f00 <malloc+0xcc>
    2ef0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2ef4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2ef8:	20 93 db 22 	sts	0x22DB, r18	; 0x8022db <__brkval>
    2efc:	30 93 dc 22 	sts	0x22DC, r19	; 0x8022dc <__brkval+0x1>
    2f00:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2f04:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2f08:	21 15       	cp	r18, r1
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	41 f4       	brne	.+16     	; 0x2f1e <malloc+0xea>
    2f0e:	2d b7       	in	r18, 0x3d	; 61
    2f10:	3e b7       	in	r19, 0x3e	; 62
    2f12:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2f16:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2f1a:	24 1b       	sub	r18, r20
    2f1c:	35 0b       	sbc	r19, r21
    2f1e:	e0 91 db 22 	lds	r30, 0x22DB	; 0x8022db <__brkval>
    2f22:	f0 91 dc 22 	lds	r31, 0x22DC	; 0x8022dc <__brkval+0x1>
    2f26:	e2 17       	cp	r30, r18
    2f28:	f3 07       	cpc	r31, r19
    2f2a:	a0 f4       	brcc	.+40     	; 0x2f54 <malloc+0x120>
    2f2c:	2e 1b       	sub	r18, r30
    2f2e:	3f 0b       	sbc	r19, r31
    2f30:	28 17       	cp	r18, r24
    2f32:	39 07       	cpc	r19, r25
    2f34:	78 f0       	brcs	.+30     	; 0x2f54 <malloc+0x120>
    2f36:	ac 01       	movw	r20, r24
    2f38:	4e 5f       	subi	r20, 0xFE	; 254
    2f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3c:	24 17       	cp	r18, r20
    2f3e:	35 07       	cpc	r19, r21
    2f40:	48 f0       	brcs	.+18     	; 0x2f54 <malloc+0x120>
    2f42:	4e 0f       	add	r20, r30
    2f44:	5f 1f       	adc	r21, r31
    2f46:	40 93 db 22 	sts	0x22DB, r20	; 0x8022db <__brkval>
    2f4a:	50 93 dc 22 	sts	0x22DC, r21	; 0x8022dc <__brkval+0x1>
    2f4e:	81 93       	st	Z+, r24
    2f50:	91 93       	st	Z+, r25
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <malloc+0x124>
    2f54:	e0 e0       	ldi	r30, 0x00	; 0
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	cf 01       	movw	r24, r30
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	08 95       	ret

00002f64 <free>:
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <free+0xa>
    2f6c:	81 c0       	rjmp	.+258    	; 0x3070 <free+0x10c>
    2f6e:	fc 01       	movw	r30, r24
    2f70:	32 97       	sbiw	r30, 0x02	; 2
    2f72:	12 82       	std	Z+2, r1	; 0x02
    2f74:	13 82       	std	Z+3, r1	; 0x03
    2f76:	a0 91 dd 22 	lds	r26, 0x22DD	; 0x8022dd <__flp>
    2f7a:	b0 91 de 22 	lds	r27, 0x22DE	; 0x8022de <__flp+0x1>
    2f7e:	10 97       	sbiw	r26, 0x00	; 0
    2f80:	81 f4       	brne	.+32     	; 0x2fa2 <free+0x3e>
    2f82:	20 81       	ld	r18, Z
    2f84:	31 81       	ldd	r19, Z+1	; 0x01
    2f86:	82 0f       	add	r24, r18
    2f88:	93 1f       	adc	r25, r19
    2f8a:	20 91 db 22 	lds	r18, 0x22DB	; 0x8022db <__brkval>
    2f8e:	30 91 dc 22 	lds	r19, 0x22DC	; 0x8022dc <__brkval+0x1>
    2f92:	28 17       	cp	r18, r24
    2f94:	39 07       	cpc	r19, r25
    2f96:	51 f5       	brne	.+84     	; 0x2fec <free+0x88>
    2f98:	e0 93 db 22 	sts	0x22DB, r30	; 0x8022db <__brkval>
    2f9c:	f0 93 dc 22 	sts	0x22DC, r31	; 0x8022dc <__brkval+0x1>
    2fa0:	67 c0       	rjmp	.+206    	; 0x3070 <free+0x10c>
    2fa2:	ed 01       	movw	r28, r26
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	ce 17       	cp	r28, r30
    2faa:	df 07       	cpc	r29, r31
    2fac:	40 f4       	brcc	.+16     	; 0x2fbe <free+0x5a>
    2fae:	4a 81       	ldd	r20, Y+2	; 0x02
    2fb0:	5b 81       	ldd	r21, Y+3	; 0x03
    2fb2:	9e 01       	movw	r18, r28
    2fb4:	41 15       	cp	r20, r1
    2fb6:	51 05       	cpc	r21, r1
    2fb8:	f1 f0       	breq	.+60     	; 0x2ff6 <free+0x92>
    2fba:	ea 01       	movw	r28, r20
    2fbc:	f5 cf       	rjmp	.-22     	; 0x2fa8 <free+0x44>
    2fbe:	c2 83       	std	Z+2, r28	; 0x02
    2fc0:	d3 83       	std	Z+3, r29	; 0x03
    2fc2:	40 81       	ld	r20, Z
    2fc4:	51 81       	ldd	r21, Z+1	; 0x01
    2fc6:	84 0f       	add	r24, r20
    2fc8:	95 1f       	adc	r25, r21
    2fca:	c8 17       	cp	r28, r24
    2fcc:	d9 07       	cpc	r29, r25
    2fce:	59 f4       	brne	.+22     	; 0x2fe6 <free+0x82>
    2fd0:	88 81       	ld	r24, Y
    2fd2:	99 81       	ldd	r25, Y+1	; 0x01
    2fd4:	84 0f       	add	r24, r20
    2fd6:	95 1f       	adc	r25, r21
    2fd8:	02 96       	adiw	r24, 0x02	; 2
    2fda:	80 83       	st	Z, r24
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe2:	82 83       	std	Z+2, r24	; 0x02
    2fe4:	93 83       	std	Z+3, r25	; 0x03
    2fe6:	21 15       	cp	r18, r1
    2fe8:	31 05       	cpc	r19, r1
    2fea:	29 f4       	brne	.+10     	; 0x2ff6 <free+0x92>
    2fec:	e0 93 dd 22 	sts	0x22DD, r30	; 0x8022dd <__flp>
    2ff0:	f0 93 de 22 	sts	0x22DE, r31	; 0x8022de <__flp+0x1>
    2ff4:	3d c0       	rjmp	.+122    	; 0x3070 <free+0x10c>
    2ff6:	e9 01       	movw	r28, r18
    2ff8:	ea 83       	std	Y+2, r30	; 0x02
    2ffa:	fb 83       	std	Y+3, r31	; 0x03
    2ffc:	49 91       	ld	r20, Y+
    2ffe:	59 91       	ld	r21, Y+
    3000:	c4 0f       	add	r28, r20
    3002:	d5 1f       	adc	r29, r21
    3004:	ec 17       	cp	r30, r28
    3006:	fd 07       	cpc	r31, r29
    3008:	61 f4       	brne	.+24     	; 0x3022 <free+0xbe>
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	84 0f       	add	r24, r20
    3010:	95 1f       	adc	r25, r21
    3012:	02 96       	adiw	r24, 0x02	; 2
    3014:	e9 01       	movw	r28, r18
    3016:	88 83       	st	Y, r24
    3018:	99 83       	std	Y+1, r25	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	8a 83       	std	Y+2, r24	; 0x02
    3020:	9b 83       	std	Y+3, r25	; 0x03
    3022:	e0 e0       	ldi	r30, 0x00	; 0
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	12 96       	adiw	r26, 0x02	; 2
    3028:	8d 91       	ld	r24, X+
    302a:	9c 91       	ld	r25, X
    302c:	13 97       	sbiw	r26, 0x03	; 3
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	19 f0       	breq	.+6      	; 0x3038 <free+0xd4>
    3032:	fd 01       	movw	r30, r26
    3034:	dc 01       	movw	r26, r24
    3036:	f7 cf       	rjmp	.-18     	; 0x3026 <free+0xc2>
    3038:	8d 91       	ld	r24, X+
    303a:	9c 91       	ld	r25, X
    303c:	11 97       	sbiw	r26, 0x01	; 1
    303e:	9d 01       	movw	r18, r26
    3040:	2e 5f       	subi	r18, 0xFE	; 254
    3042:	3f 4f       	sbci	r19, 0xFF	; 255
    3044:	82 0f       	add	r24, r18
    3046:	93 1f       	adc	r25, r19
    3048:	20 91 db 22 	lds	r18, 0x22DB	; 0x8022db <__brkval>
    304c:	30 91 dc 22 	lds	r19, 0x22DC	; 0x8022dc <__brkval+0x1>
    3050:	28 17       	cp	r18, r24
    3052:	39 07       	cpc	r19, r25
    3054:	69 f4       	brne	.+26     	; 0x3070 <free+0x10c>
    3056:	30 97       	sbiw	r30, 0x00	; 0
    3058:	29 f4       	brne	.+10     	; 0x3064 <free+0x100>
    305a:	10 92 dd 22 	sts	0x22DD, r1	; 0x8022dd <__flp>
    305e:	10 92 de 22 	sts	0x22DE, r1	; 0x8022de <__flp+0x1>
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <free+0x104>
    3064:	12 82       	std	Z+2, r1	; 0x02
    3066:	13 82       	std	Z+3, r1	; 0x03
    3068:	a0 93 db 22 	sts	0x22DB, r26	; 0x8022db <__brkval>
    306c:	b0 93 dc 22 	sts	0x22DC, r27	; 0x8022dc <__brkval+0x1>
    3070:	df 91       	pop	r29
    3072:	cf 91       	pop	r28
    3074:	08 95       	ret

00003076 <memcpy>:
    3076:	fb 01       	movw	r30, r22
    3078:	dc 01       	movw	r26, r24
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <memcpy+0xa>
    307c:	01 90       	ld	r0, Z+
    307e:	0d 92       	st	X+, r0
    3080:	41 50       	subi	r20, 0x01	; 1
    3082:	50 40       	sbci	r21, 0x00	; 0
    3084:	d8 f7       	brcc	.-10     	; 0x307c <memcpy+0x6>
    3086:	08 95       	ret

00003088 <snprintf>:
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	2e 97       	sbiw	r28, 0x0e	; 14
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0e 89       	ldd	r16, Y+22	; 0x16
    309c:	1f 89       	ldd	r17, Y+23	; 0x17
    309e:	88 8d       	ldd	r24, Y+24	; 0x18
    30a0:	99 8d       	ldd	r25, Y+25	; 0x19
    30a2:	26 e0       	ldi	r18, 0x06	; 6
    30a4:	2c 83       	std	Y+4, r18	; 0x04
    30a6:	09 83       	std	Y+1, r16	; 0x01
    30a8:	1a 83       	std	Y+2, r17	; 0x02
    30aa:	97 ff       	sbrs	r25, 7
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <snprintf+0x2a>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e8       	ldi	r25, 0x80	; 128
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	8d 83       	std	Y+5, r24	; 0x05
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	ae 01       	movw	r20, r28
    30ba:	44 5e       	subi	r20, 0xE4	; 228
    30bc:	5f 4f       	sbci	r21, 0xFF	; 255
    30be:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30c0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30c2:	ce 01       	movw	r24, r28
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	16 d0       	rcall	.+44     	; 0x30f4 <vfprintf>
    30c8:	4d 81       	ldd	r20, Y+5	; 0x05
    30ca:	5e 81       	ldd	r21, Y+6	; 0x06
    30cc:	57 fd       	sbrc	r21, 7
    30ce:	0a c0       	rjmp	.+20     	; 0x30e4 <snprintf+0x5c>
    30d0:	2f 81       	ldd	r18, Y+7	; 0x07
    30d2:	38 85       	ldd	r19, Y+8	; 0x08
    30d4:	42 17       	cp	r20, r18
    30d6:	53 07       	cpc	r21, r19
    30d8:	0c f4       	brge	.+2      	; 0x30dc <snprintf+0x54>
    30da:	9a 01       	movw	r18, r20
    30dc:	f8 01       	movw	r30, r16
    30de:	e2 0f       	add	r30, r18
    30e0:	f3 1f       	adc	r31, r19
    30e2:	10 82       	st	Z, r1
    30e4:	2e 96       	adiw	r28, 0x0e	; 14
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	08 95       	ret

000030f4 <vfprintf>:
    30f4:	2f 92       	push	r2
    30f6:	3f 92       	push	r3
    30f8:	4f 92       	push	r4
    30fa:	5f 92       	push	r5
    30fc:	6f 92       	push	r6
    30fe:	7f 92       	push	r7
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	2b 97       	sbiw	r28, 0x0b	; 11
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	6c 01       	movw	r12, r24
    3124:	7b 01       	movw	r14, r22
    3126:	8a 01       	movw	r16, r20
    3128:	fc 01       	movw	r30, r24
    312a:	16 82       	std	Z+6, r1	; 0x06
    312c:	17 82       	std	Z+7, r1	; 0x07
    312e:	83 81       	ldd	r24, Z+3	; 0x03
    3130:	81 ff       	sbrs	r24, 1
    3132:	bf c1       	rjmp	.+894    	; 0x34b2 <vfprintf+0x3be>
    3134:	ce 01       	movw	r24, r28
    3136:	01 96       	adiw	r24, 0x01	; 1
    3138:	3c 01       	movw	r6, r24
    313a:	f6 01       	movw	r30, r12
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	f7 01       	movw	r30, r14
    3140:	93 fd       	sbrc	r25, 3
    3142:	85 91       	lpm	r24, Z+
    3144:	93 ff       	sbrs	r25, 3
    3146:	81 91       	ld	r24, Z+
    3148:	7f 01       	movw	r14, r30
    314a:	88 23       	and	r24, r24
    314c:	09 f4       	brne	.+2      	; 0x3150 <vfprintf+0x5c>
    314e:	ad c1       	rjmp	.+858    	; 0x34aa <vfprintf+0x3b6>
    3150:	85 32       	cpi	r24, 0x25	; 37
    3152:	39 f4       	brne	.+14     	; 0x3162 <vfprintf+0x6e>
    3154:	93 fd       	sbrc	r25, 3
    3156:	85 91       	lpm	r24, Z+
    3158:	93 ff       	sbrs	r25, 3
    315a:	81 91       	ld	r24, Z+
    315c:	7f 01       	movw	r14, r30
    315e:	85 32       	cpi	r24, 0x25	; 37
    3160:	21 f4       	brne	.+8      	; 0x316a <vfprintf+0x76>
    3162:	b6 01       	movw	r22, r12
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	d3 d1       	rcall	.+934    	; 0x350e <fputc>
    3168:	e8 cf       	rjmp	.-48     	; 0x313a <vfprintf+0x46>
    316a:	91 2c       	mov	r9, r1
    316c:	21 2c       	mov	r2, r1
    316e:	31 2c       	mov	r3, r1
    3170:	ff e1       	ldi	r31, 0x1F	; 31
    3172:	f3 15       	cp	r31, r3
    3174:	d8 f0       	brcs	.+54     	; 0x31ac <vfprintf+0xb8>
    3176:	8b 32       	cpi	r24, 0x2B	; 43
    3178:	79 f0       	breq	.+30     	; 0x3198 <vfprintf+0xa4>
    317a:	38 f4       	brcc	.+14     	; 0x318a <vfprintf+0x96>
    317c:	80 32       	cpi	r24, 0x20	; 32
    317e:	79 f0       	breq	.+30     	; 0x319e <vfprintf+0xaa>
    3180:	83 32       	cpi	r24, 0x23	; 35
    3182:	a1 f4       	brne	.+40     	; 0x31ac <vfprintf+0xb8>
    3184:	23 2d       	mov	r18, r3
    3186:	20 61       	ori	r18, 0x10	; 16
    3188:	1d c0       	rjmp	.+58     	; 0x31c4 <vfprintf+0xd0>
    318a:	8d 32       	cpi	r24, 0x2D	; 45
    318c:	61 f0       	breq	.+24     	; 0x31a6 <vfprintf+0xb2>
    318e:	80 33       	cpi	r24, 0x30	; 48
    3190:	69 f4       	brne	.+26     	; 0x31ac <vfprintf+0xb8>
    3192:	23 2d       	mov	r18, r3
    3194:	21 60       	ori	r18, 0x01	; 1
    3196:	16 c0       	rjmp	.+44     	; 0x31c4 <vfprintf+0xd0>
    3198:	83 2d       	mov	r24, r3
    319a:	82 60       	ori	r24, 0x02	; 2
    319c:	38 2e       	mov	r3, r24
    319e:	e3 2d       	mov	r30, r3
    31a0:	e4 60       	ori	r30, 0x04	; 4
    31a2:	3e 2e       	mov	r3, r30
    31a4:	2a c0       	rjmp	.+84     	; 0x31fa <vfprintf+0x106>
    31a6:	f3 2d       	mov	r31, r3
    31a8:	f8 60       	ori	r31, 0x08	; 8
    31aa:	1d c0       	rjmp	.+58     	; 0x31e6 <vfprintf+0xf2>
    31ac:	37 fc       	sbrc	r3, 7
    31ae:	2d c0       	rjmp	.+90     	; 0x320a <vfprintf+0x116>
    31b0:	20 ed       	ldi	r18, 0xD0	; 208
    31b2:	28 0f       	add	r18, r24
    31b4:	2a 30       	cpi	r18, 0x0A	; 10
    31b6:	40 f0       	brcs	.+16     	; 0x31c8 <vfprintf+0xd4>
    31b8:	8e 32       	cpi	r24, 0x2E	; 46
    31ba:	b9 f4       	brne	.+46     	; 0x31ea <vfprintf+0xf6>
    31bc:	36 fc       	sbrc	r3, 6
    31be:	75 c1       	rjmp	.+746    	; 0x34aa <vfprintf+0x3b6>
    31c0:	23 2d       	mov	r18, r3
    31c2:	20 64       	ori	r18, 0x40	; 64
    31c4:	32 2e       	mov	r3, r18
    31c6:	19 c0       	rjmp	.+50     	; 0x31fa <vfprintf+0x106>
    31c8:	36 fe       	sbrs	r3, 6
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <vfprintf+0xe4>
    31cc:	8a e0       	ldi	r24, 0x0A	; 10
    31ce:	98 9e       	mul	r9, r24
    31d0:	20 0d       	add	r18, r0
    31d2:	11 24       	eor	r1, r1
    31d4:	92 2e       	mov	r9, r18
    31d6:	11 c0       	rjmp	.+34     	; 0x31fa <vfprintf+0x106>
    31d8:	ea e0       	ldi	r30, 0x0A	; 10
    31da:	2e 9e       	mul	r2, r30
    31dc:	20 0d       	add	r18, r0
    31de:	11 24       	eor	r1, r1
    31e0:	22 2e       	mov	r2, r18
    31e2:	f3 2d       	mov	r31, r3
    31e4:	f0 62       	ori	r31, 0x20	; 32
    31e6:	3f 2e       	mov	r3, r31
    31e8:	08 c0       	rjmp	.+16     	; 0x31fa <vfprintf+0x106>
    31ea:	8c 36       	cpi	r24, 0x6C	; 108
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <vfprintf+0x102>
    31ee:	83 2d       	mov	r24, r3
    31f0:	80 68       	ori	r24, 0x80	; 128
    31f2:	38 2e       	mov	r3, r24
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <vfprintf+0x106>
    31f6:	88 36       	cpi	r24, 0x68	; 104
    31f8:	41 f4       	brne	.+16     	; 0x320a <vfprintf+0x116>
    31fa:	f7 01       	movw	r30, r14
    31fc:	93 fd       	sbrc	r25, 3
    31fe:	85 91       	lpm	r24, Z+
    3200:	93 ff       	sbrs	r25, 3
    3202:	81 91       	ld	r24, Z+
    3204:	7f 01       	movw	r14, r30
    3206:	81 11       	cpse	r24, r1
    3208:	b3 cf       	rjmp	.-154    	; 0x3170 <vfprintf+0x7c>
    320a:	98 2f       	mov	r25, r24
    320c:	9f 7d       	andi	r25, 0xDF	; 223
    320e:	95 54       	subi	r25, 0x45	; 69
    3210:	93 30       	cpi	r25, 0x03	; 3
    3212:	28 f4       	brcc	.+10     	; 0x321e <vfprintf+0x12a>
    3214:	0c 5f       	subi	r16, 0xFC	; 252
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	9f e3       	ldi	r25, 0x3F	; 63
    321a:	99 83       	std	Y+1, r25	; 0x01
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <vfprintf+0x144>
    321e:	83 36       	cpi	r24, 0x63	; 99
    3220:	31 f0       	breq	.+12     	; 0x322e <vfprintf+0x13a>
    3222:	83 37       	cpi	r24, 0x73	; 115
    3224:	71 f0       	breq	.+28     	; 0x3242 <vfprintf+0x14e>
    3226:	83 35       	cpi	r24, 0x53	; 83
    3228:	09 f0       	breq	.+2      	; 0x322c <vfprintf+0x138>
    322a:	55 c0       	rjmp	.+170    	; 0x32d6 <vfprintf+0x1e2>
    322c:	20 c0       	rjmp	.+64     	; 0x326e <vfprintf+0x17a>
    322e:	f8 01       	movw	r30, r16
    3230:	80 81       	ld	r24, Z
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	0e 5f       	subi	r16, 0xFE	; 254
    3236:	1f 4f       	sbci	r17, 0xFF	; 255
    3238:	88 24       	eor	r8, r8
    323a:	83 94       	inc	r8
    323c:	91 2c       	mov	r9, r1
    323e:	53 01       	movw	r10, r6
    3240:	12 c0       	rjmp	.+36     	; 0x3266 <vfprintf+0x172>
    3242:	28 01       	movw	r4, r16
    3244:	f2 e0       	ldi	r31, 0x02	; 2
    3246:	4f 0e       	add	r4, r31
    3248:	51 1c       	adc	r5, r1
    324a:	f8 01       	movw	r30, r16
    324c:	a0 80       	ld	r10, Z
    324e:	b1 80       	ldd	r11, Z+1	; 0x01
    3250:	36 fe       	sbrs	r3, 6
    3252:	03 c0       	rjmp	.+6      	; 0x325a <vfprintf+0x166>
    3254:	69 2d       	mov	r22, r9
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	02 c0       	rjmp	.+4      	; 0x325e <vfprintf+0x16a>
    325a:	6f ef       	ldi	r22, 0xFF	; 255
    325c:	7f ef       	ldi	r23, 0xFF	; 255
    325e:	c5 01       	movw	r24, r10
    3260:	4b d1       	rcall	.+662    	; 0x34f8 <strnlen>
    3262:	4c 01       	movw	r8, r24
    3264:	82 01       	movw	r16, r4
    3266:	f3 2d       	mov	r31, r3
    3268:	ff 77       	andi	r31, 0x7F	; 127
    326a:	3f 2e       	mov	r3, r31
    326c:	15 c0       	rjmp	.+42     	; 0x3298 <vfprintf+0x1a4>
    326e:	28 01       	movw	r4, r16
    3270:	22 e0       	ldi	r18, 0x02	; 2
    3272:	42 0e       	add	r4, r18
    3274:	51 1c       	adc	r5, r1
    3276:	f8 01       	movw	r30, r16
    3278:	a0 80       	ld	r10, Z
    327a:	b1 80       	ldd	r11, Z+1	; 0x01
    327c:	36 fe       	sbrs	r3, 6
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <vfprintf+0x192>
    3280:	69 2d       	mov	r22, r9
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	02 c0       	rjmp	.+4      	; 0x328a <vfprintf+0x196>
    3286:	6f ef       	ldi	r22, 0xFF	; 255
    3288:	7f ef       	ldi	r23, 0xFF	; 255
    328a:	c5 01       	movw	r24, r10
    328c:	2a d1       	rcall	.+596    	; 0x34e2 <strnlen_P>
    328e:	4c 01       	movw	r8, r24
    3290:	f3 2d       	mov	r31, r3
    3292:	f0 68       	ori	r31, 0x80	; 128
    3294:	3f 2e       	mov	r3, r31
    3296:	82 01       	movw	r16, r4
    3298:	33 fc       	sbrc	r3, 3
    329a:	19 c0       	rjmp	.+50     	; 0x32ce <vfprintf+0x1da>
    329c:	82 2d       	mov	r24, r2
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	88 16       	cp	r8, r24
    32a2:	99 06       	cpc	r9, r25
    32a4:	a0 f4       	brcc	.+40     	; 0x32ce <vfprintf+0x1da>
    32a6:	b6 01       	movw	r22, r12
    32a8:	80 e2       	ldi	r24, 0x20	; 32
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	30 d1       	rcall	.+608    	; 0x350e <fputc>
    32ae:	2a 94       	dec	r2
    32b0:	f5 cf       	rjmp	.-22     	; 0x329c <vfprintf+0x1a8>
    32b2:	f5 01       	movw	r30, r10
    32b4:	37 fc       	sbrc	r3, 7
    32b6:	85 91       	lpm	r24, Z+
    32b8:	37 fe       	sbrs	r3, 7
    32ba:	81 91       	ld	r24, Z+
    32bc:	5f 01       	movw	r10, r30
    32be:	b6 01       	movw	r22, r12
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	25 d1       	rcall	.+586    	; 0x350e <fputc>
    32c4:	21 10       	cpse	r2, r1
    32c6:	2a 94       	dec	r2
    32c8:	21 e0       	ldi	r18, 0x01	; 1
    32ca:	82 1a       	sub	r8, r18
    32cc:	91 08       	sbc	r9, r1
    32ce:	81 14       	cp	r8, r1
    32d0:	91 04       	cpc	r9, r1
    32d2:	79 f7       	brne	.-34     	; 0x32b2 <vfprintf+0x1be>
    32d4:	e1 c0       	rjmp	.+450    	; 0x3498 <vfprintf+0x3a4>
    32d6:	84 36       	cpi	r24, 0x64	; 100
    32d8:	11 f0       	breq	.+4      	; 0x32de <vfprintf+0x1ea>
    32da:	89 36       	cpi	r24, 0x69	; 105
    32dc:	39 f5       	brne	.+78     	; 0x332c <vfprintf+0x238>
    32de:	f8 01       	movw	r30, r16
    32e0:	37 fe       	sbrs	r3, 7
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <vfprintf+0x1fe>
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	0c 5f       	subi	r16, 0xFC	; 252
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	08 c0       	rjmp	.+16     	; 0x3302 <vfprintf+0x20e>
    32f2:	60 81       	ld	r22, Z
    32f4:	71 81       	ldd	r23, Z+1	; 0x01
    32f6:	07 2e       	mov	r0, r23
    32f8:	00 0c       	add	r0, r0
    32fa:	88 0b       	sbc	r24, r24
    32fc:	99 0b       	sbc	r25, r25
    32fe:	0e 5f       	subi	r16, 0xFE	; 254
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	f3 2d       	mov	r31, r3
    3304:	ff 76       	andi	r31, 0x6F	; 111
    3306:	3f 2e       	mov	r3, r31
    3308:	97 ff       	sbrs	r25, 7
    330a:	09 c0       	rjmp	.+18     	; 0x331e <vfprintf+0x22a>
    330c:	90 95       	com	r25
    330e:	80 95       	com	r24
    3310:	70 95       	com	r23
    3312:	61 95       	neg	r22
    3314:	7f 4f       	sbci	r23, 0xFF	; 255
    3316:	8f 4f       	sbci	r24, 0xFF	; 255
    3318:	9f 4f       	sbci	r25, 0xFF	; 255
    331a:	f0 68       	ori	r31, 0x80	; 128
    331c:	3f 2e       	mov	r3, r31
    331e:	2a e0       	ldi	r18, 0x0A	; 10
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	a3 01       	movw	r20, r6
    3324:	30 d1       	rcall	.+608    	; 0x3586 <__ultoa_invert>
    3326:	88 2e       	mov	r8, r24
    3328:	86 18       	sub	r8, r6
    332a:	44 c0       	rjmp	.+136    	; 0x33b4 <vfprintf+0x2c0>
    332c:	85 37       	cpi	r24, 0x75	; 117
    332e:	31 f4       	brne	.+12     	; 0x333c <vfprintf+0x248>
    3330:	23 2d       	mov	r18, r3
    3332:	2f 7e       	andi	r18, 0xEF	; 239
    3334:	b2 2e       	mov	r11, r18
    3336:	2a e0       	ldi	r18, 0x0A	; 10
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	25 c0       	rjmp	.+74     	; 0x3386 <vfprintf+0x292>
    333c:	93 2d       	mov	r25, r3
    333e:	99 7f       	andi	r25, 0xF9	; 249
    3340:	b9 2e       	mov	r11, r25
    3342:	8f 36       	cpi	r24, 0x6F	; 111
    3344:	c1 f0       	breq	.+48     	; 0x3376 <vfprintf+0x282>
    3346:	18 f4       	brcc	.+6      	; 0x334e <vfprintf+0x25a>
    3348:	88 35       	cpi	r24, 0x58	; 88
    334a:	79 f0       	breq	.+30     	; 0x336a <vfprintf+0x276>
    334c:	ae c0       	rjmp	.+348    	; 0x34aa <vfprintf+0x3b6>
    334e:	80 37       	cpi	r24, 0x70	; 112
    3350:	19 f0       	breq	.+6      	; 0x3358 <vfprintf+0x264>
    3352:	88 37       	cpi	r24, 0x78	; 120
    3354:	21 f0       	breq	.+8      	; 0x335e <vfprintf+0x26a>
    3356:	a9 c0       	rjmp	.+338    	; 0x34aa <vfprintf+0x3b6>
    3358:	e9 2f       	mov	r30, r25
    335a:	e0 61       	ori	r30, 0x10	; 16
    335c:	be 2e       	mov	r11, r30
    335e:	b4 fe       	sbrs	r11, 4
    3360:	0d c0       	rjmp	.+26     	; 0x337c <vfprintf+0x288>
    3362:	fb 2d       	mov	r31, r11
    3364:	f4 60       	ori	r31, 0x04	; 4
    3366:	bf 2e       	mov	r11, r31
    3368:	09 c0       	rjmp	.+18     	; 0x337c <vfprintf+0x288>
    336a:	34 fe       	sbrs	r3, 4
    336c:	0a c0       	rjmp	.+20     	; 0x3382 <vfprintf+0x28e>
    336e:	29 2f       	mov	r18, r25
    3370:	26 60       	ori	r18, 0x06	; 6
    3372:	b2 2e       	mov	r11, r18
    3374:	06 c0       	rjmp	.+12     	; 0x3382 <vfprintf+0x28e>
    3376:	28 e0       	ldi	r18, 0x08	; 8
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	05 c0       	rjmp	.+10     	; 0x3386 <vfprintf+0x292>
    337c:	20 e1       	ldi	r18, 0x10	; 16
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <vfprintf+0x292>
    3382:	20 e1       	ldi	r18, 0x10	; 16
    3384:	32 e0       	ldi	r19, 0x02	; 2
    3386:	f8 01       	movw	r30, r16
    3388:	b7 fe       	sbrs	r11, 7
    338a:	07 c0       	rjmp	.+14     	; 0x339a <vfprintf+0x2a6>
    338c:	60 81       	ld	r22, Z
    338e:	71 81       	ldd	r23, Z+1	; 0x01
    3390:	82 81       	ldd	r24, Z+2	; 0x02
    3392:	93 81       	ldd	r25, Z+3	; 0x03
    3394:	0c 5f       	subi	r16, 0xFC	; 252
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
    3398:	06 c0       	rjmp	.+12     	; 0x33a6 <vfprintf+0x2b2>
    339a:	60 81       	ld	r22, Z
    339c:	71 81       	ldd	r23, Z+1	; 0x01
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 5f       	subi	r16, 0xFE	; 254
    33a4:	1f 4f       	sbci	r17, 0xFF	; 255
    33a6:	a3 01       	movw	r20, r6
    33a8:	ee d0       	rcall	.+476    	; 0x3586 <__ultoa_invert>
    33aa:	88 2e       	mov	r8, r24
    33ac:	86 18       	sub	r8, r6
    33ae:	fb 2d       	mov	r31, r11
    33b0:	ff 77       	andi	r31, 0x7F	; 127
    33b2:	3f 2e       	mov	r3, r31
    33b4:	36 fe       	sbrs	r3, 6
    33b6:	0d c0       	rjmp	.+26     	; 0x33d2 <vfprintf+0x2de>
    33b8:	23 2d       	mov	r18, r3
    33ba:	2e 7f       	andi	r18, 0xFE	; 254
    33bc:	a2 2e       	mov	r10, r18
    33be:	89 14       	cp	r8, r9
    33c0:	58 f4       	brcc	.+22     	; 0x33d8 <vfprintf+0x2e4>
    33c2:	34 fe       	sbrs	r3, 4
    33c4:	0b c0       	rjmp	.+22     	; 0x33dc <vfprintf+0x2e8>
    33c6:	32 fc       	sbrc	r3, 2
    33c8:	09 c0       	rjmp	.+18     	; 0x33dc <vfprintf+0x2e8>
    33ca:	83 2d       	mov	r24, r3
    33cc:	8e 7e       	andi	r24, 0xEE	; 238
    33ce:	a8 2e       	mov	r10, r24
    33d0:	05 c0       	rjmp	.+10     	; 0x33dc <vfprintf+0x2e8>
    33d2:	b8 2c       	mov	r11, r8
    33d4:	a3 2c       	mov	r10, r3
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <vfprintf+0x2ea>
    33d8:	b8 2c       	mov	r11, r8
    33da:	01 c0       	rjmp	.+2      	; 0x33de <vfprintf+0x2ea>
    33dc:	b9 2c       	mov	r11, r9
    33de:	a4 fe       	sbrs	r10, 4
    33e0:	0f c0       	rjmp	.+30     	; 0x3400 <vfprintf+0x30c>
    33e2:	fe 01       	movw	r30, r28
    33e4:	e8 0d       	add	r30, r8
    33e6:	f1 1d       	adc	r31, r1
    33e8:	80 81       	ld	r24, Z
    33ea:	80 33       	cpi	r24, 0x30	; 48
    33ec:	21 f4       	brne	.+8      	; 0x33f6 <vfprintf+0x302>
    33ee:	9a 2d       	mov	r25, r10
    33f0:	99 7e       	andi	r25, 0xE9	; 233
    33f2:	a9 2e       	mov	r10, r25
    33f4:	09 c0       	rjmp	.+18     	; 0x3408 <vfprintf+0x314>
    33f6:	a2 fe       	sbrs	r10, 2
    33f8:	06 c0       	rjmp	.+12     	; 0x3406 <vfprintf+0x312>
    33fa:	b3 94       	inc	r11
    33fc:	b3 94       	inc	r11
    33fe:	04 c0       	rjmp	.+8      	; 0x3408 <vfprintf+0x314>
    3400:	8a 2d       	mov	r24, r10
    3402:	86 78       	andi	r24, 0x86	; 134
    3404:	09 f0       	breq	.+2      	; 0x3408 <vfprintf+0x314>
    3406:	b3 94       	inc	r11
    3408:	a3 fc       	sbrc	r10, 3
    340a:	10 c0       	rjmp	.+32     	; 0x342c <vfprintf+0x338>
    340c:	a0 fe       	sbrs	r10, 0
    340e:	06 c0       	rjmp	.+12     	; 0x341c <vfprintf+0x328>
    3410:	b2 14       	cp	r11, r2
    3412:	80 f4       	brcc	.+32     	; 0x3434 <vfprintf+0x340>
    3414:	28 0c       	add	r2, r8
    3416:	92 2c       	mov	r9, r2
    3418:	9b 18       	sub	r9, r11
    341a:	0d c0       	rjmp	.+26     	; 0x3436 <vfprintf+0x342>
    341c:	b2 14       	cp	r11, r2
    341e:	58 f4       	brcc	.+22     	; 0x3436 <vfprintf+0x342>
    3420:	b6 01       	movw	r22, r12
    3422:	80 e2       	ldi	r24, 0x20	; 32
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	73 d0       	rcall	.+230    	; 0x350e <fputc>
    3428:	b3 94       	inc	r11
    342a:	f8 cf       	rjmp	.-16     	; 0x341c <vfprintf+0x328>
    342c:	b2 14       	cp	r11, r2
    342e:	18 f4       	brcc	.+6      	; 0x3436 <vfprintf+0x342>
    3430:	2b 18       	sub	r2, r11
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <vfprintf+0x344>
    3434:	98 2c       	mov	r9, r8
    3436:	21 2c       	mov	r2, r1
    3438:	a4 fe       	sbrs	r10, 4
    343a:	0f c0       	rjmp	.+30     	; 0x345a <vfprintf+0x366>
    343c:	b6 01       	movw	r22, r12
    343e:	80 e3       	ldi	r24, 0x30	; 48
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	65 d0       	rcall	.+202    	; 0x350e <fputc>
    3444:	a2 fe       	sbrs	r10, 2
    3446:	16 c0       	rjmp	.+44     	; 0x3474 <vfprintf+0x380>
    3448:	a1 fc       	sbrc	r10, 1
    344a:	03 c0       	rjmp	.+6      	; 0x3452 <vfprintf+0x35e>
    344c:	88 e7       	ldi	r24, 0x78	; 120
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <vfprintf+0x362>
    3452:	88 e5       	ldi	r24, 0x58	; 88
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	b6 01       	movw	r22, r12
    3458:	0c c0       	rjmp	.+24     	; 0x3472 <vfprintf+0x37e>
    345a:	8a 2d       	mov	r24, r10
    345c:	86 78       	andi	r24, 0x86	; 134
    345e:	51 f0       	breq	.+20     	; 0x3474 <vfprintf+0x380>
    3460:	a1 fe       	sbrs	r10, 1
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <vfprintf+0x374>
    3464:	8b e2       	ldi	r24, 0x2B	; 43
    3466:	01 c0       	rjmp	.+2      	; 0x346a <vfprintf+0x376>
    3468:	80 e2       	ldi	r24, 0x20	; 32
    346a:	a7 fc       	sbrc	r10, 7
    346c:	8d e2       	ldi	r24, 0x2D	; 45
    346e:	b6 01       	movw	r22, r12
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	4d d0       	rcall	.+154    	; 0x350e <fputc>
    3474:	89 14       	cp	r8, r9
    3476:	30 f4       	brcc	.+12     	; 0x3484 <vfprintf+0x390>
    3478:	b6 01       	movw	r22, r12
    347a:	80 e3       	ldi	r24, 0x30	; 48
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	47 d0       	rcall	.+142    	; 0x350e <fputc>
    3480:	9a 94       	dec	r9
    3482:	f8 cf       	rjmp	.-16     	; 0x3474 <vfprintf+0x380>
    3484:	8a 94       	dec	r8
    3486:	f3 01       	movw	r30, r6
    3488:	e8 0d       	add	r30, r8
    348a:	f1 1d       	adc	r31, r1
    348c:	80 81       	ld	r24, Z
    348e:	b6 01       	movw	r22, r12
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	3d d0       	rcall	.+122    	; 0x350e <fputc>
    3494:	81 10       	cpse	r8, r1
    3496:	f6 cf       	rjmp	.-20     	; 0x3484 <vfprintf+0x390>
    3498:	22 20       	and	r2, r2
    349a:	09 f4       	brne	.+2      	; 0x349e <vfprintf+0x3aa>
    349c:	4e ce       	rjmp	.-868    	; 0x313a <vfprintf+0x46>
    349e:	b6 01       	movw	r22, r12
    34a0:	80 e2       	ldi	r24, 0x20	; 32
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	34 d0       	rcall	.+104    	; 0x350e <fputc>
    34a6:	2a 94       	dec	r2
    34a8:	f7 cf       	rjmp	.-18     	; 0x3498 <vfprintf+0x3a4>
    34aa:	f6 01       	movw	r30, r12
    34ac:	86 81       	ldd	r24, Z+6	; 0x06
    34ae:	97 81       	ldd	r25, Z+7	; 0x07
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <vfprintf+0x3c2>
    34b2:	8f ef       	ldi	r24, 0xFF	; 255
    34b4:	9f ef       	ldi	r25, 0xFF	; 255
    34b6:	2b 96       	adiw	r28, 0x0b	; 11
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	ff 90       	pop	r15
    34c6:	ef 90       	pop	r14
    34c8:	df 90       	pop	r13
    34ca:	cf 90       	pop	r12
    34cc:	bf 90       	pop	r11
    34ce:	af 90       	pop	r10
    34d0:	9f 90       	pop	r9
    34d2:	8f 90       	pop	r8
    34d4:	7f 90       	pop	r7
    34d6:	6f 90       	pop	r6
    34d8:	5f 90       	pop	r5
    34da:	4f 90       	pop	r4
    34dc:	3f 90       	pop	r3
    34de:	2f 90       	pop	r2
    34e0:	08 95       	ret

000034e2 <strnlen_P>:
    34e2:	fc 01       	movw	r30, r24
    34e4:	05 90       	lpm	r0, Z+
    34e6:	61 50       	subi	r22, 0x01	; 1
    34e8:	70 40       	sbci	r23, 0x00	; 0
    34ea:	01 10       	cpse	r0, r1
    34ec:	d8 f7       	brcc	.-10     	; 0x34e4 <strnlen_P+0x2>
    34ee:	80 95       	com	r24
    34f0:	90 95       	com	r25
    34f2:	8e 0f       	add	r24, r30
    34f4:	9f 1f       	adc	r25, r31
    34f6:	08 95       	ret

000034f8 <strnlen>:
    34f8:	fc 01       	movw	r30, r24
    34fa:	61 50       	subi	r22, 0x01	; 1
    34fc:	70 40       	sbci	r23, 0x00	; 0
    34fe:	01 90       	ld	r0, Z+
    3500:	01 10       	cpse	r0, r1
    3502:	d8 f7       	brcc	.-10     	; 0x34fa <strnlen+0x2>
    3504:	80 95       	com	r24
    3506:	90 95       	com	r25
    3508:	8e 0f       	add	r24, r30
    350a:	9f 1f       	adc	r25, r31
    350c:	08 95       	ret

0000350e <fputc>:
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	fb 01       	movw	r30, r22
    3518:	23 81       	ldd	r18, Z+3	; 0x03
    351a:	21 fd       	sbrc	r18, 1
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <fputc+0x16>
    351e:	8f ef       	ldi	r24, 0xFF	; 255
    3520:	9f ef       	ldi	r25, 0xFF	; 255
    3522:	2c c0       	rjmp	.+88     	; 0x357c <fputc+0x6e>
    3524:	22 ff       	sbrs	r18, 2
    3526:	16 c0       	rjmp	.+44     	; 0x3554 <fputc+0x46>
    3528:	46 81       	ldd	r20, Z+6	; 0x06
    352a:	57 81       	ldd	r21, Z+7	; 0x07
    352c:	24 81       	ldd	r18, Z+4	; 0x04
    352e:	35 81       	ldd	r19, Z+5	; 0x05
    3530:	42 17       	cp	r20, r18
    3532:	53 07       	cpc	r21, r19
    3534:	44 f4       	brge	.+16     	; 0x3546 <fputc+0x38>
    3536:	a0 81       	ld	r26, Z
    3538:	b1 81       	ldd	r27, Z+1	; 0x01
    353a:	9d 01       	movw	r18, r26
    353c:	2f 5f       	subi	r18, 0xFF	; 255
    353e:	3f 4f       	sbci	r19, 0xFF	; 255
    3540:	20 83       	st	Z, r18
    3542:	31 83       	std	Z+1, r19	; 0x01
    3544:	8c 93       	st	X, r24
    3546:	26 81       	ldd	r18, Z+6	; 0x06
    3548:	37 81       	ldd	r19, Z+7	; 0x07
    354a:	2f 5f       	subi	r18, 0xFF	; 255
    354c:	3f 4f       	sbci	r19, 0xFF	; 255
    354e:	26 83       	std	Z+6, r18	; 0x06
    3550:	37 83       	std	Z+7, r19	; 0x07
    3552:	14 c0       	rjmp	.+40     	; 0x357c <fputc+0x6e>
    3554:	8b 01       	movw	r16, r22
    3556:	ec 01       	movw	r28, r24
    3558:	fb 01       	movw	r30, r22
    355a:	00 84       	ldd	r0, Z+8	; 0x08
    355c:	f1 85       	ldd	r31, Z+9	; 0x09
    355e:	e0 2d       	mov	r30, r0
    3560:	19 95       	eicall
    3562:	89 2b       	or	r24, r25
    3564:	e1 f6       	brne	.-72     	; 0x351e <fputc+0x10>
    3566:	d8 01       	movw	r26, r16
    3568:	16 96       	adiw	r26, 0x06	; 6
    356a:	8d 91       	ld	r24, X+
    356c:	9c 91       	ld	r25, X
    356e:	17 97       	sbiw	r26, 0x07	; 7
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	16 96       	adiw	r26, 0x06	; 6
    3574:	8d 93       	st	X+, r24
    3576:	9c 93       	st	X, r25
    3578:	17 97       	sbiw	r26, 0x07	; 7
    357a:	ce 01       	movw	r24, r28
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	08 95       	ret

00003586 <__ultoa_invert>:
    3586:	fa 01       	movw	r30, r20
    3588:	aa 27       	eor	r26, r26
    358a:	28 30       	cpi	r18, 0x08	; 8
    358c:	51 f1       	breq	.+84     	; 0x35e2 <__ultoa_invert+0x5c>
    358e:	20 31       	cpi	r18, 0x10	; 16
    3590:	81 f1       	breq	.+96     	; 0x35f2 <__ultoa_invert+0x6c>
    3592:	e8 94       	clt
    3594:	6f 93       	push	r22
    3596:	6e 7f       	andi	r22, 0xFE	; 254
    3598:	6e 5f       	subi	r22, 0xFE	; 254
    359a:	7f 4f       	sbci	r23, 0xFF	; 255
    359c:	8f 4f       	sbci	r24, 0xFF	; 255
    359e:	9f 4f       	sbci	r25, 0xFF	; 255
    35a0:	af 4f       	sbci	r26, 0xFF	; 255
    35a2:	b1 e0       	ldi	r27, 0x01	; 1
    35a4:	3e d0       	rcall	.+124    	; 0x3622 <__ultoa_invert+0x9c>
    35a6:	b4 e0       	ldi	r27, 0x04	; 4
    35a8:	3c d0       	rcall	.+120    	; 0x3622 <__ultoa_invert+0x9c>
    35aa:	67 0f       	add	r22, r23
    35ac:	78 1f       	adc	r23, r24
    35ae:	89 1f       	adc	r24, r25
    35b0:	9a 1f       	adc	r25, r26
    35b2:	a1 1d       	adc	r26, r1
    35b4:	68 0f       	add	r22, r24
    35b6:	79 1f       	adc	r23, r25
    35b8:	8a 1f       	adc	r24, r26
    35ba:	91 1d       	adc	r25, r1
    35bc:	a1 1d       	adc	r26, r1
    35be:	6a 0f       	add	r22, r26
    35c0:	71 1d       	adc	r23, r1
    35c2:	81 1d       	adc	r24, r1
    35c4:	91 1d       	adc	r25, r1
    35c6:	a1 1d       	adc	r26, r1
    35c8:	20 d0       	rcall	.+64     	; 0x360a <__ultoa_invert+0x84>
    35ca:	09 f4       	brne	.+2      	; 0x35ce <__ultoa_invert+0x48>
    35cc:	68 94       	set
    35ce:	3f 91       	pop	r19
    35d0:	2a e0       	ldi	r18, 0x0A	; 10
    35d2:	26 9f       	mul	r18, r22
    35d4:	11 24       	eor	r1, r1
    35d6:	30 19       	sub	r19, r0
    35d8:	30 5d       	subi	r19, 0xD0	; 208
    35da:	31 93       	st	Z+, r19
    35dc:	de f6       	brtc	.-74     	; 0x3594 <__ultoa_invert+0xe>
    35de:	cf 01       	movw	r24, r30
    35e0:	08 95       	ret
    35e2:	46 2f       	mov	r20, r22
    35e4:	47 70       	andi	r20, 0x07	; 7
    35e6:	40 5d       	subi	r20, 0xD0	; 208
    35e8:	41 93       	st	Z+, r20
    35ea:	b3 e0       	ldi	r27, 0x03	; 3
    35ec:	0f d0       	rcall	.+30     	; 0x360c <__ultoa_invert+0x86>
    35ee:	c9 f7       	brne	.-14     	; 0x35e2 <__ultoa_invert+0x5c>
    35f0:	f6 cf       	rjmp	.-20     	; 0x35de <__ultoa_invert+0x58>
    35f2:	46 2f       	mov	r20, r22
    35f4:	4f 70       	andi	r20, 0x0F	; 15
    35f6:	40 5d       	subi	r20, 0xD0	; 208
    35f8:	4a 33       	cpi	r20, 0x3A	; 58
    35fa:	18 f0       	brcs	.+6      	; 0x3602 <__ultoa_invert+0x7c>
    35fc:	49 5d       	subi	r20, 0xD9	; 217
    35fe:	31 fd       	sbrc	r19, 1
    3600:	40 52       	subi	r20, 0x20	; 32
    3602:	41 93       	st	Z+, r20
    3604:	02 d0       	rcall	.+4      	; 0x360a <__ultoa_invert+0x84>
    3606:	a9 f7       	brne	.-22     	; 0x35f2 <__ultoa_invert+0x6c>
    3608:	ea cf       	rjmp	.-44     	; 0x35de <__ultoa_invert+0x58>
    360a:	b4 e0       	ldi	r27, 0x04	; 4
    360c:	a6 95       	lsr	r26
    360e:	97 95       	ror	r25
    3610:	87 95       	ror	r24
    3612:	77 95       	ror	r23
    3614:	67 95       	ror	r22
    3616:	ba 95       	dec	r27
    3618:	c9 f7       	brne	.-14     	; 0x360c <__ultoa_invert+0x86>
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	61 05       	cpc	r22, r1
    361e:	71 05       	cpc	r23, r1
    3620:	08 95       	ret
    3622:	9b 01       	movw	r18, r22
    3624:	ac 01       	movw	r20, r24
    3626:	0a 2e       	mov	r0, r26
    3628:	06 94       	lsr	r0
    362a:	57 95       	ror	r21
    362c:	47 95       	ror	r20
    362e:	37 95       	ror	r19
    3630:	27 95       	ror	r18
    3632:	ba 95       	dec	r27
    3634:	c9 f7       	brne	.-14     	; 0x3628 <__ultoa_invert+0xa2>
    3636:	62 0f       	add	r22, r18
    3638:	73 1f       	adc	r23, r19
    363a:	84 1f       	adc	r24, r20
    363c:	95 1f       	adc	r25, r21
    363e:	a0 1d       	adc	r26, r0
    3640:	08 95       	ret

00003642 <_exit>:
    3642:	f8 94       	cli

00003644 <__stop_program>:
    3644:	ff cf       	rjmp	.-2      	; 0x3644 <__stop_program>
